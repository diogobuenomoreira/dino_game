
JogoLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002934  08002934  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002934  08002934  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002934  08002934  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800293c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000090  080029cc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080029cc  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000395b  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000127d  00000000  00000000  00023a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00024c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  000251c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702e  00000000  00000000  00025640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c20  00000000  00000000  0003c66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eed9  00000000  00000000  0004228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c24  00000000  00000000  000c11b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a4 	.word	0x080027a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080027a4 	.word	0x080027a4

0800014c <LCDCmd>:
/********************************************************************/

/*******************************FUNCOES******************************/
/****************ENVIA UM COMANDO PARA O DISPLAY*********************/
void LCDCmd (unsigned char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  LCD_RS_OFF;
 8000156:	2200      	movs	r2, #0
 8000158:	2140      	movs	r1, #64	; 0x40
 800015a:	480a      	ldr	r0, [pc, #40]	; (8000184 <LCDCmd+0x38>)
 800015c:	f000 fe84 	bl	8000e68 <HAL_GPIO_WritePin>
  sendnibble(cmd>>4);           //uso de 4 bits apenas
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	091b      	lsrs	r3, r3, #4
 8000164:	b2db      	uxtb	r3, r3
 8000166:	4618      	mov	r0, r3
 8000168:	f000 f80e 	bl	8000188 <sendnibble>
  sendnibble(cmd&0x0F);         //escreve 4 bits
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f003 030f 	and.w	r3, r3, #15
 8000172:	b2db      	uxtb	r3, r3
 8000174:	4618      	mov	r0, r3
 8000176:	f000 f807 	bl	8000188 <sendnibble>
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <sendnibble>:
/********************************************************************/
/***********ROTINA PARA TRABALHAR COM 4 BITS NO DISPLAY**************/
void sendnibble(unsigned char dado)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
  LCD_DATA_OFF;
 8000192:	2200      	movs	r2, #0
 8000194:	211b      	movs	r1, #27
 8000196:	481d      	ldr	r0, [pc, #116]	; (800020c <sendnibble+0x84>)
 8000198:	f000 fe66 	bl	8000e68 <HAL_GPIO_WritePin>
  if ((dado&0x01)==0x01) LCD_D0_ON;   //atualiza valor de dado
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d004      	beq.n	80001b0 <sendnibble+0x28>
 80001a6:	2201      	movs	r2, #1
 80001a8:	2110      	movs	r1, #16
 80001aa:	4818      	ldr	r0, [pc, #96]	; (800020c <sendnibble+0x84>)
 80001ac:	f000 fe5c 	bl	8000e68 <HAL_GPIO_WritePin>
  if ((dado&0x02)==0x02) LCD_D1_ON;   //atualiza valor de dado
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 0302 	and.w	r3, r3, #2
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d004      	beq.n	80001c4 <sendnibble+0x3c>
 80001ba:	2201      	movs	r2, #1
 80001bc:	2108      	movs	r1, #8
 80001be:	4813      	ldr	r0, [pc, #76]	; (800020c <sendnibble+0x84>)
 80001c0:	f000 fe52 	bl	8000e68 <HAL_GPIO_WritePin>
  if ((dado&0x04)==0x04) LCD_D2_ON;   //atualiza valor de dado
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 0304 	and.w	r3, r3, #4
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d004      	beq.n	80001d8 <sendnibble+0x50>
 80001ce:	2201      	movs	r2, #1
 80001d0:	2102      	movs	r1, #2
 80001d2:	480e      	ldr	r0, [pc, #56]	; (800020c <sendnibble+0x84>)
 80001d4:	f000 fe48 	bl	8000e68 <HAL_GPIO_WritePin>
  if ((dado&0x08)==0x08) LCD_D3_ON;   //atualiza valor de dado
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 0308 	and.w	r3, r3, #8
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d004      	beq.n	80001ec <sendnibble+0x64>
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4809      	ldr	r0, [pc, #36]	; (800020c <sendnibble+0x84>)
 80001e8:	f000 fe3e 	bl	8000e68 <HAL_GPIO_WritePin>
  LCD_EN_ON;
 80001ec:	2201      	movs	r2, #1
 80001ee:	2120      	movs	r1, #32
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <sendnibble+0x84>)
 80001f2:	f000 fe39 	bl	8000e68 <HAL_GPIO_WritePin>
  delayLCD();
 80001f6:	f000 f843 	bl	8000280 <delayLCD>
  LCD_EN_OFF;
 80001fa:	2200      	movs	r2, #0
 80001fc:	2120      	movs	r1, #32
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <sendnibble+0x84>)
 8000200:	f000 fe32 	bl	8000e68 <HAL_GPIO_WritePin>
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00

08000210 <InitLCD>:
/********************************************************************/
/******************INICIALIZA O DISPLAY******************************/
void InitLCD (void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  LCD_EN_OFF;
 8000214:	2200      	movs	r2, #0
 8000216:	2120      	movs	r1, #32
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <InitLCD+0x6c>)
 800021a:	f000 fe25 	bl	8000e68 <HAL_GPIO_WritePin>
  LCD_RS_OFF;
 800021e:	2200      	movs	r2, #0
 8000220:	2140      	movs	r1, #64	; 0x40
 8000222:	4816      	ldr	r0, [pc, #88]	; (800027c <InitLCD+0x6c>)
 8000224:	f000 fe20 	bl	8000e68 <HAL_GPIO_WritePin>
  sendnibble(0x30>>4);
 8000228:	2003      	movs	r0, #3
 800022a:	f7ff ffad 	bl	8000188 <sendnibble>
  delayLCD();
 800022e:	f000 f827 	bl	8000280 <delayLCD>
  sendnibble(0x30>>4);
 8000232:	2003      	movs	r0, #3
 8000234:	f7ff ffa8 	bl	8000188 <sendnibble>
  delayLCD();
 8000238:	f000 f822 	bl	8000280 <delayLCD>
  sendnibble(0x30>>4);
 800023c:	2003      	movs	r0, #3
 800023e:	f7ff ffa3 	bl	8000188 <sendnibble>
  delayLCD();
 8000242:	f000 f81d 	bl	8000280 <delayLCD>
  sendnibble(0x20>>4);
 8000246:	2002      	movs	r0, #2
 8000248:	f7ff ff9e 	bl	8000188 <sendnibble>
  delayLCD();
 800024c:	f000 f818 	bl	8000280 <delayLCD>
  LCDCmd(0x28);
 8000250:	2028      	movs	r0, #40	; 0x28
 8000252:	f7ff ff7b 	bl	800014c <LCDCmd>
  delayLCD();
 8000256:	f000 f813 	bl	8000280 <delayLCD>
  LCDCmd(0x08);
 800025a:	2008      	movs	r0, #8
 800025c:	f7ff ff76 	bl	800014c <LCDCmd>
  delayLCD();
 8000260:	f000 f80e 	bl	8000280 <delayLCD>
  LCDCmd(0x0C);
 8000264:	200c      	movs	r0, #12
 8000266:	f7ff ff71 	bl	800014c <LCDCmd>
  delayLCD();
 800026a:	f000 f809 	bl	8000280 <delayLCD>
  LCDCmd(0x01);
 800026e:	2001      	movs	r0, #1
 8000270:	f7ff ff6c 	bl	800014c <LCDCmd>
  delayLCD();
 8000274:	f000 f804 	bl	8000280 <delayLCD>
   //Transaction end
  //dispSend(0x48, command); //Same thing, but for 0x01
  //for(i=0; i<8; i++) dispSend(cact[i], write);
  //dispSend(0x80, command);
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010c00 	.word	0x40010c00

08000280 <delayLCD>:
/********************************************************************/
/*******************ATRASO PARA CONFIGURAR O DISPLAY*****************/
void delayLCD (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f000 fb6b 	bl	8000960 <HAL_Delay>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}

0800028e <LCDPrintStr>:
  LCDPrintStr(dado);
}
/********************************************************************/
/*******************ENVIA UMA MENSAGEM AO DISPLAY********************/
void LCDPrintStr (char *dado)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
	while (*dado != 0)
 8000296:	e007      	b.n	80002a8 <LCDPrintStr+0x1a>
	{
		LCDChar(*dado);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f80d 	bl	80002bc <LCDChar>
		dado++;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3301      	adds	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
	while (*dado != 0)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f3      	bne.n	8000298 <LCDPrintStr+0xa>
	}
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <LCDChar>:
  LCDPrintVal(dado);
}

/**********************ENVIA UM DADO AO DISPLAY**********************/
void LCDChar (unsigned char dado)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  LCD_RS_ON;
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <LCDChar+0x38>)
 80002cc:	f000 fdcc 	bl	8000e68 <HAL_GPIO_WritePin>
  sendnibble(dado>>4);
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	091b      	lsrs	r3, r3, #4
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff56 	bl	8000188 <sendnibble>
  sendnibble(dado&0x0F);
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff4f 	bl	8000188 <sendnibble>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010c00 	.word	0x40010c00

080002f8 <LCDCursorMode>:
  sendnibble(dado&0x0F);
}
/********************************************************************/
/**********************ESCOLHE MODO CURSOR **********************/
void LCDCursorMode (unsigned char modo)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if(modo==0) LCDCmd(0x0c);   //apagado
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d103      	bne.n	8000310 <LCDCursorMode+0x18>
 8000308:	200c      	movs	r0, #12
 800030a:	f7ff ff1f 	bl	800014c <LCDCmd>
  else if(modo==1) LCDCmd(0x0F);     //ligado
}
 800030e:	e005      	b.n	800031c <LCDCursorMode+0x24>
  else if(modo==1) LCDCmd(0x0F);     //ligado
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d102      	bne.n	800031c <LCDCursorMode+0x24>
 8000316:	200f      	movs	r0, #15
 8000318:	f7ff ff18 	bl	800014c <LCDCmd>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <LCDCursorPos>:
/********************************************************************/
/**********************ESCOLHE POSICAO CURSOR **********************/
void LCDCursorPos (unsigned char col,unsigned char row)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	460a      	mov	r2, r1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	4613      	mov	r3, r2
 8000332:	71bb      	strb	r3, [r7, #6]
  unsigned char pos;
  pos=col-1;
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3b01      	subs	r3, #1
 8000338:	73fb      	strb	r3, [r7, #15]
  if (row==1)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d107      	bne.n	8000350 <LCDCursorPos+0x2c>
  {
    pos=pos+0x80;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	3b80      	subs	r3, #128	; 0x80
 8000344:	73fb      	strb	r3, [r7, #15]
    LCDCmd(pos);
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff feff 	bl	800014c <LCDCmd>
  else
  {
    pos=pos+0xc0;
    LCDCmd(pos);
  }
}
 800034e:	e006      	b.n	800035e <LCDCursorPos+0x3a>
    pos=pos+0xc0;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	3b40      	subs	r3, #64	; 0x40
 8000354:	73fb      	strb	r3, [r7, #15]
    LCDCmd(pos);
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff fef7 	bl	800014c <LCDCmd>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <createChar>:


// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, unsigned char charmap[]) {
 8000366:	b580      	push	{r7, lr}
 8000368:	b084      	sub	sp, #16
 800036a:	af00      	add	r7, sp, #0
 800036c:	4603      	mov	r3, r0
 800036e:	6039      	str	r1, [r7, #0]
 8000370:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	71fb      	strb	r3, [r7, #7]
  LCDCmd(LCD_SETCGRAMADDR | (location << 3));
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	b25b      	sxtb	r3, r3
 8000380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000384:	b25b      	sxtb	r3, r3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fedf 	bl	800014c <LCDCmd>
  for (int i=0; i<8; i++) {
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	e009      	b.n	80003a8 <createChar+0x42>
	 LCDChar(charmap[i]);
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff8d 	bl	80002bc <LCDChar>
  for (int i=0; i<8; i++) {
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	3301      	adds	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	ddf2      	ble.n	8000394 <createChar+0x2e>
  }
}
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <LCDClear>:

void LCDClear(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

	LCDCmd(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff fec5 	bl	800014c <LCDCmd>
	HAL_Delay(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 facc 	bl	8000960 <HAL_Delay>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <RandChar>:

void RandChar(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

	uint8_t lowerLimit = 3, upperLimit = 14;
 80003d2:	2303      	movs	r3, #3
 80003d4:	71fb      	strb	r3, [r7, #7]
 80003d6:	230e      	movs	r3, #14
 80003d8:	71bb      	strb	r3, [r7, #6]
	uint8_t col = 0, ch = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	717b      	strb	r3, [r7, #5]
 80003de:	2300      	movs	r3, #0
 80003e0:	713b      	strb	r3, [r7, #4]

	srand(HAL_GetTick()); // Seed
 80003e2:	f000 fab3 	bl	800094c <HAL_GetTick>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f96f 	bl	80016cc <srand>

	col =  lowerLimit + rand() % (upperLimit - lowerLimit);
 80003ee:	f001 f99b 	bl	8001728 <rand>
 80003f2:	4602      	mov	r2, r0
 80003f4:	79b9      	ldrb	r1, [r7, #6]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80003fe:	fb01 f303 	mul.w	r3, r1, r3
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	b2da      	uxtb	r2, r3
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4413      	add	r3, r2
 800040a:	717b      	strb	r3, [r7, #5]
	LCDCursorPos(col, 2);
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	2102      	movs	r1, #2
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff87 	bl	8000324 <LCDCursorPos>

	lowerLimit = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	71fb      	strb	r3, [r7, #7]
	upperLimit = 4;
 800041a:	2304      	movs	r3, #4
 800041c:	71bb      	strb	r3, [r7, #6]

	ch =  lowerLimit + rand() % (upperLimit - lowerLimit);
 800041e:	f001 f983 	bl	8001728 <rand>
 8000422:	4602      	mov	r2, r0
 8000424:	79b9      	ldrb	r1, [r7, #6]
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	1acb      	subs	r3, r1, r3
 800042a:	fb92 f1f3 	sdiv	r1, r2, r3
 800042e:	fb01 f303 	mul.w	r3, r1, r3
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	b2da      	uxtb	r2, r3
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4413      	add	r3, r2
 800043a:	713b      	strb	r3, [r7, #4]
	LCDChar(ch);
 800043c:	793b      	ldrb	r3, [r7, #4]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff3c 	bl	80002bc <LCDChar>
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <DisplayStartScreen>:

void DisplayStartScreen(void) {
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0

	char InitMsg [] = "Dino Game...";
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <DisplayStartScreen+0x60>)
 8000454:	463c      	mov	r4, r7
 8000456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000458:	c407      	stmia	r4!, {r0, r1, r2}
 800045a:	7023      	strb	r3, [r4, #0]

	LCDCursorPos(1,1);
 800045c:	2101      	movs	r1, #1
 800045e:	2001      	movs	r0, #1
 8000460:	f7ff ff60 	bl	8000324 <LCDCursorPos>
	LCDPrintStr(InitMsg);
 8000464:	463b      	mov	r3, r7
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff11 	bl	800028e <LCDPrintStr>

	LCDCursorPos(1, 2);
 800046c:	2102      	movs	r1, #2
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff ff58 	bl	8000324 <LCDCursorPos>
	LCDChar(BLOCK);
 8000474:	2003      	movs	r0, #3
 8000476:	f7ff ff21 	bl	80002bc <LCDChar>

	LCDCursorPos(15, 2);
 800047a:	2102      	movs	r1, #2
 800047c:	200f      	movs	r0, #15
 800047e:	f7ff ff51 	bl	8000324 <LCDCursorPos>
	LCDChar(BLOCK);
 8000482:	2003      	movs	r0, #3
 8000484:	f7ff ff1a 	bl	80002bc <LCDChar>

	LCDCursorPos(2, 2);
 8000488:	2102      	movs	r1, #2
 800048a:	2002      	movs	r0, #2
 800048c:	f7ff ff4a 	bl	8000324 <LCDCursorPos>
	LCDChar(DINO);
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff13 	bl	80002bc <LCDChar>

	RandChar();
 8000496:	f7ff ff99 	bl	80003cc <RandChar>
	RandChar();
 800049a:	f7ff ff97 	bl	80003cc <RandChar>
	RandChar();
 800049e:	f7ff ff95 	bl	80003cc <RandChar>
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd90      	pop	{r4, r7, pc}
 80004aa:	bf00      	nop
 80004ac:	080027bc 	.word	0x080027bc

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 f9f2 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f828 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f862 	bl	8000584 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  InitLCD();
 80004c0:	f7ff fea6 	bl	8000210 <InitLCD>
  LCDCursorMode(0);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ff17 	bl	80002f8 <LCDCursorMode>

  // create a new character
  createChar(DINO, dino); // create dino
 80004ca:	490c      	ldr	r1, [pc, #48]	; (80004fc <main+0x4c>)
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff ff4a 	bl	8000366 <createChar>
  createChar(CACTUS, cacti); // create cactus
 80004d2:	490b      	ldr	r1, [pc, #44]	; (8000500 <main+0x50>)
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ff46 	bl	8000366 <createChar>
  createChar(BIRD, bird); // create cactus
 80004da:	490a      	ldr	r1, [pc, #40]	; (8000504 <main+0x54>)
 80004dc:	2002      	movs	r0, #2
 80004de:	f7ff ff42 	bl	8000366 <createChar>
  createChar(BLOCK, block); // create cactus
 80004e2:	4909      	ldr	r1, [pc, #36]	; (8000508 <main+0x58>)
 80004e4:	2003      	movs	r0, #3
 80004e6:	f7ff ff3e 	bl	8000366 <createChar>

  DisplayStartScreen();
 80004ea:	f7ff ffaf 	bl	800044c <DisplayStartScreen>
  HAL_Delay(3000);
 80004ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004f2:	f000 fa35 	bl	8000960 <HAL_Delay>
  LCDClear();
 80004f6:	f7ff ff5f 	bl	80003b8 <LCDClear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <main+0x4a>
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000008 	.word	0x20000008
 8000504:	20000010 	.word	0x20000010
 8000508:	20000018 	.word	0x20000018

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f8ce 	bl	80016bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fca8 	bl	8000e98 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800054e:	f000 f859 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff16 	bl	800139c <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000576:	f000 f845 	bl	8000604 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3740      	adds	r7, #64	; 0x40
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_GPIO_Init+0x78>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <MX_GPIO_Init+0x78>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_GPIO_Init+0x78>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_GPIO_Init+0x78>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a11      	ldr	r2, [pc, #68]	; (80005fc <MX_GPIO_Init+0x78>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_GPIO_Init+0x78>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

#if SIMULATE

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f240 217b 	movw	r1, #635	; 0x27b
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005d0:	f000 fc4a 	bl	8000e68 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PB3 PB4 PB5 PB6
                             PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 80005d4:	f240 237b 	movw	r3, #635	; 0x27b
 80005d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;

#endif

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4619      	mov	r1, r3
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005ee:	f000 fabf 	bl	8000b70 <HAL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010c00 	.word	0x40010c00

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_MspInit+0x5c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x5c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_MspInit+0x60>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_MspInit+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f935 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
	return 1;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <_kill>:

int _kill(int pid, int sig)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80006da:	f000 ffc5 	bl	8001668 <__errno>
 80006de:	4603      	mov	r3, r0
 80006e0:	2216      	movs	r2, #22
 80006e2:	601a      	str	r2, [r3, #0]
	return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_exit>:

void _exit (int status)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ffe7 	bl	80006d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000702:	e7fe      	b.n	8000702 <_exit+0x12>

08000704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e00a      	b.n	800072c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000716:	f3af 8000 	nop.w
 800071a:	4601      	mov	r1, r0
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	60ba      	str	r2, [r7, #8]
 8000722:	b2ca      	uxtb	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	dbf0      	blt.n	8000716 <_read+0x12>
	}

return len;
 8000734:	687b      	ldr	r3, [r7, #4]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	e009      	b.n	8000764 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60ba      	str	r2, [r7, #8]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	dbf1      	blt.n	8000750 <_write+0x12>
	}
	return len;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_close>:

int _close(int file)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
	return -1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800079c:	605a      	str	r2, [r3, #4]
	return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <_isatty>:

int _isatty(int file)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	return 1;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f000 ff2e 	bl	8001668 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20002800 	.word	0x20002800
 8000838:	00000400 	.word	0x00000400
 800083c:	200000ac 	.word	0x200000ac
 8000840:	200000c8 	.word	0x200000c8

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000876:	f7ff ffe5 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f000 fefb 	bl	8001674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fe17 	bl	80004b0 <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800088c:	0800293c 	.word	0x0800293c
  ldr r2, =_sbss
 8000890:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000894:	200000c4 	.word	0x200000c4

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f92b 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff feaa 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f935 	bl	8000b56 <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f90b 	bl	8000b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000020 	.word	0x20000020
 8000920:	20000028 	.word	0x20000028
 8000924:	20000024 	.word	0x20000024

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000028 	.word	0x20000028
 8000948:	200000b0 	.word	0x200000b0

0800094c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	200000b0 	.word	0x200000b0

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff fff0 	bl	800094c <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffe0 	bl	800094c <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff90 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff49 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b30:	f7ff ff5e 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ff90 	bl	8000a60 <NVIC_EncodePriority>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5f 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffb0 	bl	8000ac4 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b08b      	sub	sp, #44	; 0x2c
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e161      	b.n	8000e48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b84:	2201      	movs	r2, #1
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 8150 	bne.w	8000e42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a97      	ldr	r2, [pc, #604]	; (8000e04 <HAL_GPIO_Init+0x294>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d05e      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bac:	4a95      	ldr	r2, [pc, #596]	; (8000e04 <HAL_GPIO_Init+0x294>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d875      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bb2:	4a95      	ldr	r2, [pc, #596]	; (8000e08 <HAL_GPIO_Init+0x298>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d058      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bb8:	4a93      	ldr	r2, [pc, #588]	; (8000e08 <HAL_GPIO_Init+0x298>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d86f      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bbe:	4a93      	ldr	r2, [pc, #588]	; (8000e0c <HAL_GPIO_Init+0x29c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d052      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bc4:	4a91      	ldr	r2, [pc, #580]	; (8000e0c <HAL_GPIO_Init+0x29c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d869      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bca:	4a91      	ldr	r2, [pc, #580]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d04c      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bd0:	4a8f      	ldr	r2, [pc, #572]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d863      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bd6:	4a8f      	ldr	r2, [pc, #572]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a8d      	ldr	r2, [pc, #564]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d85d      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d82a      	bhi.n	8000c3c <HAL_GPIO_Init+0xcc>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d859      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <HAL_GPIO_Init+0x80>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c45 	.word	0x08000c45
 8000bf8:	08000c57 	.word	0x08000c57
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000c9f 	.word	0x08000c9f
 8000c04:	08000c9f 	.word	0x08000c9f
 8000c08:	08000c9f 	.word	0x08000c9f
 8000c0c:	08000c9f 	.word	0x08000c9f
 8000c10:	08000c9f 	.word	0x08000c9f
 8000c14:	08000c9f 	.word	0x08000c9f
 8000c18:	08000c9f 	.word	0x08000c9f
 8000c1c:	08000c9f 	.word	0x08000c9f
 8000c20:	08000c9f 	.word	0x08000c9f
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c9f 	.word	0x08000c9f
 8000c2c:	08000c9f 	.word	0x08000c9f
 8000c30:	08000c9f 	.word	0x08000c9f
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	4a76      	ldr	r2, [pc, #472]	; (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c42:	e02c      	b.n	8000c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e029      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e024      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e01f      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e01a      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c72:	2304      	movs	r3, #4
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e013      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	611a      	str	r2, [r3, #16]
          break;
 8000c8a:	e009      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	615a      	str	r2, [r3, #20]
          break;
 8000c96:	e003      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          break;
 8000c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d801      	bhi.n	8000caa <HAL_GPIO_Init+0x13a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_Init+0x13e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d802      	bhi.n	8000cbc <HAL_GPIO_Init+0x14c>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x152>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	210f      	movs	r1, #15
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	6a39      	ldr	r1, [r7, #32]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80a9 	beq.w	8000e42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a49      	ldr	r2, [pc, #292]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d08:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	; (8000e24 <HAL_GPIO_Init+0x2b4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3c      	ldr	r2, [pc, #240]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3b      	ldr	r2, [pc, #236]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1d8>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d50:	2300      	movs	r3, #0
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d62:	492f      	ldr	r1, [pc, #188]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	492b      	ldr	r1, [pc, #172]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4927      	ldr	r1, [pc, #156]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4921      	ldr	r1, [pc, #132]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	491d      	ldr	r1, [pc, #116]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	4917      	ldr	r1, [pc, #92]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d01f      	beq.n	8000e34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	490d      	ldr	r1, [pc, #52]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
 8000e00:	e01f      	b.n	8000e42 <HAL_GPIO_Init+0x2d2>
 8000e02:	bf00      	nop
 8000e04:	10320000 	.word	0x10320000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10220000 	.word	0x10220000
 8000e10:	10210000 	.word	0x10210000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	; (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae96 	bne.w	8000b84 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	041a      	lsls	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8087 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
 8000ed0:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e24c      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x76>
 8000f00:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0xbc>
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a71      	ldr	r2, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcea 	bl	800094c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fce6 	bl	800094c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e200      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe4>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcd6 	bl	800094c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcd2 	bl	800094c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1ec      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10c>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c0      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4939      	ldr	r1, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fc8b 	bl	800094c <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc87 	bl	800094c <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc6a 	bl	800094c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc66 	bl	800094c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e180      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc4a 	bl	800094c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc46 	bl	800094c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e160      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 faa6 	bl	800162c <RCC_Delay>
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc30 	bl	800094c <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc2c 	bl	800094c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d908      	bls.n	8001110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e146      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a6 	beq.w	8001276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b8b      	ldr	r3, [pc, #556]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbed 	bl	800094c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fbe9 	bl	800094c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e103      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x312>
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x334>
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a69      	ldr	r2, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a66      	ldr	r2, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x356>
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a60      	ldr	r2, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	4b5e      	ldr	r3, [pc, #376]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b58      	ldr	r3, [pc, #352]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb9d 	bl	800094c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb99 	bl	800094c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0b1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x37e>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb87 	bl	800094c <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb83 	bl	800094c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e09b      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d061      	beq.n	8001350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d146      	bne.n	8001322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb57 	bl	800094c <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fb53 	bl	800094c <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e06d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4921      	ldr	r1, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	430b      	orrs	r3, r1
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb27 	bl	800094c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb23 	bl	800094c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e03d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x46a>
 8001320:	e035      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb10 	bl	800094c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fb0c 	bl	800094c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e026      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x498>
 800134e:	e01e      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e019      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d910      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4965      	ldr	r1, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800141a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d040      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d115      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e073      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fa5e 	bl	800094c <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa5a 	bl	800094c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e053      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d210      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1cc>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f9bc 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	080027dc 	.word	0x080027dc
 8001568:	20000020 	.word	0x20000020
 800156c:	20000024 	.word	0x20000024

08001570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	b490      	push	{r4, r7}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_RCC_GetSysClockFreq+0xac>)
 8001578:	1d3c      	adds	r4, r7, #4
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001580:	f240 2301 	movw	r3, #513	; 0x201
 8001584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb0>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x40>
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x46>
 80015ae:	e02b      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015b2:	623b      	str	r3, [r7, #32]
      break;
 80015b4:	e02b      	b.n	800160e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d012      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	0c5b      	lsrs	r3, r3, #17
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	3328      	adds	r3, #40	; 0x28
 80015de:	443b      	add	r3, r7
 80015e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	e004      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	623b      	str	r3, [r7, #32]
      break;
 8001606:	e002      	b.n	800160e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160a:	623b      	str	r3, [r7, #32]
      break;
 800160c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800160e:	6a3b      	ldr	r3, [r7, #32]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bc90      	pop	{r4, r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	080027cc 	.word	0x080027cc
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	003d0900 	.word	0x003d0900

0800162c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <RCC_Delay+0x34>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <RCC_Delay+0x38>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a5b      	lsrs	r3, r3, #9
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001648:	bf00      	nop
  }
  while (Delay --);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	60fa      	str	r2, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f9      	bne.n	8001648 <RCC_Delay+0x1c>
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000020 	.word	0x20000020
 8001664:	10624dd3 	.word	0x10624dd3

08001668 <__errno>:
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <__errno+0x8>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000002c 	.word	0x2000002c

08001674 <__libc_init_array>:
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	2600      	movs	r6, #0
 8001678:	4d0c      	ldr	r5, [pc, #48]	; (80016ac <__libc_init_array+0x38>)
 800167a:	4c0d      	ldr	r4, [pc, #52]	; (80016b0 <__libc_init_array+0x3c>)
 800167c:	1b64      	subs	r4, r4, r5
 800167e:	10a4      	asrs	r4, r4, #2
 8001680:	42a6      	cmp	r6, r4
 8001682:	d109      	bne.n	8001698 <__libc_init_array+0x24>
 8001684:	f001 f88e 	bl	80027a4 <_init>
 8001688:	2600      	movs	r6, #0
 800168a:	4d0a      	ldr	r5, [pc, #40]	; (80016b4 <__libc_init_array+0x40>)
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <__libc_init_array+0x44>)
 800168e:	1b64      	subs	r4, r4, r5
 8001690:	10a4      	asrs	r4, r4, #2
 8001692:	42a6      	cmp	r6, r4
 8001694:	d105      	bne.n	80016a2 <__libc_init_array+0x2e>
 8001696:	bd70      	pop	{r4, r5, r6, pc}
 8001698:	f855 3b04 	ldr.w	r3, [r5], #4
 800169c:	4798      	blx	r3
 800169e:	3601      	adds	r6, #1
 80016a0:	e7ee      	b.n	8001680 <__libc_init_array+0xc>
 80016a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a6:	4798      	blx	r3
 80016a8:	3601      	adds	r6, #1
 80016aa:	e7f2      	b.n	8001692 <__libc_init_array+0x1e>
 80016ac:	08002934 	.word	0x08002934
 80016b0:	08002934 	.word	0x08002934
 80016b4:	08002934 	.word	0x08002934
 80016b8:	08002938 	.word	0x08002938

080016bc <memset>:
 80016bc:	4603      	mov	r3, r0
 80016be:	4402      	add	r2, r0
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d100      	bne.n	80016c6 <memset+0xa>
 80016c4:	4770      	bx	lr
 80016c6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ca:	e7f9      	b.n	80016c0 <memset+0x4>

080016cc <srand>:
 80016cc:	b538      	push	{r3, r4, r5, lr}
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <srand+0x44>)
 80016d0:	4604      	mov	r4, r0
 80016d2:	681d      	ldr	r5, [r3, #0]
 80016d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80016d6:	b9b3      	cbnz	r3, 8001706 <srand+0x3a>
 80016d8:	2018      	movs	r0, #24
 80016da:	f000 f893 	bl	8001804 <malloc>
 80016de:	4602      	mov	r2, r0
 80016e0:	63a8      	str	r0, [r5, #56]	; 0x38
 80016e2:	b920      	cbnz	r0, 80016ee <srand+0x22>
 80016e4:	2142      	movs	r1, #66	; 0x42
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <srand+0x48>)
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <srand+0x4c>)
 80016ea:	f000 f85b 	bl	80017a4 <__assert_func>
 80016ee:	490b      	ldr	r1, [pc, #44]	; (800171c <srand+0x50>)
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <srand+0x54>)
 80016f2:	e9c0 1300 	strd	r1, r3, [r0]
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <srand+0x58>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	6083      	str	r3, [r0, #8]
 80016fc:	230b      	movs	r3, #11
 80016fe:	8183      	strh	r3, [r0, #12]
 8001700:	2001      	movs	r0, #1
 8001702:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001706:	2200      	movs	r2, #0
 8001708:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800170a:	611c      	str	r4, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	bd38      	pop	{r3, r4, r5, pc}
 8001710:	2000002c 	.word	0x2000002c
 8001714:	080027f0 	.word	0x080027f0
 8001718:	08002807 	.word	0x08002807
 800171c:	abcd330e 	.word	0xabcd330e
 8001720:	e66d1234 	.word	0xe66d1234
 8001724:	0005deec 	.word	0x0005deec

08001728 <rand>:
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <rand+0x5c>)
 800172a:	b510      	push	{r4, lr}
 800172c:	681c      	ldr	r4, [r3, #0]
 800172e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001730:	b9b3      	cbnz	r3, 8001760 <rand+0x38>
 8001732:	2018      	movs	r0, #24
 8001734:	f000 f866 	bl	8001804 <malloc>
 8001738:	4602      	mov	r2, r0
 800173a:	63a0      	str	r0, [r4, #56]	; 0x38
 800173c:	b920      	cbnz	r0, 8001748 <rand+0x20>
 800173e:	214e      	movs	r1, #78	; 0x4e
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <rand+0x60>)
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <rand+0x64>)
 8001744:	f000 f82e 	bl	80017a4 <__assert_func>
 8001748:	4911      	ldr	r1, [pc, #68]	; (8001790 <rand+0x68>)
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <rand+0x6c>)
 800174c:	e9c0 1300 	strd	r1, r3, [r0]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <rand+0x70>)
 8001752:	2100      	movs	r1, #0
 8001754:	6083      	str	r3, [r0, #8]
 8001756:	230b      	movs	r3, #11
 8001758:	8183      	strh	r3, [r0, #12]
 800175a:	2001      	movs	r0, #1
 800175c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001760:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <rand+0x74>)
 8001764:	6920      	ldr	r0, [r4, #16]
 8001766:	6963      	ldr	r3, [r4, #20]
 8001768:	4342      	muls	r2, r0
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <rand+0x78>)
 800176c:	fb01 2203 	mla	r2, r1, r3, r2
 8001770:	fba0 0101 	umull	r0, r1, r0, r1
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	eb42 0001 	adc.w	r0, r2, r1
 800177a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800177e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001782:	bd10      	pop	{r4, pc}
 8001784:	2000002c 	.word	0x2000002c
 8001788:	080027f0 	.word	0x080027f0
 800178c:	08002807 	.word	0x08002807
 8001790:	abcd330e 	.word	0xabcd330e
 8001794:	e66d1234 	.word	0xe66d1234
 8001798:	0005deec 	.word	0x0005deec
 800179c:	5851f42d 	.word	0x5851f42d
 80017a0:	4c957f2d 	.word	0x4c957f2d

080017a4 <__assert_func>:
 80017a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017a6:	4614      	mov	r4, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <__assert_func+0x2c>)
 80017ac:	4605      	mov	r5, r0
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68d8      	ldr	r0, [r3, #12]
 80017b2:	b14c      	cbz	r4, 80017c8 <__assert_func+0x24>
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <__assert_func+0x30>)
 80017b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017ba:	9100      	str	r1, [sp, #0]
 80017bc:	462b      	mov	r3, r5
 80017be:	4906      	ldr	r1, [pc, #24]	; (80017d8 <__assert_func+0x34>)
 80017c0:	f000 f80e 	bl	80017e0 <fiprintf>
 80017c4:	f000 fcc0 	bl	8002148 <abort>
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__assert_func+0x38>)
 80017ca:	461c      	mov	r4, r3
 80017cc:	e7f3      	b.n	80017b6 <__assert_func+0x12>
 80017ce:	bf00      	nop
 80017d0:	2000002c 	.word	0x2000002c
 80017d4:	08002862 	.word	0x08002862
 80017d8:	0800286f 	.word	0x0800286f
 80017dc:	0800289d 	.word	0x0800289d

080017e0 <fiprintf>:
 80017e0:	b40e      	push	{r1, r2, r3}
 80017e2:	b503      	push	{r0, r1, lr}
 80017e4:	4601      	mov	r1, r0
 80017e6:	ab03      	add	r3, sp, #12
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <fiprintf+0x20>)
 80017ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80017ee:	6800      	ldr	r0, [r0, #0]
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	f000 f913 	bl	8001a1c <_vfiprintf_r>
 80017f6:	b002      	add	sp, #8
 80017f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80017fc:	b003      	add	sp, #12
 80017fe:	4770      	bx	lr
 8001800:	2000002c 	.word	0x2000002c

08001804 <malloc>:
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <malloc+0xc>)
 8001806:	4601      	mov	r1, r0
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	f000 b86b 	b.w	80018e4 <_malloc_r>
 800180e:	bf00      	nop
 8001810:	2000002c 	.word	0x2000002c

08001814 <_free_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4605      	mov	r5, r0
 8001818:	2900      	cmp	r1, #0
 800181a:	d040      	beq.n	800189e <_free_r+0x8a>
 800181c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001820:	1f0c      	subs	r4, r1, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfb8      	it	lt
 8001826:	18e4      	addlt	r4, r4, r3
 8001828:	f000 fec0 	bl	80025ac <__malloc_lock>
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <_free_r+0x8c>)
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	b933      	cbnz	r3, 8001840 <_free_r+0x2c>
 8001832:	6063      	str	r3, [r4, #4]
 8001834:	6014      	str	r4, [r2, #0]
 8001836:	4628      	mov	r0, r5
 8001838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800183c:	f000 bebc 	b.w	80025b8 <__malloc_unlock>
 8001840:	42a3      	cmp	r3, r4
 8001842:	d908      	bls.n	8001856 <_free_r+0x42>
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	1821      	adds	r1, r4, r0
 8001848:	428b      	cmp	r3, r1
 800184a:	bf01      	itttt	eq
 800184c:	6819      	ldreq	r1, [r3, #0]
 800184e:	685b      	ldreq	r3, [r3, #4]
 8001850:	1809      	addeq	r1, r1, r0
 8001852:	6021      	streq	r1, [r4, #0]
 8001854:	e7ed      	b.n	8001832 <_free_r+0x1e>
 8001856:	461a      	mov	r2, r3
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b10b      	cbz	r3, 8001860 <_free_r+0x4c>
 800185c:	42a3      	cmp	r3, r4
 800185e:	d9fa      	bls.n	8001856 <_free_r+0x42>
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	1850      	adds	r0, r2, r1
 8001864:	42a0      	cmp	r0, r4
 8001866:	d10b      	bne.n	8001880 <_free_r+0x6c>
 8001868:	6820      	ldr	r0, [r4, #0]
 800186a:	4401      	add	r1, r0
 800186c:	1850      	adds	r0, r2, r1
 800186e:	4283      	cmp	r3, r0
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	d1e0      	bne.n	8001836 <_free_r+0x22>
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4401      	add	r1, r0
 800187a:	6011      	str	r1, [r2, #0]
 800187c:	6053      	str	r3, [r2, #4]
 800187e:	e7da      	b.n	8001836 <_free_r+0x22>
 8001880:	d902      	bls.n	8001888 <_free_r+0x74>
 8001882:	230c      	movs	r3, #12
 8001884:	602b      	str	r3, [r5, #0]
 8001886:	e7d6      	b.n	8001836 <_free_r+0x22>
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	1821      	adds	r1, r4, r0
 800188c:	428b      	cmp	r3, r1
 800188e:	bf01      	itttt	eq
 8001890:	6819      	ldreq	r1, [r3, #0]
 8001892:	685b      	ldreq	r3, [r3, #4]
 8001894:	1809      	addeq	r1, r1, r0
 8001896:	6021      	streq	r1, [r4, #0]
 8001898:	6063      	str	r3, [r4, #4]
 800189a:	6054      	str	r4, [r2, #4]
 800189c:	e7cb      	b.n	8001836 <_free_r+0x22>
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	200000b4 	.word	0x200000b4

080018a4 <sbrk_aligned>:
 80018a4:	b570      	push	{r4, r5, r6, lr}
 80018a6:	4e0e      	ldr	r6, [pc, #56]	; (80018e0 <sbrk_aligned+0x3c>)
 80018a8:	460c      	mov	r4, r1
 80018aa:	6831      	ldr	r1, [r6, #0]
 80018ac:	4605      	mov	r5, r0
 80018ae:	b911      	cbnz	r1, 80018b6 <sbrk_aligned+0x12>
 80018b0:	f000 fb7a 	bl	8001fa8 <_sbrk_r>
 80018b4:	6030      	str	r0, [r6, #0]
 80018b6:	4621      	mov	r1, r4
 80018b8:	4628      	mov	r0, r5
 80018ba:	f000 fb75 	bl	8001fa8 <_sbrk_r>
 80018be:	1c43      	adds	r3, r0, #1
 80018c0:	d00a      	beq.n	80018d8 <sbrk_aligned+0x34>
 80018c2:	1cc4      	adds	r4, r0, #3
 80018c4:	f024 0403 	bic.w	r4, r4, #3
 80018c8:	42a0      	cmp	r0, r4
 80018ca:	d007      	beq.n	80018dc <sbrk_aligned+0x38>
 80018cc:	1a21      	subs	r1, r4, r0
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 fb6a 	bl	8001fa8 <_sbrk_r>
 80018d4:	3001      	adds	r0, #1
 80018d6:	d101      	bne.n	80018dc <sbrk_aligned+0x38>
 80018d8:	f04f 34ff 	mov.w	r4, #4294967295
 80018dc:	4620      	mov	r0, r4
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	200000b8 	.word	0x200000b8

080018e4 <_malloc_r>:
 80018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	1ccd      	adds	r5, r1, #3
 80018ea:	f025 0503 	bic.w	r5, r5, #3
 80018ee:	3508      	adds	r5, #8
 80018f0:	2d0c      	cmp	r5, #12
 80018f2:	bf38      	it	cc
 80018f4:	250c      	movcc	r5, #12
 80018f6:	2d00      	cmp	r5, #0
 80018f8:	4607      	mov	r7, r0
 80018fa:	db01      	blt.n	8001900 <_malloc_r+0x1c>
 80018fc:	42a9      	cmp	r1, r5
 80018fe:	d905      	bls.n	800190c <_malloc_r+0x28>
 8001900:	230c      	movs	r3, #12
 8001902:	2600      	movs	r6, #0
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4630      	mov	r0, r6
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800190c:	4e2e      	ldr	r6, [pc, #184]	; (80019c8 <_malloc_r+0xe4>)
 800190e:	f000 fe4d 	bl	80025ac <__malloc_lock>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	461c      	mov	r4, r3
 8001916:	bb34      	cbnz	r4, 8001966 <_malloc_r+0x82>
 8001918:	4629      	mov	r1, r5
 800191a:	4638      	mov	r0, r7
 800191c:	f7ff ffc2 	bl	80018a4 <sbrk_aligned>
 8001920:	1c43      	adds	r3, r0, #1
 8001922:	4604      	mov	r4, r0
 8001924:	d14d      	bne.n	80019c2 <_malloc_r+0xde>
 8001926:	6834      	ldr	r4, [r6, #0]
 8001928:	4626      	mov	r6, r4
 800192a:	2e00      	cmp	r6, #0
 800192c:	d140      	bne.n	80019b0 <_malloc_r+0xcc>
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	4631      	mov	r1, r6
 8001932:	4638      	mov	r0, r7
 8001934:	eb04 0803 	add.w	r8, r4, r3
 8001938:	f000 fb36 	bl	8001fa8 <_sbrk_r>
 800193c:	4580      	cmp	r8, r0
 800193e:	d13a      	bne.n	80019b6 <_malloc_r+0xd2>
 8001940:	6821      	ldr	r1, [r4, #0]
 8001942:	3503      	adds	r5, #3
 8001944:	1a6d      	subs	r5, r5, r1
 8001946:	f025 0503 	bic.w	r5, r5, #3
 800194a:	3508      	adds	r5, #8
 800194c:	2d0c      	cmp	r5, #12
 800194e:	bf38      	it	cc
 8001950:	250c      	movcc	r5, #12
 8001952:	4638      	mov	r0, r7
 8001954:	4629      	mov	r1, r5
 8001956:	f7ff ffa5 	bl	80018a4 <sbrk_aligned>
 800195a:	3001      	adds	r0, #1
 800195c:	d02b      	beq.n	80019b6 <_malloc_r+0xd2>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	442b      	add	r3, r5
 8001962:	6023      	str	r3, [r4, #0]
 8001964:	e00e      	b.n	8001984 <_malloc_r+0xa0>
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	1b52      	subs	r2, r2, r5
 800196a:	d41e      	bmi.n	80019aa <_malloc_r+0xc6>
 800196c:	2a0b      	cmp	r2, #11
 800196e:	d916      	bls.n	800199e <_malloc_r+0xba>
 8001970:	1961      	adds	r1, r4, r5
 8001972:	42a3      	cmp	r3, r4
 8001974:	6025      	str	r5, [r4, #0]
 8001976:	bf18      	it	ne
 8001978:	6059      	strne	r1, [r3, #4]
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	bf08      	it	eq
 800197e:	6031      	streq	r1, [r6, #0]
 8001980:	5162      	str	r2, [r4, r5]
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	4638      	mov	r0, r7
 8001986:	f104 060b 	add.w	r6, r4, #11
 800198a:	f000 fe15 	bl	80025b8 <__malloc_unlock>
 800198e:	f026 0607 	bic.w	r6, r6, #7
 8001992:	1d23      	adds	r3, r4, #4
 8001994:	1af2      	subs	r2, r6, r3
 8001996:	d0b6      	beq.n	8001906 <_malloc_r+0x22>
 8001998:	1b9b      	subs	r3, r3, r6
 800199a:	50a3      	str	r3, [r4, r2]
 800199c:	e7b3      	b.n	8001906 <_malloc_r+0x22>
 800199e:	6862      	ldr	r2, [r4, #4]
 80019a0:	42a3      	cmp	r3, r4
 80019a2:	bf0c      	ite	eq
 80019a4:	6032      	streq	r2, [r6, #0]
 80019a6:	605a      	strne	r2, [r3, #4]
 80019a8:	e7ec      	b.n	8001984 <_malloc_r+0xa0>
 80019aa:	4623      	mov	r3, r4
 80019ac:	6864      	ldr	r4, [r4, #4]
 80019ae:	e7b2      	b.n	8001916 <_malloc_r+0x32>
 80019b0:	4634      	mov	r4, r6
 80019b2:	6876      	ldr	r6, [r6, #4]
 80019b4:	e7b9      	b.n	800192a <_malloc_r+0x46>
 80019b6:	230c      	movs	r3, #12
 80019b8:	4638      	mov	r0, r7
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	f000 fdfc 	bl	80025b8 <__malloc_unlock>
 80019c0:	e7a1      	b.n	8001906 <_malloc_r+0x22>
 80019c2:	6025      	str	r5, [r4, #0]
 80019c4:	e7de      	b.n	8001984 <_malloc_r+0xa0>
 80019c6:	bf00      	nop
 80019c8:	200000b4 	.word	0x200000b4

080019cc <__sfputc_r>:
 80019cc:	6893      	ldr	r3, [r2, #8]
 80019ce:	b410      	push	{r4}
 80019d0:	3b01      	subs	r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	6093      	str	r3, [r2, #8]
 80019d6:	da07      	bge.n	80019e8 <__sfputc_r+0x1c>
 80019d8:	6994      	ldr	r4, [r2, #24]
 80019da:	42a3      	cmp	r3, r4
 80019dc:	db01      	blt.n	80019e2 <__sfputc_r+0x16>
 80019de:	290a      	cmp	r1, #10
 80019e0:	d102      	bne.n	80019e8 <__sfputc_r+0x1c>
 80019e2:	bc10      	pop	{r4}
 80019e4:	f000 baf0 	b.w	8001fc8 <__swbuf_r>
 80019e8:	6813      	ldr	r3, [r2, #0]
 80019ea:	1c58      	adds	r0, r3, #1
 80019ec:	6010      	str	r0, [r2, #0]
 80019ee:	7019      	strb	r1, [r3, #0]
 80019f0:	4608      	mov	r0, r1
 80019f2:	bc10      	pop	{r4}
 80019f4:	4770      	bx	lr

080019f6 <__sfputs_r>:
 80019f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f8:	4606      	mov	r6, r0
 80019fa:	460f      	mov	r7, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	18d5      	adds	r5, r2, r3
 8001a00:	42ac      	cmp	r4, r5
 8001a02:	d101      	bne.n	8001a08 <__sfputs_r+0x12>
 8001a04:	2000      	movs	r0, #0
 8001a06:	e007      	b.n	8001a18 <__sfputs_r+0x22>
 8001a08:	463a      	mov	r2, r7
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a10:	f7ff ffdc 	bl	80019cc <__sfputc_r>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d1f3      	bne.n	8001a00 <__sfputs_r+0xa>
 8001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a1c <_vfiprintf_r>:
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	460d      	mov	r5, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	4698      	mov	r8, r3
 8001a26:	4606      	mov	r6, r0
 8001a28:	b09d      	sub	sp, #116	; 0x74
 8001a2a:	b118      	cbz	r0, 8001a34 <_vfiprintf_r+0x18>
 8001a2c:	6983      	ldr	r3, [r0, #24]
 8001a2e:	b90b      	cbnz	r3, 8001a34 <_vfiprintf_r+0x18>
 8001a30:	f000 fca8 	bl	8002384 <__sinit>
 8001a34:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <_vfiprintf_r+0x240>)
 8001a36:	429d      	cmp	r5, r3
 8001a38:	d11b      	bne.n	8001a72 <_vfiprintf_r+0x56>
 8001a3a:	6875      	ldr	r5, [r6, #4]
 8001a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a3e:	07d9      	lsls	r1, r3, #31
 8001a40:	d405      	bmi.n	8001a4e <_vfiprintf_r+0x32>
 8001a42:	89ab      	ldrh	r3, [r5, #12]
 8001a44:	059a      	lsls	r2, r3, #22
 8001a46:	d402      	bmi.n	8001a4e <_vfiprintf_r+0x32>
 8001a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a4a:	f000 fd39 	bl	80024c0 <__retarget_lock_acquire_recursive>
 8001a4e:	89ab      	ldrh	r3, [r5, #12]
 8001a50:	071b      	lsls	r3, r3, #28
 8001a52:	d501      	bpl.n	8001a58 <_vfiprintf_r+0x3c>
 8001a54:	692b      	ldr	r3, [r5, #16]
 8001a56:	b9eb      	cbnz	r3, 8001a94 <_vfiprintf_r+0x78>
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f000 fb06 	bl	800206c <__swsetup_r>
 8001a60:	b1c0      	cbz	r0, 8001a94 <_vfiprintf_r+0x78>
 8001a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	d50e      	bpl.n	8001a86 <_vfiprintf_r+0x6a>
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	b01d      	add	sp, #116	; 0x74
 8001a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a72:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <_vfiprintf_r+0x244>)
 8001a74:	429d      	cmp	r5, r3
 8001a76:	d101      	bne.n	8001a7c <_vfiprintf_r+0x60>
 8001a78:	68b5      	ldr	r5, [r6, #8]
 8001a7a:	e7df      	b.n	8001a3c <_vfiprintf_r+0x20>
 8001a7c:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <_vfiprintf_r+0x248>)
 8001a7e:	429d      	cmp	r5, r3
 8001a80:	bf08      	it	eq
 8001a82:	68f5      	ldreq	r5, [r6, #12]
 8001a84:	e7da      	b.n	8001a3c <_vfiprintf_r+0x20>
 8001a86:	89ab      	ldrh	r3, [r5, #12]
 8001a88:	0598      	lsls	r0, r3, #22
 8001a8a:	d4ed      	bmi.n	8001a68 <_vfiprintf_r+0x4c>
 8001a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a8e:	f000 fd18 	bl	80024c2 <__retarget_lock_release_recursive>
 8001a92:	e7e9      	b.n	8001a68 <_vfiprintf_r+0x4c>
 8001a94:	2300      	movs	r3, #0
 8001a96:	9309      	str	r3, [sp, #36]	; 0x24
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a9e:	2330      	movs	r3, #48	; 0x30
 8001aa0:	f04f 0901 	mov.w	r9, #1
 8001aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001aa8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001c68 <_vfiprintf_r+0x24c>
 8001aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	469a      	mov	sl, r3
 8001ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ab8:	b10a      	cbz	r2, 8001abe <_vfiprintf_r+0xa2>
 8001aba:	2a25      	cmp	r2, #37	; 0x25
 8001abc:	d1f9      	bne.n	8001ab2 <_vfiprintf_r+0x96>
 8001abe:	ebba 0b04 	subs.w	fp, sl, r4
 8001ac2:	d00b      	beq.n	8001adc <_vfiprintf_r+0xc0>
 8001ac4:	465b      	mov	r3, fp
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4630      	mov	r0, r6
 8001acc:	f7ff ff93 	bl	80019f6 <__sfputs_r>
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	f000 80aa 	beq.w	8001c2a <_vfiprintf_r+0x20e>
 8001ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ad8:	445a      	add	r2, fp
 8001ada:	9209      	str	r2, [sp, #36]	; 0x24
 8001adc:	f89a 3000 	ldrb.w	r3, [sl]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a2 	beq.w	8001c2a <_vfiprintf_r+0x20e>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001af0:	f10a 0a01 	add.w	sl, sl, #1
 8001af4:	9304      	str	r3, [sp, #16]
 8001af6:	9307      	str	r3, [sp, #28]
 8001af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001afc:	931a      	str	r3, [sp, #104]	; 0x68
 8001afe:	4654      	mov	r4, sl
 8001b00:	2205      	movs	r2, #5
 8001b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b06:	4858      	ldr	r0, [pc, #352]	; (8001c68 <_vfiprintf_r+0x24c>)
 8001b08:	f000 fd42 	bl	8002590 <memchr>
 8001b0c:	9a04      	ldr	r2, [sp, #16]
 8001b0e:	b9d8      	cbnz	r0, 8001b48 <_vfiprintf_r+0x12c>
 8001b10:	06d1      	lsls	r1, r2, #27
 8001b12:	bf44      	itt	mi
 8001b14:	2320      	movmi	r3, #32
 8001b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b1a:	0713      	lsls	r3, r2, #28
 8001b1c:	bf44      	itt	mi
 8001b1e:	232b      	movmi	r3, #43	; 0x2b
 8001b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b24:	f89a 3000 	ldrb.w	r3, [sl]
 8001b28:	2b2a      	cmp	r3, #42	; 0x2a
 8001b2a:	d015      	beq.n	8001b58 <_vfiprintf_r+0x13c>
 8001b2c:	4654      	mov	r4, sl
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f04f 0c0a 	mov.w	ip, #10
 8001b34:	9a07      	ldr	r2, [sp, #28]
 8001b36:	4621      	mov	r1, r4
 8001b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b3c:	3b30      	subs	r3, #48	; 0x30
 8001b3e:	2b09      	cmp	r3, #9
 8001b40:	d94e      	bls.n	8001be0 <_vfiprintf_r+0x1c4>
 8001b42:	b1b0      	cbz	r0, 8001b72 <_vfiprintf_r+0x156>
 8001b44:	9207      	str	r2, [sp, #28]
 8001b46:	e014      	b.n	8001b72 <_vfiprintf_r+0x156>
 8001b48:	eba0 0308 	sub.w	r3, r0, r8
 8001b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	46a2      	mov	sl, r4
 8001b54:	9304      	str	r3, [sp, #16]
 8001b56:	e7d2      	b.n	8001afe <_vfiprintf_r+0xe2>
 8001b58:	9b03      	ldr	r3, [sp, #12]
 8001b5a:	1d19      	adds	r1, r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	9103      	str	r1, [sp, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bfbb      	ittet	lt
 8001b64:	425b      	neglt	r3, r3
 8001b66:	f042 0202 	orrlt.w	r2, r2, #2
 8001b6a:	9307      	strge	r3, [sp, #28]
 8001b6c:	9307      	strlt	r3, [sp, #28]
 8001b6e:	bfb8      	it	lt
 8001b70:	9204      	strlt	r2, [sp, #16]
 8001b72:	7823      	ldrb	r3, [r4, #0]
 8001b74:	2b2e      	cmp	r3, #46	; 0x2e
 8001b76:	d10c      	bne.n	8001b92 <_vfiprintf_r+0x176>
 8001b78:	7863      	ldrb	r3, [r4, #1]
 8001b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b7c:	d135      	bne.n	8001bea <_vfiprintf_r+0x1ce>
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	3402      	adds	r4, #2
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	9203      	str	r2, [sp, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bfb8      	it	lt
 8001b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b90:	9305      	str	r3, [sp, #20]
 8001b92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001c6c <_vfiprintf_r+0x250>
 8001b96:	2203      	movs	r2, #3
 8001b98:	4650      	mov	r0, sl
 8001b9a:	7821      	ldrb	r1, [r4, #0]
 8001b9c:	f000 fcf8 	bl	8002590 <memchr>
 8001ba0:	b140      	cbz	r0, 8001bb4 <_vfiprintf_r+0x198>
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	eba0 000a 	sub.w	r0, r0, sl
 8001ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8001bac:	9b04      	ldr	r3, [sp, #16]
 8001bae:	3401      	adds	r4, #1
 8001bb0:	4303      	orrs	r3, r0
 8001bb2:	9304      	str	r3, [sp, #16]
 8001bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb8:	2206      	movs	r2, #6
 8001bba:	482d      	ldr	r0, [pc, #180]	; (8001c70 <_vfiprintf_r+0x254>)
 8001bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bc0:	f000 fce6 	bl	8002590 <memchr>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d03f      	beq.n	8001c48 <_vfiprintf_r+0x22c>
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <_vfiprintf_r+0x258>)
 8001bca:	bb1b      	cbnz	r3, 8001c14 <_vfiprintf_r+0x1f8>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	f023 0307 	bic.w	r3, r3, #7
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bda:	443b      	add	r3, r7
 8001bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bde:	e767      	b.n	8001ab0 <_vfiprintf_r+0x94>
 8001be0:	460c      	mov	r4, r1
 8001be2:	2001      	movs	r0, #1
 8001be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001be8:	e7a5      	b.n	8001b36 <_vfiprintf_r+0x11a>
 8001bea:	2300      	movs	r3, #0
 8001bec:	f04f 0c0a 	mov.w	ip, #10
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	3401      	adds	r4, #1
 8001bf4:	9305      	str	r3, [sp, #20]
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bfc:	3a30      	subs	r2, #48	; 0x30
 8001bfe:	2a09      	cmp	r2, #9
 8001c00:	d903      	bls.n	8001c0a <_vfiprintf_r+0x1ee>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0c5      	beq.n	8001b92 <_vfiprintf_r+0x176>
 8001c06:	9105      	str	r1, [sp, #20]
 8001c08:	e7c3      	b.n	8001b92 <_vfiprintf_r+0x176>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c12:	e7f0      	b.n	8001bf6 <_vfiprintf_r+0x1da>
 8001c14:	ab03      	add	r3, sp, #12
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <_vfiprintf_r+0x25c>)
 8001c1e:	a904      	add	r1, sp, #16
 8001c20:	f3af 8000 	nop.w
 8001c24:	4607      	mov	r7, r0
 8001c26:	1c78      	adds	r0, r7, #1
 8001c28:	d1d6      	bne.n	8001bd8 <_vfiprintf_r+0x1bc>
 8001c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c2c:	07d9      	lsls	r1, r3, #31
 8001c2e:	d405      	bmi.n	8001c3c <_vfiprintf_r+0x220>
 8001c30:	89ab      	ldrh	r3, [r5, #12]
 8001c32:	059a      	lsls	r2, r3, #22
 8001c34:	d402      	bmi.n	8001c3c <_vfiprintf_r+0x220>
 8001c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c38:	f000 fc43 	bl	80024c2 <__retarget_lock_release_recursive>
 8001c3c:	89ab      	ldrh	r3, [r5, #12]
 8001c3e:	065b      	lsls	r3, r3, #25
 8001c40:	f53f af12 	bmi.w	8001a68 <_vfiprintf_r+0x4c>
 8001c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c46:	e711      	b.n	8001a6c <_vfiprintf_r+0x50>
 8001c48:	ab03      	add	r3, sp, #12
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	4630      	mov	r0, r6
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <_vfiprintf_r+0x25c>)
 8001c52:	a904      	add	r1, sp, #16
 8001c54:	f000 f882 	bl	8001d5c <_printf_i>
 8001c58:	e7e4      	b.n	8001c24 <_vfiprintf_r+0x208>
 8001c5a:	bf00      	nop
 8001c5c:	080028f4 	.word	0x080028f4
 8001c60:	08002914 	.word	0x08002914
 8001c64:	080028d4 	.word	0x080028d4
 8001c68:	0800289e 	.word	0x0800289e
 8001c6c:	080028a4 	.word	0x080028a4
 8001c70:	080028a8 	.word	0x080028a8
 8001c74:	00000000 	.word	0x00000000
 8001c78:	080019f7 	.word	0x080019f7

08001c7c <_printf_common>:
 8001c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	4616      	mov	r6, r2
 8001c82:	4699      	mov	r9, r3
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	690b      	ldr	r3, [r1, #16]
 8001c88:	4607      	mov	r7, r0
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfb8      	it	lt
 8001c8e:	4613      	movlt	r3, r2
 8001c90:	6033      	str	r3, [r6, #0]
 8001c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c96:	460c      	mov	r4, r1
 8001c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c9c:	b10a      	cbz	r2, 8001ca2 <_printf_common+0x26>
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	0699      	lsls	r1, r3, #26
 8001ca6:	bf42      	ittt	mi
 8001ca8:	6833      	ldrmi	r3, [r6, #0]
 8001caa:	3302      	addmi	r3, #2
 8001cac:	6033      	strmi	r3, [r6, #0]
 8001cae:	6825      	ldr	r5, [r4, #0]
 8001cb0:	f015 0506 	ands.w	r5, r5, #6
 8001cb4:	d106      	bne.n	8001cc4 <_printf_common+0x48>
 8001cb6:	f104 0a19 	add.w	sl, r4, #25
 8001cba:	68e3      	ldr	r3, [r4, #12]
 8001cbc:	6832      	ldr	r2, [r6, #0]
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	dc28      	bgt.n	8001d16 <_printf_common+0x9a>
 8001cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cc8:	1e13      	subs	r3, r2, #0
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	bf18      	it	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	0692      	lsls	r2, r2, #26
 8001cd2:	d42d      	bmi.n	8001d30 <_printf_common+0xb4>
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cdc:	47c0      	blx	r8
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d020      	beq.n	8001d24 <_printf_common+0xa8>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	68e5      	ldr	r5, [r4, #12]
 8001ce6:	f003 0306 	and.w	r3, r3, #6
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf18      	it	ne
 8001cee:	2500      	movne	r5, #0
 8001cf0:	6832      	ldr	r2, [r6, #0]
 8001cf2:	f04f 0600 	mov.w	r6, #0
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	bf08      	it	eq
 8001cfa:	1aad      	subeq	r5, r5, r2
 8001cfc:	6922      	ldr	r2, [r4, #16]
 8001cfe:	bf08      	it	eq
 8001d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bfc4      	itt	gt
 8001d08:	1a9b      	subgt	r3, r3, r2
 8001d0a:	18ed      	addgt	r5, r5, r3
 8001d0c:	341a      	adds	r4, #26
 8001d0e:	42b5      	cmp	r5, r6
 8001d10:	d11a      	bne.n	8001d48 <_printf_common+0xcc>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e008      	b.n	8001d28 <_printf_common+0xac>
 8001d16:	2301      	movs	r3, #1
 8001d18:	4652      	mov	r2, sl
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	47c0      	blx	r8
 8001d20:	3001      	adds	r0, #1
 8001d22:	d103      	bne.n	8001d2c <_printf_common+0xb0>
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	3501      	adds	r5, #1
 8001d2e:	e7c4      	b.n	8001cba <_printf_common+0x3e>
 8001d30:	2030      	movs	r0, #48	; 0x30
 8001d32:	18e1      	adds	r1, r4, r3
 8001d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d3e:	4422      	add	r2, r4
 8001d40:	3302      	adds	r3, #2
 8001d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d46:	e7c5      	b.n	8001cd4 <_printf_common+0x58>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4638      	mov	r0, r7
 8001d50:	47c0      	blx	r8
 8001d52:	3001      	adds	r0, #1
 8001d54:	d0e6      	beq.n	8001d24 <_printf_common+0xa8>
 8001d56:	3601      	adds	r6, #1
 8001d58:	e7d9      	b.n	8001d0e <_printf_common+0x92>
	...

08001d5c <_printf_i>:
 8001d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d60:	7e0f      	ldrb	r7, [r1, #24]
 8001d62:	4691      	mov	r9, r2
 8001d64:	2f78      	cmp	r7, #120	; 0x78
 8001d66:	4680      	mov	r8, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	469a      	mov	sl, r3
 8001d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d72:	d807      	bhi.n	8001d84 <_printf_i+0x28>
 8001d74:	2f62      	cmp	r7, #98	; 0x62
 8001d76:	d80a      	bhi.n	8001d8e <_printf_i+0x32>
 8001d78:	2f00      	cmp	r7, #0
 8001d7a:	f000 80d9 	beq.w	8001f30 <_printf_i+0x1d4>
 8001d7e:	2f58      	cmp	r7, #88	; 0x58
 8001d80:	f000 80a4 	beq.w	8001ecc <_printf_i+0x170>
 8001d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d8c:	e03a      	b.n	8001e04 <_printf_i+0xa8>
 8001d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d92:	2b15      	cmp	r3, #21
 8001d94:	d8f6      	bhi.n	8001d84 <_printf_i+0x28>
 8001d96:	a101      	add	r1, pc, #4	; (adr r1, 8001d9c <_printf_i+0x40>)
 8001d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d9c:	08001df5 	.word	0x08001df5
 8001da0:	08001e09 	.word	0x08001e09
 8001da4:	08001d85 	.word	0x08001d85
 8001da8:	08001d85 	.word	0x08001d85
 8001dac:	08001d85 	.word	0x08001d85
 8001db0:	08001d85 	.word	0x08001d85
 8001db4:	08001e09 	.word	0x08001e09
 8001db8:	08001d85 	.word	0x08001d85
 8001dbc:	08001d85 	.word	0x08001d85
 8001dc0:	08001d85 	.word	0x08001d85
 8001dc4:	08001d85 	.word	0x08001d85
 8001dc8:	08001f17 	.word	0x08001f17
 8001dcc:	08001e39 	.word	0x08001e39
 8001dd0:	08001ef9 	.word	0x08001ef9
 8001dd4:	08001d85 	.word	0x08001d85
 8001dd8:	08001d85 	.word	0x08001d85
 8001ddc:	08001f39 	.word	0x08001f39
 8001de0:	08001d85 	.word	0x08001d85
 8001de4:	08001e39 	.word	0x08001e39
 8001de8:	08001d85 	.word	0x08001d85
 8001dec:	08001d85 	.word	0x08001d85
 8001df0:	08001f01 	.word	0x08001f01
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	602a      	str	r2, [r5, #0]
 8001dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0a4      	b.n	8001f52 <_printf_i+0x1f6>
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	6829      	ldr	r1, [r5, #0]
 8001e0c:	0606      	lsls	r6, r0, #24
 8001e0e:	f101 0304 	add.w	r3, r1, #4
 8001e12:	d50a      	bpl.n	8001e2a <_printf_i+0xce>
 8001e14:	680e      	ldr	r6, [r1, #0]
 8001e16:	602b      	str	r3, [r5, #0]
 8001e18:	2e00      	cmp	r6, #0
 8001e1a:	da03      	bge.n	8001e24 <_printf_i+0xc8>
 8001e1c:	232d      	movs	r3, #45	; 0x2d
 8001e1e:	4276      	negs	r6, r6
 8001e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e24:	230a      	movs	r3, #10
 8001e26:	485e      	ldr	r0, [pc, #376]	; (8001fa0 <_printf_i+0x244>)
 8001e28:	e019      	b.n	8001e5e <_printf_i+0x102>
 8001e2a:	680e      	ldr	r6, [r1, #0]
 8001e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	bf18      	it	ne
 8001e34:	b236      	sxthne	r6, r6
 8001e36:	e7ef      	b.n	8001e18 <_printf_i+0xbc>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	1d19      	adds	r1, r3, #4
 8001e3e:	6029      	str	r1, [r5, #0]
 8001e40:	0601      	lsls	r1, r0, #24
 8001e42:	d501      	bpl.n	8001e48 <_printf_i+0xec>
 8001e44:	681e      	ldr	r6, [r3, #0]
 8001e46:	e002      	b.n	8001e4e <_printf_i+0xf2>
 8001e48:	0646      	lsls	r6, r0, #25
 8001e4a:	d5fb      	bpl.n	8001e44 <_printf_i+0xe8>
 8001e4c:	881e      	ldrh	r6, [r3, #0]
 8001e4e:	2f6f      	cmp	r7, #111	; 0x6f
 8001e50:	bf0c      	ite	eq
 8001e52:	2308      	moveq	r3, #8
 8001e54:	230a      	movne	r3, #10
 8001e56:	4852      	ldr	r0, [pc, #328]	; (8001fa0 <_printf_i+0x244>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e5e:	6865      	ldr	r5, [r4, #4]
 8001e60:	2d00      	cmp	r5, #0
 8001e62:	bfa8      	it	ge
 8001e64:	6821      	ldrge	r1, [r4, #0]
 8001e66:	60a5      	str	r5, [r4, #8]
 8001e68:	bfa4      	itt	ge
 8001e6a:	f021 0104 	bicge.w	r1, r1, #4
 8001e6e:	6021      	strge	r1, [r4, #0]
 8001e70:	b90e      	cbnz	r6, 8001e76 <_printf_i+0x11a>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d04d      	beq.n	8001f12 <_printf_i+0x1b6>
 8001e76:	4615      	mov	r5, r2
 8001e78:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e7c:	fb03 6711 	mls	r7, r3, r1, r6
 8001e80:	5dc7      	ldrb	r7, [r0, r7]
 8001e82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e86:	4637      	mov	r7, r6
 8001e88:	42bb      	cmp	r3, r7
 8001e8a:	460e      	mov	r6, r1
 8001e8c:	d9f4      	bls.n	8001e78 <_printf_i+0x11c>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d10b      	bne.n	8001eaa <_printf_i+0x14e>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	07de      	lsls	r6, r3, #31
 8001e96:	d508      	bpl.n	8001eaa <_printf_i+0x14e>
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	6861      	ldr	r1, [r4, #4]
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	bfde      	ittt	le
 8001ea0:	2330      	movle	r3, #48	; 0x30
 8001ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001eaa:	1b52      	subs	r2, r2, r5
 8001eac:	6122      	str	r2, [r4, #16]
 8001eae:	464b      	mov	r3, r9
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f8cd a000 	str.w	sl, [sp]
 8001eb8:	aa03      	add	r2, sp, #12
 8001eba:	f7ff fedf 	bl	8001c7c <_printf_common>
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	d14c      	bne.n	8001f5c <_printf_i+0x200>
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	b004      	add	sp, #16
 8001ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ecc:	4834      	ldr	r0, [pc, #208]	; (8001fa0 <_printf_i+0x244>)
 8001ece:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ed2:	6829      	ldr	r1, [r5, #0]
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f851 6b04 	ldr.w	r6, [r1], #4
 8001eda:	6029      	str	r1, [r5, #0]
 8001edc:	061d      	lsls	r5, r3, #24
 8001ede:	d514      	bpl.n	8001f0a <_printf_i+0x1ae>
 8001ee0:	07df      	lsls	r7, r3, #31
 8001ee2:	bf44      	itt	mi
 8001ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ee8:	6023      	strmi	r3, [r4, #0]
 8001eea:	b91e      	cbnz	r6, 8001ef4 <_printf_i+0x198>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f023 0320 	bic.w	r3, r3, #32
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	e7af      	b.n	8001e58 <_printf_i+0xfc>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6023      	str	r3, [r4, #0]
 8001f00:	2378      	movs	r3, #120	; 0x78
 8001f02:	4828      	ldr	r0, [pc, #160]	; (8001fa4 <_printf_i+0x248>)
 8001f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f08:	e7e3      	b.n	8001ed2 <_printf_i+0x176>
 8001f0a:	0659      	lsls	r1, r3, #25
 8001f0c:	bf48      	it	mi
 8001f0e:	b2b6      	uxthmi	r6, r6
 8001f10:	e7e6      	b.n	8001ee0 <_printf_i+0x184>
 8001f12:	4615      	mov	r5, r2
 8001f14:	e7bb      	b.n	8001e8e <_printf_i+0x132>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	6826      	ldr	r6, [r4, #0]
 8001f1a:	1d18      	adds	r0, r3, #4
 8001f1c:	6961      	ldr	r1, [r4, #20]
 8001f1e:	6028      	str	r0, [r5, #0]
 8001f20:	0635      	lsls	r5, r6, #24
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	d501      	bpl.n	8001f2a <_printf_i+0x1ce>
 8001f26:	6019      	str	r1, [r3, #0]
 8001f28:	e002      	b.n	8001f30 <_printf_i+0x1d4>
 8001f2a:	0670      	lsls	r0, r6, #25
 8001f2c:	d5fb      	bpl.n	8001f26 <_printf_i+0x1ca>
 8001f2e:	8019      	strh	r1, [r3, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	4615      	mov	r5, r2
 8001f34:	6123      	str	r3, [r4, #16]
 8001f36:	e7ba      	b.n	8001eae <_printf_i+0x152>
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	1d1a      	adds	r2, r3, #4
 8001f3e:	602a      	str	r2, [r5, #0]
 8001f40:	681d      	ldr	r5, [r3, #0]
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	4628      	mov	r0, r5
 8001f46:	f000 fb23 	bl	8002590 <memchr>
 8001f4a:	b108      	cbz	r0, 8001f50 <_printf_i+0x1f4>
 8001f4c:	1b40      	subs	r0, r0, r5
 8001f4e:	6060      	str	r0, [r4, #4]
 8001f50:	6863      	ldr	r3, [r4, #4]
 8001f52:	6123      	str	r3, [r4, #16]
 8001f54:	2300      	movs	r3, #0
 8001f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f5a:	e7a8      	b.n	8001eae <_printf_i+0x152>
 8001f5c:	462a      	mov	r2, r5
 8001f5e:	4649      	mov	r1, r9
 8001f60:	4640      	mov	r0, r8
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	47d0      	blx	sl
 8001f66:	3001      	adds	r0, #1
 8001f68:	d0ab      	beq.n	8001ec2 <_printf_i+0x166>
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	079b      	lsls	r3, r3, #30
 8001f6e:	d413      	bmi.n	8001f98 <_printf_i+0x23c>
 8001f70:	68e0      	ldr	r0, [r4, #12]
 8001f72:	9b03      	ldr	r3, [sp, #12]
 8001f74:	4298      	cmp	r0, r3
 8001f76:	bfb8      	it	lt
 8001f78:	4618      	movlt	r0, r3
 8001f7a:	e7a4      	b.n	8001ec6 <_printf_i+0x16a>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4632      	mov	r2, r6
 8001f80:	4649      	mov	r1, r9
 8001f82:	4640      	mov	r0, r8
 8001f84:	47d0      	blx	sl
 8001f86:	3001      	adds	r0, #1
 8001f88:	d09b      	beq.n	8001ec2 <_printf_i+0x166>
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	68e3      	ldr	r3, [r4, #12]
 8001f8e:	9903      	ldr	r1, [sp, #12]
 8001f90:	1a5b      	subs	r3, r3, r1
 8001f92:	42ab      	cmp	r3, r5
 8001f94:	dcf2      	bgt.n	8001f7c <_printf_i+0x220>
 8001f96:	e7eb      	b.n	8001f70 <_printf_i+0x214>
 8001f98:	2500      	movs	r5, #0
 8001f9a:	f104 0619 	add.w	r6, r4, #25
 8001f9e:	e7f5      	b.n	8001f8c <_printf_i+0x230>
 8001fa0:	080028af 	.word	0x080028af
 8001fa4:	080028c0 	.word	0x080028c0

08001fa8 <_sbrk_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	2300      	movs	r3, #0
 8001fac:	4d05      	ldr	r5, [pc, #20]	; (8001fc4 <_sbrk_r+0x1c>)
 8001fae:	4604      	mov	r4, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	f7fe fc10 	bl	80007d8 <_sbrk>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_sbrk_r+0x1a>
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_sbrk_r+0x1a>
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	200000c0 	.word	0x200000c0

08001fc8 <__swbuf_r>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	460e      	mov	r6, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	4605      	mov	r5, r0
 8001fd0:	b118      	cbz	r0, 8001fda <__swbuf_r+0x12>
 8001fd2:	6983      	ldr	r3, [r0, #24]
 8001fd4:	b90b      	cbnz	r3, 8001fda <__swbuf_r+0x12>
 8001fd6:	f000 f9d5 	bl	8002384 <__sinit>
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <__swbuf_r+0x98>)
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	d12b      	bne.n	8002038 <__swbuf_r+0x70>
 8001fe0:	686c      	ldr	r4, [r5, #4]
 8001fe2:	69a3      	ldr	r3, [r4, #24]
 8001fe4:	60a3      	str	r3, [r4, #8]
 8001fe6:	89a3      	ldrh	r3, [r4, #12]
 8001fe8:	071a      	lsls	r2, r3, #28
 8001fea:	d52f      	bpl.n	800204c <__swbuf_r+0x84>
 8001fec:	6923      	ldr	r3, [r4, #16]
 8001fee:	b36b      	cbz	r3, 800204c <__swbuf_r+0x84>
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	b2f6      	uxtb	r6, r6
 8001ff6:	1ac0      	subs	r0, r0, r3
 8001ff8:	6963      	ldr	r3, [r4, #20]
 8001ffa:	4637      	mov	r7, r6
 8001ffc:	4283      	cmp	r3, r0
 8001ffe:	dc04      	bgt.n	800200a <__swbuf_r+0x42>
 8002000:	4621      	mov	r1, r4
 8002002:	4628      	mov	r0, r5
 8002004:	f000 f92a 	bl	800225c <_fflush_r>
 8002008:	bb30      	cbnz	r0, 8002058 <__swbuf_r+0x90>
 800200a:	68a3      	ldr	r3, [r4, #8]
 800200c:	3001      	adds	r0, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	60a3      	str	r3, [r4, #8]
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	6022      	str	r2, [r4, #0]
 8002018:	701e      	strb	r6, [r3, #0]
 800201a:	6963      	ldr	r3, [r4, #20]
 800201c:	4283      	cmp	r3, r0
 800201e:	d004      	beq.n	800202a <__swbuf_r+0x62>
 8002020:	89a3      	ldrh	r3, [r4, #12]
 8002022:	07db      	lsls	r3, r3, #31
 8002024:	d506      	bpl.n	8002034 <__swbuf_r+0x6c>
 8002026:	2e0a      	cmp	r6, #10
 8002028:	d104      	bne.n	8002034 <__swbuf_r+0x6c>
 800202a:	4621      	mov	r1, r4
 800202c:	4628      	mov	r0, r5
 800202e:	f000 f915 	bl	800225c <_fflush_r>
 8002032:	b988      	cbnz	r0, 8002058 <__swbuf_r+0x90>
 8002034:	4638      	mov	r0, r7
 8002036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <__swbuf_r+0x9c>)
 800203a:	429c      	cmp	r4, r3
 800203c:	d101      	bne.n	8002042 <__swbuf_r+0x7a>
 800203e:	68ac      	ldr	r4, [r5, #8]
 8002040:	e7cf      	b.n	8001fe2 <__swbuf_r+0x1a>
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <__swbuf_r+0xa0>)
 8002044:	429c      	cmp	r4, r3
 8002046:	bf08      	it	eq
 8002048:	68ec      	ldreq	r4, [r5, #12]
 800204a:	e7ca      	b.n	8001fe2 <__swbuf_r+0x1a>
 800204c:	4621      	mov	r1, r4
 800204e:	4628      	mov	r0, r5
 8002050:	f000 f80c 	bl	800206c <__swsetup_r>
 8002054:	2800      	cmp	r0, #0
 8002056:	d0cb      	beq.n	8001ff0 <__swbuf_r+0x28>
 8002058:	f04f 37ff 	mov.w	r7, #4294967295
 800205c:	e7ea      	b.n	8002034 <__swbuf_r+0x6c>
 800205e:	bf00      	nop
 8002060:	080028f4 	.word	0x080028f4
 8002064:	08002914 	.word	0x08002914
 8002068:	080028d4 	.word	0x080028d4

0800206c <__swsetup_r>:
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <__swsetup_r+0xcc>)
 800206e:	b570      	push	{r4, r5, r6, lr}
 8002070:	681d      	ldr	r5, [r3, #0]
 8002072:	4606      	mov	r6, r0
 8002074:	460c      	mov	r4, r1
 8002076:	b125      	cbz	r5, 8002082 <__swsetup_r+0x16>
 8002078:	69ab      	ldr	r3, [r5, #24]
 800207a:	b913      	cbnz	r3, 8002082 <__swsetup_r+0x16>
 800207c:	4628      	mov	r0, r5
 800207e:	f000 f981 	bl	8002384 <__sinit>
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <__swsetup_r+0xd0>)
 8002084:	429c      	cmp	r4, r3
 8002086:	d10f      	bne.n	80020a8 <__swsetup_r+0x3c>
 8002088:	686c      	ldr	r4, [r5, #4]
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002090:	0719      	lsls	r1, r3, #28
 8002092:	d42c      	bmi.n	80020ee <__swsetup_r+0x82>
 8002094:	06dd      	lsls	r5, r3, #27
 8002096:	d411      	bmi.n	80020bc <__swsetup_r+0x50>
 8002098:	2309      	movs	r3, #9
 800209a:	6033      	str	r3, [r6, #0]
 800209c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	81a3      	strh	r3, [r4, #12]
 80020a6:	e03e      	b.n	8002126 <__swsetup_r+0xba>
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <__swsetup_r+0xd4>)
 80020aa:	429c      	cmp	r4, r3
 80020ac:	d101      	bne.n	80020b2 <__swsetup_r+0x46>
 80020ae:	68ac      	ldr	r4, [r5, #8]
 80020b0:	e7eb      	b.n	800208a <__swsetup_r+0x1e>
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <__swsetup_r+0xd8>)
 80020b4:	429c      	cmp	r4, r3
 80020b6:	bf08      	it	eq
 80020b8:	68ec      	ldreq	r4, [r5, #12]
 80020ba:	e7e6      	b.n	800208a <__swsetup_r+0x1e>
 80020bc:	0758      	lsls	r0, r3, #29
 80020be:	d512      	bpl.n	80020e6 <__swsetup_r+0x7a>
 80020c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020c2:	b141      	cbz	r1, 80020d6 <__swsetup_r+0x6a>
 80020c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020c8:	4299      	cmp	r1, r3
 80020ca:	d002      	beq.n	80020d2 <__swsetup_r+0x66>
 80020cc:	4630      	mov	r0, r6
 80020ce:	f7ff fba1 	bl	8001814 <_free_r>
 80020d2:	2300      	movs	r3, #0
 80020d4:	6363      	str	r3, [r4, #52]	; 0x34
 80020d6:	89a3      	ldrh	r3, [r4, #12]
 80020d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020dc:	81a3      	strh	r3, [r4, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	6063      	str	r3, [r4, #4]
 80020e2:	6923      	ldr	r3, [r4, #16]
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	81a3      	strh	r3, [r4, #12]
 80020ee:	6923      	ldr	r3, [r4, #16]
 80020f0:	b94b      	cbnz	r3, 8002106 <__swsetup_r+0x9a>
 80020f2:	89a3      	ldrh	r3, [r4, #12]
 80020f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d003      	beq.n	8002106 <__swsetup_r+0x9a>
 80020fe:	4621      	mov	r1, r4
 8002100:	4630      	mov	r0, r6
 8002102:	f000 fa05 	bl	8002510 <__smakebuf_r>
 8002106:	89a0      	ldrh	r0, [r4, #12]
 8002108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800210c:	f010 0301 	ands.w	r3, r0, #1
 8002110:	d00a      	beq.n	8002128 <__swsetup_r+0xbc>
 8002112:	2300      	movs	r3, #0
 8002114:	60a3      	str	r3, [r4, #8]
 8002116:	6963      	ldr	r3, [r4, #20]
 8002118:	425b      	negs	r3, r3
 800211a:	61a3      	str	r3, [r4, #24]
 800211c:	6923      	ldr	r3, [r4, #16]
 800211e:	b943      	cbnz	r3, 8002132 <__swsetup_r+0xc6>
 8002120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002124:	d1ba      	bne.n	800209c <__swsetup_r+0x30>
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	0781      	lsls	r1, r0, #30
 800212a:	bf58      	it	pl
 800212c:	6963      	ldrpl	r3, [r4, #20]
 800212e:	60a3      	str	r3, [r4, #8]
 8002130:	e7f4      	b.n	800211c <__swsetup_r+0xb0>
 8002132:	2000      	movs	r0, #0
 8002134:	e7f7      	b.n	8002126 <__swsetup_r+0xba>
 8002136:	bf00      	nop
 8002138:	2000002c 	.word	0x2000002c
 800213c:	080028f4 	.word	0x080028f4
 8002140:	08002914 	.word	0x08002914
 8002144:	080028d4 	.word	0x080028d4

08002148 <abort>:
 8002148:	2006      	movs	r0, #6
 800214a:	b508      	push	{r3, lr}
 800214c:	f000 fa62 	bl	8002614 <raise>
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe facd 	bl	80006f0 <_exit>
	...

08002158 <__sflush_r>:
 8002158:	898a      	ldrh	r2, [r1, #12]
 800215a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215c:	4605      	mov	r5, r0
 800215e:	0710      	lsls	r0, r2, #28
 8002160:	460c      	mov	r4, r1
 8002162:	d457      	bmi.n	8002214 <__sflush_r+0xbc>
 8002164:	684b      	ldr	r3, [r1, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	dc04      	bgt.n	8002174 <__sflush_r+0x1c>
 800216a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	dc01      	bgt.n	8002174 <__sflush_r+0x1c>
 8002170:	2000      	movs	r0, #0
 8002172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002176:	2e00      	cmp	r6, #0
 8002178:	d0fa      	beq.n	8002170 <__sflush_r+0x18>
 800217a:	2300      	movs	r3, #0
 800217c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002180:	682f      	ldr	r7, [r5, #0]
 8002182:	602b      	str	r3, [r5, #0]
 8002184:	d032      	beq.n	80021ec <__sflush_r+0x94>
 8002186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002188:	89a3      	ldrh	r3, [r4, #12]
 800218a:	075a      	lsls	r2, r3, #29
 800218c:	d505      	bpl.n	800219a <__sflush_r+0x42>
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	1ac0      	subs	r0, r0, r3
 8002192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002194:	b10b      	cbz	r3, 800219a <__sflush_r+0x42>
 8002196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002198:	1ac0      	subs	r0, r0, r3
 800219a:	2300      	movs	r3, #0
 800219c:	4602      	mov	r2, r0
 800219e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021a0:	4628      	mov	r0, r5
 80021a2:	6a21      	ldr	r1, [r4, #32]
 80021a4:	47b0      	blx	r6
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	d106      	bne.n	80021ba <__sflush_r+0x62>
 80021ac:	6829      	ldr	r1, [r5, #0]
 80021ae:	291d      	cmp	r1, #29
 80021b0:	d82c      	bhi.n	800220c <__sflush_r+0xb4>
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <__sflush_r+0x100>)
 80021b4:	40ca      	lsrs	r2, r1
 80021b6:	07d6      	lsls	r6, r2, #31
 80021b8:	d528      	bpl.n	800220c <__sflush_r+0xb4>
 80021ba:	2200      	movs	r2, #0
 80021bc:	6062      	str	r2, [r4, #4]
 80021be:	6922      	ldr	r2, [r4, #16]
 80021c0:	04d9      	lsls	r1, r3, #19
 80021c2:	6022      	str	r2, [r4, #0]
 80021c4:	d504      	bpl.n	80021d0 <__sflush_r+0x78>
 80021c6:	1c42      	adds	r2, r0, #1
 80021c8:	d101      	bne.n	80021ce <__sflush_r+0x76>
 80021ca:	682b      	ldr	r3, [r5, #0]
 80021cc:	b903      	cbnz	r3, 80021d0 <__sflush_r+0x78>
 80021ce:	6560      	str	r0, [r4, #84]	; 0x54
 80021d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021d2:	602f      	str	r7, [r5, #0]
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d0cb      	beq.n	8002170 <__sflush_r+0x18>
 80021d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021dc:	4299      	cmp	r1, r3
 80021de:	d002      	beq.n	80021e6 <__sflush_r+0x8e>
 80021e0:	4628      	mov	r0, r5
 80021e2:	f7ff fb17 	bl	8001814 <_free_r>
 80021e6:	2000      	movs	r0, #0
 80021e8:	6360      	str	r0, [r4, #52]	; 0x34
 80021ea:	e7c2      	b.n	8002172 <__sflush_r+0x1a>
 80021ec:	6a21      	ldr	r1, [r4, #32]
 80021ee:	2301      	movs	r3, #1
 80021f0:	4628      	mov	r0, r5
 80021f2:	47b0      	blx	r6
 80021f4:	1c41      	adds	r1, r0, #1
 80021f6:	d1c7      	bne.n	8002188 <__sflush_r+0x30>
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0c4      	beq.n	8002188 <__sflush_r+0x30>
 80021fe:	2b1d      	cmp	r3, #29
 8002200:	d001      	beq.n	8002206 <__sflush_r+0xae>
 8002202:	2b16      	cmp	r3, #22
 8002204:	d101      	bne.n	800220a <__sflush_r+0xb2>
 8002206:	602f      	str	r7, [r5, #0]
 8002208:	e7b2      	b.n	8002170 <__sflush_r+0x18>
 800220a:	89a3      	ldrh	r3, [r4, #12]
 800220c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002210:	81a3      	strh	r3, [r4, #12]
 8002212:	e7ae      	b.n	8002172 <__sflush_r+0x1a>
 8002214:	690f      	ldr	r7, [r1, #16]
 8002216:	2f00      	cmp	r7, #0
 8002218:	d0aa      	beq.n	8002170 <__sflush_r+0x18>
 800221a:	0793      	lsls	r3, r2, #30
 800221c:	bf18      	it	ne
 800221e:	2300      	movne	r3, #0
 8002220:	680e      	ldr	r6, [r1, #0]
 8002222:	bf08      	it	eq
 8002224:	694b      	ldreq	r3, [r1, #20]
 8002226:	1bf6      	subs	r6, r6, r7
 8002228:	600f      	str	r7, [r1, #0]
 800222a:	608b      	str	r3, [r1, #8]
 800222c:	2e00      	cmp	r6, #0
 800222e:	dd9f      	ble.n	8002170 <__sflush_r+0x18>
 8002230:	4633      	mov	r3, r6
 8002232:	463a      	mov	r2, r7
 8002234:	4628      	mov	r0, r5
 8002236:	6a21      	ldr	r1, [r4, #32]
 8002238:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800223c:	47e0      	blx	ip
 800223e:	2800      	cmp	r0, #0
 8002240:	dc06      	bgt.n	8002250 <__sflush_r+0xf8>
 8002242:	89a3      	ldrh	r3, [r4, #12]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224c:	81a3      	strh	r3, [r4, #12]
 800224e:	e790      	b.n	8002172 <__sflush_r+0x1a>
 8002250:	4407      	add	r7, r0
 8002252:	1a36      	subs	r6, r6, r0
 8002254:	e7ea      	b.n	800222c <__sflush_r+0xd4>
 8002256:	bf00      	nop
 8002258:	20400001 	.word	0x20400001

0800225c <_fflush_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	690b      	ldr	r3, [r1, #16]
 8002260:	4605      	mov	r5, r0
 8002262:	460c      	mov	r4, r1
 8002264:	b913      	cbnz	r3, 800226c <_fflush_r+0x10>
 8002266:	2500      	movs	r5, #0
 8002268:	4628      	mov	r0, r5
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	b118      	cbz	r0, 8002276 <_fflush_r+0x1a>
 800226e:	6983      	ldr	r3, [r0, #24]
 8002270:	b90b      	cbnz	r3, 8002276 <_fflush_r+0x1a>
 8002272:	f000 f887 	bl	8002384 <__sinit>
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <_fflush_r+0x6c>)
 8002278:	429c      	cmp	r4, r3
 800227a:	d11b      	bne.n	80022b4 <_fflush_r+0x58>
 800227c:	686c      	ldr	r4, [r5, #4]
 800227e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ef      	beq.n	8002266 <_fflush_r+0xa>
 8002286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002288:	07d0      	lsls	r0, r2, #31
 800228a:	d404      	bmi.n	8002296 <_fflush_r+0x3a>
 800228c:	0599      	lsls	r1, r3, #22
 800228e:	d402      	bmi.n	8002296 <_fflush_r+0x3a>
 8002290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002292:	f000 f915 	bl	80024c0 <__retarget_lock_acquire_recursive>
 8002296:	4628      	mov	r0, r5
 8002298:	4621      	mov	r1, r4
 800229a:	f7ff ff5d 	bl	8002158 <__sflush_r>
 800229e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022a0:	4605      	mov	r5, r0
 80022a2:	07da      	lsls	r2, r3, #31
 80022a4:	d4e0      	bmi.n	8002268 <_fflush_r+0xc>
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	059b      	lsls	r3, r3, #22
 80022aa:	d4dd      	bmi.n	8002268 <_fflush_r+0xc>
 80022ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022ae:	f000 f908 	bl	80024c2 <__retarget_lock_release_recursive>
 80022b2:	e7d9      	b.n	8002268 <_fflush_r+0xc>
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <_fflush_r+0x70>)
 80022b6:	429c      	cmp	r4, r3
 80022b8:	d101      	bne.n	80022be <_fflush_r+0x62>
 80022ba:	68ac      	ldr	r4, [r5, #8]
 80022bc:	e7df      	b.n	800227e <_fflush_r+0x22>
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <_fflush_r+0x74>)
 80022c0:	429c      	cmp	r4, r3
 80022c2:	bf08      	it	eq
 80022c4:	68ec      	ldreq	r4, [r5, #12]
 80022c6:	e7da      	b.n	800227e <_fflush_r+0x22>
 80022c8:	080028f4 	.word	0x080028f4
 80022cc:	08002914 	.word	0x08002914
 80022d0:	080028d4 	.word	0x080028d4

080022d4 <std>:
 80022d4:	2300      	movs	r3, #0
 80022d6:	b510      	push	{r4, lr}
 80022d8:	4604      	mov	r4, r0
 80022da:	e9c0 3300 	strd	r3, r3, [r0]
 80022de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022e2:	6083      	str	r3, [r0, #8]
 80022e4:	8181      	strh	r1, [r0, #12]
 80022e6:	6643      	str	r3, [r0, #100]	; 0x64
 80022e8:	81c2      	strh	r2, [r0, #14]
 80022ea:	6183      	str	r3, [r0, #24]
 80022ec:	4619      	mov	r1, r3
 80022ee:	2208      	movs	r2, #8
 80022f0:	305c      	adds	r0, #92	; 0x5c
 80022f2:	f7ff f9e3 	bl	80016bc <memset>
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <std+0x38>)
 80022f8:	6224      	str	r4, [r4, #32]
 80022fa:	6263      	str	r3, [r4, #36]	; 0x24
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <std+0x3c>)
 80022fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <std+0x40>)
 8002302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <std+0x44>)
 8002306:	6323      	str	r3, [r4, #48]	; 0x30
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	0800264d 	.word	0x0800264d
 8002310:	0800266f 	.word	0x0800266f
 8002314:	080026a7 	.word	0x080026a7
 8002318:	080026cb 	.word	0x080026cb

0800231c <_cleanup_r>:
 800231c:	4901      	ldr	r1, [pc, #4]	; (8002324 <_cleanup_r+0x8>)
 800231e:	f000 b8af 	b.w	8002480 <_fwalk_reent>
 8002322:	bf00      	nop
 8002324:	0800225d 	.word	0x0800225d

08002328 <__sfmoreglue>:
 8002328:	2268      	movs	r2, #104	; 0x68
 800232a:	b570      	push	{r4, r5, r6, lr}
 800232c:	1e4d      	subs	r5, r1, #1
 800232e:	4355      	muls	r5, r2
 8002330:	460e      	mov	r6, r1
 8002332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002336:	f7ff fad5 	bl	80018e4 <_malloc_r>
 800233a:	4604      	mov	r4, r0
 800233c:	b140      	cbz	r0, 8002350 <__sfmoreglue+0x28>
 800233e:	2100      	movs	r1, #0
 8002340:	e9c0 1600 	strd	r1, r6, [r0]
 8002344:	300c      	adds	r0, #12
 8002346:	60a0      	str	r0, [r4, #8]
 8002348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800234c:	f7ff f9b6 	bl	80016bc <memset>
 8002350:	4620      	mov	r0, r4
 8002352:	bd70      	pop	{r4, r5, r6, pc}

08002354 <__sfp_lock_acquire>:
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <__sfp_lock_acquire+0x8>)
 8002356:	f000 b8b3 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 800235a:	bf00      	nop
 800235c:	200000bd 	.word	0x200000bd

08002360 <__sfp_lock_release>:
 8002360:	4801      	ldr	r0, [pc, #4]	; (8002368 <__sfp_lock_release+0x8>)
 8002362:	f000 b8ae 	b.w	80024c2 <__retarget_lock_release_recursive>
 8002366:	bf00      	nop
 8002368:	200000bd 	.word	0x200000bd

0800236c <__sinit_lock_acquire>:
 800236c:	4801      	ldr	r0, [pc, #4]	; (8002374 <__sinit_lock_acquire+0x8>)
 800236e:	f000 b8a7 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 8002372:	bf00      	nop
 8002374:	200000be 	.word	0x200000be

08002378 <__sinit_lock_release>:
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <__sinit_lock_release+0x8>)
 800237a:	f000 b8a2 	b.w	80024c2 <__retarget_lock_release_recursive>
 800237e:	bf00      	nop
 8002380:	200000be 	.word	0x200000be

08002384 <__sinit>:
 8002384:	b510      	push	{r4, lr}
 8002386:	4604      	mov	r4, r0
 8002388:	f7ff fff0 	bl	800236c <__sinit_lock_acquire>
 800238c:	69a3      	ldr	r3, [r4, #24]
 800238e:	b11b      	cbz	r3, 8002398 <__sinit+0x14>
 8002390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002394:	f7ff bff0 	b.w	8002378 <__sinit_lock_release>
 8002398:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800239c:	6523      	str	r3, [r4, #80]	; 0x50
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <__sinit+0x68>)
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <__sinit+0x6c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80023a6:	42a3      	cmp	r3, r4
 80023a8:	bf08      	it	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	4620      	mov	r0, r4
 80023ae:	bf08      	it	eq
 80023b0:	61a3      	streq	r3, [r4, #24]
 80023b2:	f000 f81f 	bl	80023f4 <__sfp>
 80023b6:	6060      	str	r0, [r4, #4]
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 f81b 	bl	80023f4 <__sfp>
 80023be:	60a0      	str	r0, [r4, #8]
 80023c0:	4620      	mov	r0, r4
 80023c2:	f000 f817 	bl	80023f4 <__sfp>
 80023c6:	2200      	movs	r2, #0
 80023c8:	2104      	movs	r1, #4
 80023ca:	60e0      	str	r0, [r4, #12]
 80023cc:	6860      	ldr	r0, [r4, #4]
 80023ce:	f7ff ff81 	bl	80022d4 <std>
 80023d2:	2201      	movs	r2, #1
 80023d4:	2109      	movs	r1, #9
 80023d6:	68a0      	ldr	r0, [r4, #8]
 80023d8:	f7ff ff7c 	bl	80022d4 <std>
 80023dc:	2202      	movs	r2, #2
 80023de:	2112      	movs	r1, #18
 80023e0:	68e0      	ldr	r0, [r4, #12]
 80023e2:	f7ff ff77 	bl	80022d4 <std>
 80023e6:	2301      	movs	r3, #1
 80023e8:	61a3      	str	r3, [r4, #24]
 80023ea:	e7d1      	b.n	8002390 <__sinit+0xc>
 80023ec:	080027ec 	.word	0x080027ec
 80023f0:	0800231d 	.word	0x0800231d

080023f4 <__sfp>:
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	4607      	mov	r7, r0
 80023f8:	f7ff ffac 	bl	8002354 <__sfp_lock_acquire>
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <__sfp+0x84>)
 80023fe:	681e      	ldr	r6, [r3, #0]
 8002400:	69b3      	ldr	r3, [r6, #24]
 8002402:	b913      	cbnz	r3, 800240a <__sfp+0x16>
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff ffbd 	bl	8002384 <__sinit>
 800240a:	3648      	adds	r6, #72	; 0x48
 800240c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	d503      	bpl.n	800241c <__sfp+0x28>
 8002414:	6833      	ldr	r3, [r6, #0]
 8002416:	b30b      	cbz	r3, 800245c <__sfp+0x68>
 8002418:	6836      	ldr	r6, [r6, #0]
 800241a:	e7f7      	b.n	800240c <__sfp+0x18>
 800241c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002420:	b9d5      	cbnz	r5, 8002458 <__sfp+0x64>
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <__sfp+0x88>)
 8002424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002428:	60e3      	str	r3, [r4, #12]
 800242a:	6665      	str	r5, [r4, #100]	; 0x64
 800242c:	f000 f847 	bl	80024be <__retarget_lock_init_recursive>
 8002430:	f7ff ff96 	bl	8002360 <__sfp_lock_release>
 8002434:	2208      	movs	r2, #8
 8002436:	4629      	mov	r1, r5
 8002438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800243c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002440:	6025      	str	r5, [r4, #0]
 8002442:	61a5      	str	r5, [r4, #24]
 8002444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002448:	f7ff f938 	bl	80016bc <memset>
 800244c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002450:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002454:	4620      	mov	r0, r4
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002458:	3468      	adds	r4, #104	; 0x68
 800245a:	e7d9      	b.n	8002410 <__sfp+0x1c>
 800245c:	2104      	movs	r1, #4
 800245e:	4638      	mov	r0, r7
 8002460:	f7ff ff62 	bl	8002328 <__sfmoreglue>
 8002464:	4604      	mov	r4, r0
 8002466:	6030      	str	r0, [r6, #0]
 8002468:	2800      	cmp	r0, #0
 800246a:	d1d5      	bne.n	8002418 <__sfp+0x24>
 800246c:	f7ff ff78 	bl	8002360 <__sfp_lock_release>
 8002470:	230c      	movs	r3, #12
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	e7ee      	b.n	8002454 <__sfp+0x60>
 8002476:	bf00      	nop
 8002478:	080027ec 	.word	0x080027ec
 800247c:	ffff0001 	.word	0xffff0001

08002480 <_fwalk_reent>:
 8002480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002484:	4606      	mov	r6, r0
 8002486:	4688      	mov	r8, r1
 8002488:	2700      	movs	r7, #0
 800248a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800248e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002492:	f1b9 0901 	subs.w	r9, r9, #1
 8002496:	d505      	bpl.n	80024a4 <_fwalk_reent+0x24>
 8002498:	6824      	ldr	r4, [r4, #0]
 800249a:	2c00      	cmp	r4, #0
 800249c:	d1f7      	bne.n	800248e <_fwalk_reent+0xe>
 800249e:	4638      	mov	r0, r7
 80024a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024a4:	89ab      	ldrh	r3, [r5, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d907      	bls.n	80024ba <_fwalk_reent+0x3a>
 80024aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024ae:	3301      	adds	r3, #1
 80024b0:	d003      	beq.n	80024ba <_fwalk_reent+0x3a>
 80024b2:	4629      	mov	r1, r5
 80024b4:	4630      	mov	r0, r6
 80024b6:	47c0      	blx	r8
 80024b8:	4307      	orrs	r7, r0
 80024ba:	3568      	adds	r5, #104	; 0x68
 80024bc:	e7e9      	b.n	8002492 <_fwalk_reent+0x12>

080024be <__retarget_lock_init_recursive>:
 80024be:	4770      	bx	lr

080024c0 <__retarget_lock_acquire_recursive>:
 80024c0:	4770      	bx	lr

080024c2 <__retarget_lock_release_recursive>:
 80024c2:	4770      	bx	lr

080024c4 <__swhatbuf_r>:
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	460e      	mov	r6, r1
 80024c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024cc:	4614      	mov	r4, r2
 80024ce:	2900      	cmp	r1, #0
 80024d0:	461d      	mov	r5, r3
 80024d2:	b096      	sub	sp, #88	; 0x58
 80024d4:	da08      	bge.n	80024e8 <__swhatbuf_r+0x24>
 80024d6:	2200      	movs	r2, #0
 80024d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80024dc:	602a      	str	r2, [r5, #0]
 80024de:	061a      	lsls	r2, r3, #24
 80024e0:	d410      	bmi.n	8002504 <__swhatbuf_r+0x40>
 80024e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e6:	e00e      	b.n	8002506 <__swhatbuf_r+0x42>
 80024e8:	466a      	mov	r2, sp
 80024ea:	f000 f915 	bl	8002718 <_fstat_r>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	dbf1      	blt.n	80024d6 <__swhatbuf_r+0x12>
 80024f2:	9a01      	ldr	r2, [sp, #4]
 80024f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024fc:	425a      	negs	r2, r3
 80024fe:	415a      	adcs	r2, r3
 8002500:	602a      	str	r2, [r5, #0]
 8002502:	e7ee      	b.n	80024e2 <__swhatbuf_r+0x1e>
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	2000      	movs	r0, #0
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	b016      	add	sp, #88	; 0x58
 800250c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002510 <__smakebuf_r>:
 8002510:	898b      	ldrh	r3, [r1, #12]
 8002512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002514:	079d      	lsls	r5, r3, #30
 8002516:	4606      	mov	r6, r0
 8002518:	460c      	mov	r4, r1
 800251a:	d507      	bpl.n	800252c <__smakebuf_r+0x1c>
 800251c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	6123      	str	r3, [r4, #16]
 8002524:	2301      	movs	r3, #1
 8002526:	6163      	str	r3, [r4, #20]
 8002528:	b002      	add	sp, #8
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	466a      	mov	r2, sp
 800252e:	ab01      	add	r3, sp, #4
 8002530:	f7ff ffc8 	bl	80024c4 <__swhatbuf_r>
 8002534:	9900      	ldr	r1, [sp, #0]
 8002536:	4605      	mov	r5, r0
 8002538:	4630      	mov	r0, r6
 800253a:	f7ff f9d3 	bl	80018e4 <_malloc_r>
 800253e:	b948      	cbnz	r0, 8002554 <__smakebuf_r+0x44>
 8002540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002544:	059a      	lsls	r2, r3, #22
 8002546:	d4ef      	bmi.n	8002528 <__smakebuf_r+0x18>
 8002548:	f023 0303 	bic.w	r3, r3, #3
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	e7e3      	b.n	800251c <__smakebuf_r+0xc>
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <__smakebuf_r+0x7c>)
 8002556:	62b3      	str	r3, [r6, #40]	; 0x28
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	6020      	str	r0, [r4, #0]
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	9b00      	ldr	r3, [sp, #0]
 8002564:	6120      	str	r0, [r4, #16]
 8002566:	6163      	str	r3, [r4, #20]
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	b15b      	cbz	r3, 8002584 <__smakebuf_r+0x74>
 800256c:	4630      	mov	r0, r6
 800256e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002572:	f000 f8e3 	bl	800273c <_isatty_r>
 8002576:	b128      	cbz	r0, 8002584 <__smakebuf_r+0x74>
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	89a0      	ldrh	r0, [r4, #12]
 8002586:	4305      	orrs	r5, r0
 8002588:	81a5      	strh	r5, [r4, #12]
 800258a:	e7cd      	b.n	8002528 <__smakebuf_r+0x18>
 800258c:	0800231d 	.word	0x0800231d

08002590 <memchr>:
 8002590:	4603      	mov	r3, r0
 8002592:	b510      	push	{r4, lr}
 8002594:	b2c9      	uxtb	r1, r1
 8002596:	4402      	add	r2, r0
 8002598:	4293      	cmp	r3, r2
 800259a:	4618      	mov	r0, r3
 800259c:	d101      	bne.n	80025a2 <memchr+0x12>
 800259e:	2000      	movs	r0, #0
 80025a0:	e003      	b.n	80025aa <memchr+0x1a>
 80025a2:	7804      	ldrb	r4, [r0, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	428c      	cmp	r4, r1
 80025a8:	d1f6      	bne.n	8002598 <memchr+0x8>
 80025aa:	bd10      	pop	{r4, pc}

080025ac <__malloc_lock>:
 80025ac:	4801      	ldr	r0, [pc, #4]	; (80025b4 <__malloc_lock+0x8>)
 80025ae:	f7ff bf87 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 80025b2:	bf00      	nop
 80025b4:	200000bc 	.word	0x200000bc

080025b8 <__malloc_unlock>:
 80025b8:	4801      	ldr	r0, [pc, #4]	; (80025c0 <__malloc_unlock+0x8>)
 80025ba:	f7ff bf82 	b.w	80024c2 <__retarget_lock_release_recursive>
 80025be:	bf00      	nop
 80025c0:	200000bc 	.word	0x200000bc

080025c4 <_raise_r>:
 80025c4:	291f      	cmp	r1, #31
 80025c6:	b538      	push	{r3, r4, r5, lr}
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	d904      	bls.n	80025d8 <_raise_r+0x14>
 80025ce:	2316      	movs	r3, #22
 80025d0:	6003      	str	r3, [r0, #0]
 80025d2:	f04f 30ff 	mov.w	r0, #4294967295
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
 80025d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80025da:	b112      	cbz	r2, 80025e2 <_raise_r+0x1e>
 80025dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80025e0:	b94b      	cbnz	r3, 80025f6 <_raise_r+0x32>
 80025e2:	4620      	mov	r0, r4
 80025e4:	f000 f830 	bl	8002648 <_getpid_r>
 80025e8:	462a      	mov	r2, r5
 80025ea:	4601      	mov	r1, r0
 80025ec:	4620      	mov	r0, r4
 80025ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025f2:	f000 b817 	b.w	8002624 <_kill_r>
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d00a      	beq.n	8002610 <_raise_r+0x4c>
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	d103      	bne.n	8002606 <_raise_r+0x42>
 80025fe:	2316      	movs	r3, #22
 8002600:	6003      	str	r3, [r0, #0]
 8002602:	2001      	movs	r0, #1
 8002604:	e7e7      	b.n	80025d6 <_raise_r+0x12>
 8002606:	2400      	movs	r4, #0
 8002608:	4628      	mov	r0, r5
 800260a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800260e:	4798      	blx	r3
 8002610:	2000      	movs	r0, #0
 8002612:	e7e0      	b.n	80025d6 <_raise_r+0x12>

08002614 <raise>:
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <raise+0xc>)
 8002616:	4601      	mov	r1, r0
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f7ff bfd3 	b.w	80025c4 <_raise_r>
 800261e:	bf00      	nop
 8002620:	2000002c 	.word	0x2000002c

08002624 <_kill_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	2300      	movs	r3, #0
 8002628:	4d06      	ldr	r5, [pc, #24]	; (8002644 <_kill_r+0x20>)
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	602b      	str	r3, [r5, #0]
 8002632:	f7fe f84d 	bl	80006d0 <_kill>
 8002636:	1c43      	adds	r3, r0, #1
 8002638:	d102      	bne.n	8002640 <_kill_r+0x1c>
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	b103      	cbz	r3, 8002640 <_kill_r+0x1c>
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	bd38      	pop	{r3, r4, r5, pc}
 8002642:	bf00      	nop
 8002644:	200000c0 	.word	0x200000c0

08002648 <_getpid_r>:
 8002648:	f7fe b83b 	b.w	80006c2 <_getpid>

0800264c <__sread>:
 800264c:	b510      	push	{r4, lr}
 800264e:	460c      	mov	r4, r1
 8002650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002654:	f000 f894 	bl	8002780 <_read_r>
 8002658:	2800      	cmp	r0, #0
 800265a:	bfab      	itete	ge
 800265c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800265e:	89a3      	ldrhlt	r3, [r4, #12]
 8002660:	181b      	addge	r3, r3, r0
 8002662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002666:	bfac      	ite	ge
 8002668:	6563      	strge	r3, [r4, #84]	; 0x54
 800266a:	81a3      	strhlt	r3, [r4, #12]
 800266c:	bd10      	pop	{r4, pc}

0800266e <__swrite>:
 800266e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002672:	461f      	mov	r7, r3
 8002674:	898b      	ldrh	r3, [r1, #12]
 8002676:	4605      	mov	r5, r0
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	460c      	mov	r4, r1
 800267c:	4616      	mov	r6, r2
 800267e:	d505      	bpl.n	800268c <__swrite+0x1e>
 8002680:	2302      	movs	r3, #2
 8002682:	2200      	movs	r2, #0
 8002684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002688:	f000 f868 	bl	800275c <_lseek_r>
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	4632      	mov	r2, r6
 8002690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002694:	81a3      	strh	r3, [r4, #12]
 8002696:	4628      	mov	r0, r5
 8002698:	463b      	mov	r3, r7
 800269a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800269e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026a2:	f000 b817 	b.w	80026d4 <_write_r>

080026a6 <__sseek>:
 80026a6:	b510      	push	{r4, lr}
 80026a8:	460c      	mov	r4, r1
 80026aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ae:	f000 f855 	bl	800275c <_lseek_r>
 80026b2:	1c43      	adds	r3, r0, #1
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	bf15      	itete	ne
 80026b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80026ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026c2:	81a3      	strheq	r3, [r4, #12]
 80026c4:	bf18      	it	ne
 80026c6:	81a3      	strhne	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__sclose>:
 80026ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ce:	f000 b813 	b.w	80026f8 <_close_r>
	...

080026d4 <_write_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	2200      	movs	r2, #0
 80026de:	4d05      	ldr	r5, [pc, #20]	; (80026f4 <_write_r+0x20>)
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7fe f82b 	bl	800073e <_write>
 80026e8:	1c43      	adds	r3, r0, #1
 80026ea:	d102      	bne.n	80026f2 <_write_r+0x1e>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	b103      	cbz	r3, 80026f2 <_write_r+0x1e>
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
 80026f4:	200000c0 	.word	0x200000c0

080026f8 <_close_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	2300      	movs	r3, #0
 80026fc:	4d05      	ldr	r5, [pc, #20]	; (8002714 <_close_r+0x1c>)
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fe f837 	bl	8000776 <_close>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_close_r+0x1a>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_close_r+0x1a>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	200000c0 	.word	0x200000c0

08002718 <_fstat_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	2300      	movs	r3, #0
 800271c:	4d06      	ldr	r5, [pc, #24]	; (8002738 <_fstat_r+0x20>)
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	602b      	str	r3, [r5, #0]
 8002726:	f7fe f831 	bl	800078c <_fstat>
 800272a:	1c43      	adds	r3, r0, #1
 800272c:	d102      	bne.n	8002734 <_fstat_r+0x1c>
 800272e:	682b      	ldr	r3, [r5, #0]
 8002730:	b103      	cbz	r3, 8002734 <_fstat_r+0x1c>
 8002732:	6023      	str	r3, [r4, #0]
 8002734:	bd38      	pop	{r3, r4, r5, pc}
 8002736:	bf00      	nop
 8002738:	200000c0 	.word	0x200000c0

0800273c <_isatty_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	2300      	movs	r3, #0
 8002740:	4d05      	ldr	r5, [pc, #20]	; (8002758 <_isatty_r+0x1c>)
 8002742:	4604      	mov	r4, r0
 8002744:	4608      	mov	r0, r1
 8002746:	602b      	str	r3, [r5, #0]
 8002748:	f7fe f82f 	bl	80007aa <_isatty>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_isatty_r+0x1a>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_isatty_r+0x1a>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000c0 	.word	0x200000c0

0800275c <_lseek_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	2200      	movs	r2, #0
 8002766:	4d05      	ldr	r5, [pc, #20]	; (800277c <_lseek_r+0x20>)
 8002768:	602a      	str	r2, [r5, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7fe f827 	bl	80007be <_lseek>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d102      	bne.n	800277a <_lseek_r+0x1e>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b103      	cbz	r3, 800277a <_lseek_r+0x1e>
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	200000c0 	.word	0x200000c0

08002780 <_read_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	2200      	movs	r2, #0
 800278a:	4d05      	ldr	r5, [pc, #20]	; (80027a0 <_read_r+0x20>)
 800278c:	602a      	str	r2, [r5, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	f7fd ffb8 	bl	8000704 <_read>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d102      	bne.n	800279e <_read_r+0x1e>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	b103      	cbz	r3, 800279e <_read_r+0x1e>
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	200000c0 	.word	0x200000c0

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
