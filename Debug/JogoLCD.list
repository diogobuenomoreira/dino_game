
JogoLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002e30  08002e30  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e30  08002e30  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000090  08002ec8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002ec8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d81  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001354  00000000  00000000  00023e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00025190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  000256f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171a0  00000000  00000000  00025b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005fa1  00000000  00000000  0003cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f05c  00000000  00000000  00042cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1d35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d00  00000000  00000000  000c1d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c6c 	.word	0x08002c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002c6c 	.word	0x08002c6c

0800014c <LCDCmd>:
/********************************************************************/

/*******************************FUNCOES******************************/
/****************ENVIA UM COMANDO PARA O DISPLAY*********************/
void LCDCmd (unsigned char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  LCD_RS_OFF;
 8000156:	2200      	movs	r2, #0
 8000158:	2108      	movs	r1, #8
 800015a:	480a      	ldr	r0, [pc, #40]	; (8000184 <LCDCmd+0x38>)
 800015c:	f001 f8d0 	bl	8001300 <HAL_GPIO_WritePin>
  sendnibble(cmd>>4);           //uso de 4 bits apenas
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	091b      	lsrs	r3, r3, #4
 8000164:	b2db      	uxtb	r3, r3
 8000166:	4618      	mov	r0, r3
 8000168:	f000 f80e 	bl	8000188 <sendnibble>
  sendnibble(cmd&0x0F);         //escreve 4 bits
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f003 030f 	and.w	r3, r3, #15
 8000172:	b2db      	uxtb	r3, r3
 8000174:	4618      	mov	r0, r3
 8000176:	f000 f807 	bl	8000188 <sendnibble>
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <sendnibble>:
/********************************************************************/
/***********ROTINA PARA TRABALHAR COM 4 BITS NO DISPLAY**************/
void sendnibble(unsigned char dado)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
  LCD_DATA_OFF;
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000198:	481d      	ldr	r0, [pc, #116]	; (8000210 <sendnibble+0x88>)
 800019a:	f001 f8b1 	bl	8001300 <HAL_GPIO_WritePin>
  if ((dado&0x01)==0x01) LCD_D0_ON;   //atualiza valor de dado
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d004      	beq.n	80001b2 <sendnibble+0x2a>
 80001a8:	2201      	movs	r2, #1
 80001aa:	2120      	movs	r1, #32
 80001ac:	4818      	ldr	r0, [pc, #96]	; (8000210 <sendnibble+0x88>)
 80001ae:	f001 f8a7 	bl	8001300 <HAL_GPIO_WritePin>
  if ((dado&0x02)==0x02) LCD_D1_ON;   //atualiza valor de dado
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	f003 0302 	and.w	r3, r3, #2
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d004      	beq.n	80001c6 <sendnibble+0x3e>
 80001bc:	2201      	movs	r2, #1
 80001be:	2140      	movs	r1, #64	; 0x40
 80001c0:	4813      	ldr	r0, [pc, #76]	; (8000210 <sendnibble+0x88>)
 80001c2:	f001 f89d 	bl	8001300 <HAL_GPIO_WritePin>
  if ((dado&0x04)==0x04) LCD_D2_ON;   //atualiza valor de dado
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 0304 	and.w	r3, r3, #4
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d004      	beq.n	80001da <sendnibble+0x52>
 80001d0:	2201      	movs	r2, #1
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	480e      	ldr	r0, [pc, #56]	; (8000210 <sendnibble+0x88>)
 80001d6:	f001 f893 	bl	8001300 <HAL_GPIO_WritePin>
  if ((dado&0x08)==0x08) LCD_D3_ON;   //atualiza valor de dado
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d005      	beq.n	80001f0 <sendnibble+0x68>
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <sendnibble+0x88>)
 80001ec:	f001 f888 	bl	8001300 <HAL_GPIO_WritePin>
  LCD_EN_ON;
 80001f0:	2201      	movs	r2, #1
 80001f2:	2110      	movs	r1, #16
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <sendnibble+0x88>)
 80001f6:	f001 f883 	bl	8001300 <HAL_GPIO_WritePin>
  delayLCD();
 80001fa:	f000 f843 	bl	8000284 <delayLCD>
  LCD_EN_OFF;
 80001fe:	2200      	movs	r2, #0
 8000200:	2110      	movs	r1, #16
 8000202:	4803      	ldr	r0, [pc, #12]	; (8000210 <sendnibble+0x88>)
 8000204:	f001 f87c 	bl	8001300 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00

08000214 <InitLCD>:
/********************************************************************/
/******************INICIALIZA O DISPLAY******************************/
void InitLCD (void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  LCD_EN_OFF;
 8000218:	2200      	movs	r2, #0
 800021a:	2110      	movs	r1, #16
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <InitLCD+0x6c>)
 800021e:	f001 f86f 	bl	8001300 <HAL_GPIO_WritePin>
  LCD_RS_OFF;
 8000222:	2200      	movs	r2, #0
 8000224:	2108      	movs	r1, #8
 8000226:	4816      	ldr	r0, [pc, #88]	; (8000280 <InitLCD+0x6c>)
 8000228:	f001 f86a 	bl	8001300 <HAL_GPIO_WritePin>
  sendnibble(0x30>>4);
 800022c:	2003      	movs	r0, #3
 800022e:	f7ff ffab 	bl	8000188 <sendnibble>
  delayLCD();
 8000232:	f000 f827 	bl	8000284 <delayLCD>
  sendnibble(0x30>>4);
 8000236:	2003      	movs	r0, #3
 8000238:	f7ff ffa6 	bl	8000188 <sendnibble>
  delayLCD();
 800023c:	f000 f822 	bl	8000284 <delayLCD>
  sendnibble(0x30>>4);
 8000240:	2003      	movs	r0, #3
 8000242:	f7ff ffa1 	bl	8000188 <sendnibble>
  delayLCD();
 8000246:	f000 f81d 	bl	8000284 <delayLCD>
  sendnibble(0x20>>4);
 800024a:	2002      	movs	r0, #2
 800024c:	f7ff ff9c 	bl	8000188 <sendnibble>
  delayLCD();
 8000250:	f000 f818 	bl	8000284 <delayLCD>
  LCDCmd(0x28);
 8000254:	2028      	movs	r0, #40	; 0x28
 8000256:	f7ff ff79 	bl	800014c <LCDCmd>
  delayLCD();
 800025a:	f000 f813 	bl	8000284 <delayLCD>
  LCDCmd(0x08);
 800025e:	2008      	movs	r0, #8
 8000260:	f7ff ff74 	bl	800014c <LCDCmd>
  delayLCD();
 8000264:	f000 f80e 	bl	8000284 <delayLCD>
  LCDCmd(0x0C);
 8000268:	200c      	movs	r0, #12
 800026a:	f7ff ff6f 	bl	800014c <LCDCmd>
  delayLCD();
 800026e:	f000 f809 	bl	8000284 <delayLCD>
  LCDCmd(0x01);
 8000272:	2001      	movs	r0, #1
 8000274:	f7ff ff6a 	bl	800014c <LCDCmd>
  delayLCD();
 8000278:	f000 f804 	bl	8000284 <delayLCD>
   //Transaction end
  //dispSend(0x48, command); //Same thing, but for 0x01
  //for(i=0; i<8; i++) dispSend(cact[i], write);
  //dispSend(0x80, command);
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010c00 	.word	0x40010c00

08000284 <delayLCD>:
/********************************************************************/
/*******************ATRASO PARA CONFIGURAR O DISPLAY*****************/
void delayLCD (void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fd8b 	bl	8000da4 <HAL_Delay>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}

08000292 <LCDPrintStr>:
  LCDPrintStr(dado);
}
/********************************************************************/
/*******************ENVIA UMA MENSAGEM AO DISPLAY********************/
void LCDPrintStr (char *dado)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
	while (*dado != 0)
 800029a:	e007      	b.n	80002ac <LCDPrintStr+0x1a>
	{
		LCDChar(*dado);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f8b7 	bl	8000414 <LCDChar>
		dado++;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
	while (*dado != 0)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d1f3      	bne.n	800029c <LCDPrintStr+0xa>
	}
}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <LCDPrintVal>:
/********************************************************************/
/*****************ENVIA UM INTEIRO PARA O DISPLAY********************/
void LCDPrintVal (unsigned int dado)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if(dado>=10000) LCDChar((dado/10000)+0x30);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d90a      	bls.n	80002e8 <LCDPrintVal+0x28>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a4b      	ldr	r2, [pc, #300]	; (8000404 <LCDPrintVal+0x144>)
 80002d6:	fba2 2303 	umull	r2, r3, r2, r3
 80002da:	0b5b      	lsrs	r3, r3, #13
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	3330      	adds	r3, #48	; 0x30
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f896 	bl	8000414 <LCDChar>
  if(dado>=1000) LCDChar(((dado%10000)/1000)+0x30);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002ee:	d313      	bcc.n	8000318 <LCDPrintVal+0x58>
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4b44      	ldr	r3, [pc, #272]	; (8000404 <LCDPrintVal+0x144>)
 80002f4:	fba3 1302 	umull	r1, r3, r3, r2
 80002f8:	0b5b      	lsrs	r3, r3, #13
 80002fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80002fe:	fb01 f303 	mul.w	r3, r1, r3
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	4a40      	ldr	r2, [pc, #256]	; (8000408 <LCDPrintVal+0x148>)
 8000306:	fba2 2303 	umull	r2, r3, r2, r3
 800030a:	099b      	lsrs	r3, r3, #6
 800030c:	b2db      	uxtb	r3, r3
 800030e:	3330      	adds	r3, #48	; 0x30
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f87e 	bl	8000414 <LCDChar>
  if(dado>=100)  LCDChar((((dado%10000)%1000)/100)+0x30);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b63      	cmp	r3, #99	; 0x63
 800031c:	d91c      	bls.n	8000358 <LCDPrintVal+0x98>
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4b38      	ldr	r3, [pc, #224]	; (8000404 <LCDPrintVal+0x144>)
 8000322:	fba3 1302 	umull	r1, r3, r3, r2
 8000326:	0b5b      	lsrs	r3, r3, #13
 8000328:	f242 7110 	movw	r1, #10000	; 0x2710
 800032c:	fb01 f303 	mul.w	r3, r1, r3
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	4a35      	ldr	r2, [pc, #212]	; (8000408 <LCDPrintVal+0x148>)
 8000334:	fba2 1203 	umull	r1, r2, r2, r3
 8000338:	0992      	lsrs	r2, r2, #6
 800033a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800033e:	fb01 f202 	mul.w	r2, r1, r2
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	4b31      	ldr	r3, [pc, #196]	; (800040c <LCDPrintVal+0x14c>)
 8000346:	fba3 2302 	umull	r2, r3, r3, r2
 800034a:	095b      	lsrs	r3, r3, #5
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3330      	adds	r3, #48	; 0x30
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f85e 	bl	8000414 <LCDChar>
  if(dado>=10)   LCDChar(((((dado%10000)%1000)%100)/10)+0x30);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b09      	cmp	r3, #9
 800035c:	d924      	bls.n	80003a8 <LCDPrintVal+0xe8>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <LCDPrintVal+0x144>)
 8000362:	fba2 1203 	umull	r1, r2, r2, r3
 8000366:	0b52      	lsrs	r2, r2, #13
 8000368:	f242 7110 	movw	r1, #10000	; 0x2710
 800036c:	fb01 f202 	mul.w	r2, r1, r2
 8000370:	1a9a      	subs	r2, r3, r2
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <LCDPrintVal+0x148>)
 8000374:	fba3 1302 	umull	r1, r3, r3, r2
 8000378:	099b      	lsrs	r3, r3, #6
 800037a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	4a21      	ldr	r2, [pc, #132]	; (800040c <LCDPrintVal+0x14c>)
 8000386:	fba2 1203 	umull	r1, r2, r2, r3
 800038a:	0952      	lsrs	r2, r2, #5
 800038c:	2164      	movs	r1, #100	; 0x64
 800038e:	fb01 f202 	mul.w	r2, r1, r2
 8000392:	1a9a      	subs	r2, r3, r2
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <LCDPrintVal+0x150>)
 8000396:	fba3 2302 	umull	r2, r3, r3, r2
 800039a:	08db      	lsrs	r3, r3, #3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3330      	adds	r3, #48	; 0x30
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f836 	bl	8000414 <LCDChar>
  LCDChar(((((dado%10000)%1000)%100)%10)+0x30);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <LCDPrintVal+0x144>)
 80003ac:	fba2 1203 	umull	r1, r2, r2, r3
 80003b0:	0b52      	lsrs	r2, r2, #13
 80003b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80003b6:	fb01 f202 	mul.w	r2, r1, r2
 80003ba:	1a9a      	subs	r2, r3, r2
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <LCDPrintVal+0x148>)
 80003be:	fba3 1302 	umull	r1, r3, r3, r2
 80003c2:	099b      	lsrs	r3, r3, #6
 80003c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003c8:	fb01 f303 	mul.w	r3, r1, r3
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	4a0f      	ldr	r2, [pc, #60]	; (800040c <LCDPrintVal+0x14c>)
 80003d0:	fba2 1203 	umull	r1, r2, r2, r3
 80003d4:	0952      	lsrs	r2, r2, #5
 80003d6:	2164      	movs	r1, #100	; 0x64
 80003d8:	fb01 f202 	mul.w	r2, r1, r2
 80003dc:	1a9a      	subs	r2, r3, r2
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <LCDPrintVal+0x150>)
 80003e0:	fba3 1302 	umull	r1, r3, r3, r2
 80003e4:	08d9      	lsrs	r1, r3, #3
 80003e6:	460b      	mov	r3, r1
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	1ad1      	subs	r1, r2, r3
 80003f0:	b2cb      	uxtb	r3, r1
 80003f2:	3330      	adds	r3, #48	; 0x30
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f80c 	bl	8000414 <LCDChar>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	d1b71759 	.word	0xd1b71759
 8000408:	10624dd3 	.word	0x10624dd3
 800040c:	51eb851f 	.word	0x51eb851f
 8000410:	cccccccd 	.word	0xcccccccd

08000414 <LCDChar>:
  LCDPrintVal(dado);
}

/**********************ENVIA UM DADO AO DISPLAY**********************/
void LCDChar (unsigned char dado)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
  LCD_RS_ON;
 800041e:	2201      	movs	r2, #1
 8000420:	2108      	movs	r1, #8
 8000422:	480a      	ldr	r0, [pc, #40]	; (800044c <LCDChar+0x38>)
 8000424:	f000 ff6c 	bl	8001300 <HAL_GPIO_WritePin>
  sendnibble(dado>>4);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	091b      	lsrs	r3, r3, #4
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feaa 	bl	8000188 <sendnibble>
  sendnibble(dado&0x0F);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fea3 	bl	8000188 <sendnibble>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010c00 	.word	0x40010c00

08000450 <LCDCursorMode>:
  sendnibble(dado&0x0F);
}
/********************************************************************/
/**********************ESCOLHE MODO CURSOR **********************/
void LCDCursorMode (unsigned char modo)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
  if(modo==0) LCDCmd(0x0c);   //apagado
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d103      	bne.n	8000468 <LCDCursorMode+0x18>
 8000460:	200c      	movs	r0, #12
 8000462:	f7ff fe73 	bl	800014c <LCDCmd>
  else if(modo==1) LCDCmd(0x0F);     //ligado
}
 8000466:	e005      	b.n	8000474 <LCDCursorMode+0x24>
  else if(modo==1) LCDCmd(0x0F);     //ligado
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d102      	bne.n	8000474 <LCDCursorMode+0x24>
 800046e:	200f      	movs	r0, #15
 8000470:	f7ff fe6c 	bl	800014c <LCDCmd>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <LCDCursorPos>:
/********************************************************************/
/**********************ESCOLHE POSICAO CURSOR **********************/
void LCDCursorPos (unsigned char col,unsigned char row)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	4613      	mov	r3, r2
 800048a:	71bb      	strb	r3, [r7, #6]
  unsigned char pos;
  pos=col-1;
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	3b01      	subs	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]
  if (row==1)
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d107      	bne.n	80004a8 <LCDCursorPos+0x2c>
  {
    pos=pos+0x80;
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	3b80      	subs	r3, #128	; 0x80
 800049c:	73fb      	strb	r3, [r7, #15]
    LCDCmd(pos);
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe53 	bl	800014c <LCDCmd>
  else
  {
    pos=pos+0xc0;
    LCDCmd(pos);
  }
}
 80004a6:	e006      	b.n	80004b6 <LCDCursorPos+0x3a>
    pos=pos+0xc0;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	3b40      	subs	r3, #64	; 0x40
 80004ac:	73fb      	strb	r3, [r7, #15]
    LCDCmd(pos);
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe4b 	bl	800014c <LCDCmd>
}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <createChar>:


// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, unsigned char charmap[]) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b084      	sub	sp, #16
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	6039      	str	r1, [r7, #0]
 80004c8:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 0307 	and.w	r3, r3, #7
 80004d0:	71fb      	strb	r3, [r7, #7]
  LCDCmd(LCD_SETCGRAMADDR | (location << 3));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe33 	bl	800014c <LCDCmd>
  for (int i=0; i<8; i++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	e009      	b.n	8000500 <createChar+0x42>
	 LCDChar(charmap[i]);
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff8d 	bl	8000414 <LCDChar>
  for (int i=0; i<8; i++) {
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b07      	cmp	r3, #7
 8000504:	ddf2      	ble.n	80004ec <createChar+0x2e>
  }
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <LCDClear>:

void LCDClear(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

	LCDCmd(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff fe19 	bl	800014c <LCDCmd>
	HAL_Delay(2);
 800051a:	2002      	movs	r0, #2
 800051c:	f000 fc42 	bl	8000da4 <HAL_Delay>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <RandChar>:

void RandChar(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

	uint8_t lowerLimit = 3, upperLimit = 14;
 800052a:	2303      	movs	r3, #3
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	230e      	movs	r3, #14
 8000530:	71bb      	strb	r3, [r7, #6]
	uint8_t col = 0, ch = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	717b      	strb	r3, [r7, #5]
 8000536:	2300      	movs	r3, #0
 8000538:	713b      	strb	r3, [r7, #4]

	srand(HAL_GetTick()); // Seed
 800053a:	f000 fc29 	bl	8000d90 <HAL_GetTick>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fb27 	bl	8001b94 <srand>

	col =  lowerLimit + rand() % (upperLimit - lowerLimit);
 8000546:	f001 fb53 	bl	8001bf0 <rand>
 800054a:	4602      	mov	r2, r0
 800054c:	79b9      	ldrb	r1, [r7, #6]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	1acb      	subs	r3, r1, r3
 8000552:	fb92 f1f3 	sdiv	r1, r2, r3
 8000556:	fb01 f303 	mul.w	r3, r1, r3
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	b2da      	uxtb	r2, r3
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4413      	add	r3, r2
 8000562:	717b      	strb	r3, [r7, #5]
	LCDCursorPos(col, 2);
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	2102      	movs	r1, #2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff87 	bl	800047c <LCDCursorPos>

	lowerLimit = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	71fb      	strb	r3, [r7, #7]
	upperLimit = 4;
 8000572:	2304      	movs	r3, #4
 8000574:	71bb      	strb	r3, [r7, #6]

	ch =  lowerLimit + rand() % (upperLimit - lowerLimit);
 8000576:	f001 fb3b 	bl	8001bf0 <rand>
 800057a:	4602      	mov	r2, r0
 800057c:	79b9      	ldrb	r1, [r7, #6]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	1acb      	subs	r3, r1, r3
 8000582:	fb92 f1f3 	sdiv	r1, r2, r3
 8000586:	fb01 f303 	mul.w	r3, r1, r3
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	b2da      	uxtb	r2, r3
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4413      	add	r3, r2
 8000592:	713b      	strb	r3, [r7, #4]
	LCDChar(ch);
 8000594:	793b      	ldrb	r3, [r7, #4]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff3c 	bl	8000414 <LCDChar>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <DisplayStartScreen>:

void DisplayStartScreen(void) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

	char InitMsg [] = "Dino Game...";
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <DisplayStartScreen+0x60>)
 80005ac:	463c      	mov	r4, r7
 80005ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b0:	c407      	stmia	r4!, {r0, r1, r2}
 80005b2:	7023      	strb	r3, [r4, #0]

	LCDCursorPos(1,1);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ff60 	bl	800047c <LCDCursorPos>
	LCDPrintStr(InitMsg);
 80005bc:	463b      	mov	r3, r7
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe67 	bl	8000292 <LCDPrintStr>

	LCDCursorPos(1, 2);
 80005c4:	2102      	movs	r1, #2
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ff58 	bl	800047c <LCDCursorPos>
	LCDChar(BLOCK);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f7ff ff21 	bl	8000414 <LCDChar>

	LCDCursorPos(15, 2);
 80005d2:	2102      	movs	r1, #2
 80005d4:	200f      	movs	r0, #15
 80005d6:	f7ff ff51 	bl	800047c <LCDCursorPos>
	LCDChar(BLOCK);
 80005da:	2003      	movs	r0, #3
 80005dc:	f7ff ff1a 	bl	8000414 <LCDChar>

	LCDCursorPos(2, 2);
 80005e0:	2102      	movs	r1, #2
 80005e2:	2002      	movs	r0, #2
 80005e4:	f7ff ff4a 	bl	800047c <LCDCursorPos>
	LCDChar(DINO);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ff13 	bl	8000414 <LCDChar>

	RandChar();
 80005ee:	f7ff ff99 	bl	8000524 <RandChar>
	RandChar();
 80005f2:	f7ff ff97 	bl	8000524 <RandChar>
	RandChar();
 80005f6:	f7ff ff95 	bl	8000524 <RandChar>
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	bf00      	nop
 8000604:	08002c84 	.word	0x08002c84

08000608 <UpdateLcd>:

void UpdateLcd(unsigned char *runnerArea, unsigned char jump) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]

  for (uint8_t i = 0; i <= 15; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e00e      	b.n	8000638 <UpdateLcd+0x30>
	  LCDCursorPos(i, 2);
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff2c 	bl	800047c <LCDCursorPos>
	  LCDChar(runnerArea[i]);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fef1 	bl	8000414 <LCDChar>
  for (uint8_t i = 0; i <= 15; i++) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b0f      	cmp	r3, #15
 800063c:	d9ed      	bls.n	800061a <UpdateLcd+0x12>
  }
  LCDCursorPos(1, 1);
 800063e:	2101      	movs	r1, #1
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ff1b 	bl	800047c <LCDCursorPos>
  LCDChar(jump);
 8000646:	78fb      	ldrb	r3, [r7, #3]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fee3 	bl	8000414 <LCDChar>

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <PrintScore>:

void PrintScore(unsigned int score){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  LCDCursorPos(4, 1);
 8000660:	2101      	movs	r1, #1
 8000662:	2004      	movs	r0, #4
 8000664:	f7ff ff0a 	bl	800047c <LCDCursorPos>
  LCDPrintStr((char*)"Score: ");
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <PrintScore+0x2c>)
 800066a:	f7ff fe12 	bl	8000292 <LCDPrintStr>
  LCDCursorPos(11, 1);
 800066e:	2101      	movs	r1, #1
 8000670:	200b      	movs	r0, #11
 8000672:	f7ff ff03 	bl	800047c <LCDCursorPos>
  LCDPrintVal(score);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe22 	bl	80002c0 <LCDPrintVal>

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08002c94 	.word	0x08002c94

08000688 <ShowCrashScreen>:
  runnerArea[0] = BLOCK;
  runnerArea[15] = BLOCK;

}

void ShowCrashScreen(unsigned int score, unsigned int *bestScore){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	LCDCursorPos(4, 1);
 8000692:	2101      	movs	r1, #1
 8000694:	2004      	movs	r0, #4
 8000696:	f7ff fef1 	bl	800047c <LCDCursorPos>
	LCDPrintStr((char*)"Game Over!");
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <ShowCrashScreen+0x68>)
 800069c:	f7ff fdf9 	bl	8000292 <LCDPrintStr>
	HAL_Delay(2500);
 80006a0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80006a4:	f000 fb7e 	bl	8000da4 <HAL_Delay>

	LCDCursorPos(4, 1);
 80006a8:	2101      	movs	r1, #1
 80006aa:	2004      	movs	r0, #4
 80006ac:	f7ff fee6 	bl	800047c <LCDCursorPos>
	LCDPrintStr((char*)"Best: ");
 80006b0:	4810      	ldr	r0, [pc, #64]	; (80006f4 <ShowCrashScreen+0x6c>)
 80006b2:	f7ff fdee 	bl	8000292 <LCDPrintStr>

	LCDCursorPos(10, 1);
 80006b6:	2101      	movs	r1, #1
 80006b8:	200a      	movs	r0, #10
 80006ba:	f7ff fedf 	bl	800047c <LCDCursorPos>
	LCDPrintStr((char*)"      ");
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <ShowCrashScreen+0x70>)
 80006c0:	f7ff fde7 	bl	8000292 <LCDPrintStr>

	LCDCursorPos(10, 1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	200a      	movs	r0, #10
 80006c8:	f7ff fed8 	bl	800047c <LCDCursorPos>
 /* if (EEPROMReadInt(0) <= score) { TODO implementar leitura memória
	EEPROMWriteInt(0, score);
  }
  lcd.print(EEPROMReadInt(0));
 */
   if(score > *bestScore){
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d902      	bls.n	80006dc <ShowCrashScreen+0x54>
	   *bestScore = score;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
   }

   LCDPrintVal(*bestScore);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fded 	bl	80002c0 <LCDPrintVal>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08002c9c 	.word	0x08002c9c
 80006f4:	08002ca8 	.word	0x08002ca8
 80006f8:	08002cb0 	.word	0x08002cb0

080006fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	80fb      	strh	r3, [r7, #6]
#if SIMULATE
  if(GPIO_Pin == GPIO_PIN_5){
	  buttonPressed = true;
  }
#else
  if(GPIO_Pin == GPIO_PIN_8){
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070c:	d102      	bne.n	8000714 <HAL_GPIO_EXTI_Callback+0x18>
  	  buttonPressed = true;
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <HAL_GPIO_EXTI_Callback+0x24>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
  }
#endif

}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200000ac 	.word	0x200000ac

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b08d      	sub	sp, #52	; 0x34
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

   byte runnerArea[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
 800072a:	4b71      	ldr	r3, [pc, #452]	; (80008f0 <main+0x1cc>)
 800072c:	1d3c      	adds	r4, r7, #4
 800072e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   byte jump = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   uint32_t currentMillisOb = 0, jumpTime = 0, previousMillis = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
   unsigned int score = 0, bestScore = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
   static bool freeze_score = false;
   const uint16_t speedOfScroller = 300;
 800074e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000752:	82fb      	strh	r3, [r7, #22]
   const uint16_t jumpLength = 500;
 8000754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000758:	82bb      	strh	r3, [r7, #20]
   uint8_t count = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fabf 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f8d5 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f90f 	bl	8000988 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  InitLCD();
 800076a:	f7ff fd53 	bl	8000214 <InitLCD>
  LCDCursorMode(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fe6e 	bl	8000450 <LCDCursorMode>

  // create a new character
  createChar(DINO, dino); // create dino
 8000774:	495f      	ldr	r1, [pc, #380]	; (80008f4 <main+0x1d0>)
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fea1 	bl	80004be <createChar>
  createChar(CACTUS, cactus); // create cactus
 800077c:	495e      	ldr	r1, [pc, #376]	; (80008f8 <main+0x1d4>)
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fe9d 	bl	80004be <createChar>
  createChar(BIRD, bird); // create bird
 8000784:	495d      	ldr	r1, [pc, #372]	; (80008fc <main+0x1d8>)
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fe99 	bl	80004be <createChar>
  createChar(BLOCK, block); // create block
 800078c:	495c      	ldr	r1, [pc, #368]	; (8000900 <main+0x1dc>)
 800078e:	2003      	movs	r0, #3
 8000790:	f7ff fe95 	bl	80004be <createChar>

  DisplayStartScreen();
 8000794:	f7ff ff06 	bl	80005a4 <DisplayStartScreen>
  HAL_Delay(3000);
 8000798:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800079c:	f000 fb02 	bl	8000da4 <HAL_Delay>
  LCDClear();
 80007a0:	f7ff feb6 	bl	8000510 <LCDClear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	count++;
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	3301      	adds	r3, #1
 80007a8:	77fb      	strb	r3, [r7, #31]
	  	count = count % 15;
 80007aa:	7ffa      	ldrb	r2, [r7, #31]
 80007ac:	4b55      	ldr	r3, [pc, #340]	; (8000904 <main+0x1e0>)
 80007ae:	fba3 1302 	umull	r1, r3, r3, r2
 80007b2:	08d9      	lsrs	r1, r3, #3
 80007b4:	460b      	mov	r3, r1
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	1a5b      	subs	r3, r3, r1
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	77fb      	strb	r3, [r7, #31]
	   	currentMillisOb = HAL_GetTick();
 80007be:	f000 fae7 	bl	8000d90 <HAL_GetTick>
 80007c2:	61b8      	str	r0, [r7, #24]
		if (currentMillisOb - previousMillis >= speedOfScroller)
 80007c4:	69ba      	ldr	r2, [r7, #24]
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d335      	bcc.n	800083c <main+0x118>
		{
			  previousMillis = currentMillisOb;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24

			  switch(count){
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d00c      	beq.n	80007f4 <main+0xd0>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	dc0d      	bgt.n	80007fa <main+0xd6>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d002      	beq.n	80007e8 <main+0xc4>
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d003      	beq.n	80007ee <main+0xca>
 80007e6:	e008      	b.n	80007fa <main+0xd6>
			  	  case CACTUS:
			  		  runnerArea[15] = CACTUS;
 80007e8:	2301      	movs	r3, #1
 80007ea:	74fb      	strb	r3, [r7, #19]
			  		  break;
 80007ec:	e008      	b.n	8000800 <main+0xdc>
			  	  case BIRD:
			  		  runnerArea[15] = BIRD;
 80007ee:	2302      	movs	r3, #2
 80007f0:	74fb      	strb	r3, [r7, #19]
			  		  break;
 80007f2:	e005      	b.n	8000800 <main+0xdc>
			  	  case BLOCK:
			  		  runnerArea[15] = BLOCK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	74fb      	strb	r3, [r7, #19]
			  		  break;
 80007f8:	e002      	b.n	8000800 <main+0xdc>
			  	  default:
			  		  runnerArea[15] = SPACE;
 80007fa:	2320      	movs	r3, #32
 80007fc:	74fb      	strb	r3, [r7, #19]
			  		  break;
 80007fe:	bf00      	nop
			  }
			  for (uint8_t i = 0; i <= 15; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e00d      	b.n	8000822 <main+0xfe>
				runnerArea[i] = runnerArea[i + 1];
 8000806:	7fbb      	ldrb	r3, [r7, #30]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	7fbb      	ldrb	r3, [r7, #30]
 800080c:	3230      	adds	r2, #48	; 0x30
 800080e:	443a      	add	r2, r7
 8000810:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 8000814:	3330      	adds	r3, #48	; 0x30
 8000816:	443b      	add	r3, r7
 8000818:	f803 2c2c 	strb.w	r2, [r3, #-44]
			  for (uint8_t i = 0; i <= 15; i++) {
 800081c:	7fbb      	ldrb	r3, [r7, #30]
 800081e:	3301      	adds	r3, #1
 8000820:	77bb      	strb	r3, [r7, #30]
 8000822:	7fbb      	ldrb	r3, [r7, #30]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d9ee      	bls.n	8000806 <main+0xe2>
			  }
			  if (freeze_score == false) {
 8000828:	4b37      	ldr	r3, [pc, #220]	; (8000908 <main+0x1e4>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <main+0x118>
				score++;
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	3301      	adds	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
			  }
		}

		if(buttonPressed == true)
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <main+0x1e8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d016      	beq.n	8000874 <main+0x150>
		{
			  if ((runnerArea[1] != SPACE) && (runnerArea[1] != CACTUS || runnerArea[1] != BIRD)) {
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	2b20      	cmp	r3, #32
 800084a:	d007      	beq.n	800085c <main+0x138>
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d102      	bne.n	8000858 <main+0x134>
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d001      	beq.n	800085c <main+0x138>
				runnerArea[1] = SPACE;
 8000858:	2320      	movs	r3, #32
 800085a:	717b      	strb	r3, [r7, #5]
			  }
			  jump = DINO;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  freeze_score = true;
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <main+0x1e4>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
			  jumpTime = HAL_GetTick();
 8000868:	f000 fa92 	bl	8000d90 <HAL_GetTick>
 800086c:	62b8      	str	r0, [r7, #40]	; 0x28
			  buttonPressed = false;
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <main+0x1e8>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
#if SIMULATE
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
#endif
		}
		if ((HAL_GetTick() - jumpTime) >= jumpLength)
 8000874:	f000 fa8c 	bl	8000d90 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087c:	1ad2      	subs	r2, r2, r3
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	429a      	cmp	r2, r3
 8000882:	d32a      	bcc.n	80008da <main+0x1b6>
		{
			  if ((runnerArea[1] == SPACE) || (runnerArea[1] == DINO)) {
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	2b20      	cmp	r3, #32
 8000888:	d002      	beq.n	8000890 <main+0x16c>
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d108      	bne.n	80008a2 <main+0x17e>
				runnerArea[1] = DINO;
 8000890:	2300      	movs	r3, #0
 8000892:	717b      	strb	r3, [r7, #5]
				jump = SPACE;
 8000894:	2320      	movs	r3, #32
 8000896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				freeze_score = false;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <main+0x1e4>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e01b      	b.n	80008da <main+0x1b6>
			  }
			  else {
				  buttonPressed = false;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <main+0x1e8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
				  ShowCrashScreen(score, &bestScore);
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	6a38      	ldr	r0, [r7, #32]
 80008ae:	f7ff feeb 	bl	8000688 <ShowCrashScreen>
				  while(buttonPressed == false);// Keep in loop until button is pressed again
 80008b2:	bf00      	nop
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <main+0x1e8>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f083 0301 	eor.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f7      	bne.n	80008b4 <main+0x190>
				  memset(runnerArea, SPACE, sizeof(runnerArea));// clear runner area
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2210      	movs	r2, #16
 80008c8:	2120      	movs	r1, #32
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f95a 	bl	8001b84 <memset>
				  jump = SPACE;
 80008d0:	2320      	movs	r3, #32
 80008d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				  score = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
			  }
		}

		UpdateLcd(runnerArea, jump);
 80008da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe90 	bl	8000608 <UpdateLcd>
		PrintScore(score);
 80008e8:	6a38      	ldr	r0, [r7, #32]
 80008ea:	f7ff feb5 	bl	8000658 <PrintScore>
	  	count++;
 80008ee:	e759      	b.n	80007a4 <main+0x80>
 80008f0:	08002cb8 	.word	0x08002cb8
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000010 	.word	0x20000010
 8000900:	20000018 	.word	0x20000018
 8000904:	88888889 	.word	0x88888889
 8000908:	200000ad 	.word	0x200000ad
 800090c:	200000ac 	.word	0x200000ac

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	; 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f930 	bl	8001b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fd0a 	bl	8001360 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000952:	f000 f871 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 ff78 	bl	8001864 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800097a:	f000 f85d 	bl	8000a38 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3740      	adds	r7, #64	; 0x40
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xa0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

#else

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009d4:	f000 fc94 	bl	8001300 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80009dc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;



  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009f2:	f000 fb09 	bl	8001008 <HAL_GPIO_Init>


  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_GPIO_Init+0xa8>)
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <MX_GPIO_Init+0xac>)
 8000a0c:	f000 fafc 	bl	8001008 <HAL_GPIO_Init>

#endif

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2017      	movs	r0, #23
 8000a16:	f000 fac0 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a1a:	2017      	movs	r0, #23
 8000a1c:	f000 fad9 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	10210000 	.word	0x10210000
 8000a34:	40010800 	.word	0x40010800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f93d 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI9_5_IRQn 0 */
#if SIMULATE
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
#else
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000afa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000afe:	f000 fc17 	bl	8001330 <HAL_GPIO_EXTI_IRQHandler>
#endif

  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
	return 1;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <_kill>:

int _kill(int pid, int sig)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b1e:	f001 f807 	bl	8001b30 <__errno>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2216      	movs	r2, #22
 8000b26:	601a      	str	r2, [r3, #0]
	return -1;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_exit>:

void _exit (int status)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffe7 	bl	8000b14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b46:	e7fe      	b.n	8000b46 <_exit+0x12>

08000b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
	}

return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x12>
	}
	return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:

int _close(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be0:	605a      	str	r2, [r3, #4]
	return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f000 ff70 	bl	8001b30 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20002800 	.word	0x20002800
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	200000b0 	.word	0x200000b0
 8000c84:	200000c8 	.word	0x200000c8

08000c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cba:	f7ff ffe5 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f000 ff3d 	bl	8001b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff fd2f 	bl	8000724 <main>
  bx lr
 8000cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cd0:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 8000cd4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cd8:	200000c8 	.word	0x200000c8

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x28>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x28>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f947 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fea2 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f95f 	bl	8000fee <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f927 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000020 	.word	0x20000020
 8000d64:	20000028 	.word	0x20000028
 8000d68:	20000024 	.word	0x20000024

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	200000b4 	.word	0x200000b4

08000d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	200000b4 	.word	0x200000b4

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff fff0 	bl	8000d90 <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffe0 	bl	8000d90 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000028 	.word	0x20000028

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4906      	ldr	r1, [pc, #24]	; (8000e84 <__NVIC_EnableIRQ+0x34>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff90 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff2d 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff42 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff90 	bl	8000edc <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff35 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e161      	b.n	80012e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8150 	bne.w	80012da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a97      	ldr	r2, [pc, #604]	; (800129c <HAL_GPIO_Init+0x294>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d05e      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001044:	4a95      	ldr	r2, [pc, #596]	; (800129c <HAL_GPIO_Init+0x294>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d875      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800104a:	4a95      	ldr	r2, [pc, #596]	; (80012a0 <HAL_GPIO_Init+0x298>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d058      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001050:	4a93      	ldr	r2, [pc, #588]	; (80012a0 <HAL_GPIO_Init+0x298>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d86f      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001056:	4a93      	ldr	r2, [pc, #588]	; (80012a4 <HAL_GPIO_Init+0x29c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 800105c:	4a91      	ldr	r2, [pc, #580]	; (80012a4 <HAL_GPIO_Init+0x29c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d869      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001062:	4a91      	ldr	r2, [pc, #580]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04c      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001068:	4a8f      	ldr	r2, [pc, #572]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d863      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800106e:	4a8f      	ldr	r2, [pc, #572]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001074:	4a8d      	ldr	r2, [pc, #564]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d85d      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d82a      	bhi.n	80010d4 <HAL_GPIO_Init+0xcc>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d859      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <HAL_GPIO_Init+0x80>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001103 	.word	0x08001103
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010ef 	.word	0x080010ef
 8001094:	08001131 	.word	0x08001131
 8001098:	08001137 	.word	0x08001137
 800109c:	08001137 	.word	0x08001137
 80010a0:	08001137 	.word	0x08001137
 80010a4:	08001137 	.word	0x08001137
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001137 	.word	0x08001137
 80010b0:	08001137 	.word	0x08001137
 80010b4:	08001137 	.word	0x08001137
 80010b8:	08001137 	.word	0x08001137
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001137 	.word	0x08001137
 80010c4:	08001137 	.word	0x08001137
 80010c8:	08001137 	.word	0x08001137
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	4a76      	ldr	r2, [pc, #472]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e029      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e024      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01f      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e01a      	b.n	8001138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x130>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x13a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x14c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x152>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a9 	beq.w	80012da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a45      	ldr	r2, [pc, #276]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_GPIO_Init+0x2b4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1e0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3c      	ldr	r2, [pc, #240]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x2bc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011dc:	2302      	movs	r3, #2
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fa:	492f      	ldr	r1, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	492b      	ldr	r1, [pc, #172]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800122c:	4013      	ands	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4921      	ldr	r1, [pc, #132]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	491d      	ldr	r1, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001254:	4013      	ands	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	4917      	ldr	r1, [pc, #92]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4913      	ldr	r1, [pc, #76]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800127c:	4013      	ands	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01f      	beq.n	80012cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
 8001298:	e01f      	b.n	80012da <HAL_GPIO_Init+0x2d2>
 800129a:	bf00      	nop
 800129c:	10320000 	.word	0x10320000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10220000 	.word	0x10220000
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10120000 	.word	0x10120000
 80012b0:	10110000 	.word	0x10110000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_GPIO_Init+0x2f4>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4909      	ldr	r1, [pc, #36]	; (80012fc <HAL_GPIO_Init+0x2f4>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f47f ae96 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	; 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f9d4 	bl	80006fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e272      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8087 	beq.w	800148e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b04      	cmp	r3, #4
 800138a:	d00c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800138c:	4b8f      	ldr	r3, [pc, #572]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d112      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
 8001398:	4b8c      	ldr	r3, [pc, #560]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4b89      	ldr	r3, [pc, #548]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d06c      	beq.n	800148c <HAL_RCC_OscConfig+0x12c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d168      	bne.n	800148c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e24c      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x76>
 80013c8:	4b80      	ldr	r3, [pc, #512]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a7f      	ldr	r2, [pc, #508]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e02e      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a77      	ldr	r2, [pc, #476]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0xbc>
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a71      	ldr	r2, [pc, #452]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800141c:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6a      	ldr	r2, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a67      	ldr	r2, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fca8 	bl	8000d90 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fca4 	bl	8000d90 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e200      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xe4>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc94 	bl	8000d90 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc90 	bl	8000d90 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1ec      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x10c>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c0      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4939      	ldr	r1, [pc, #228]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc49 	bl	8000d90 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc45 	bl	8000d90 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc28 	bl	8000d90 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc24 	bl	8000d90 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e180      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_RCC_OscConfig+0x274>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fc08 	bl	8000d90 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fc04 	bl	8000d90 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e160      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 faa6 	bl	8001af4 <RCC_Delay>
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_RCC_OscConfig+0x274>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fbee 	bl	8000d90 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	e00f      	b.n	80015d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbea 	bl	8000d90 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e146      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	42420000 	.word	0x42420000
 80015d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e9      	bne.n	80015b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a6 	beq.w	800173e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a87      	ldr	r2, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbab 	bl	8000d90 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fba7 	bl	8000d90 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e103      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x312>
 8001664:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x334>
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a69      	ldr	r2, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a66      	ldr	r2, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x356>
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a60      	ldr	r2, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b58      	ldr	r3, [pc, #352]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb5b 	bl	8000d90 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb57 	bl	8000d90 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0b1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x37e>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb45 	bl	8000d90 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb41 	bl	8000d90 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e09b      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b40      	ldr	r3, [pc, #256]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d061      	beq.n	8001818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d146      	bne.n	80017ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fb15 	bl	8000d90 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fb11 	bl	8000d90 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e06d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4921      	ldr	r1, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a19      	ldr	r1, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	430b      	orrs	r3, r1
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fae5 	bl	8000d90 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fae1 	bl	8000d90 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x46a>
 80017e8:	e035      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff face 	bl	8000d90 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff faca 	bl	8000d90 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e026      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x498>
 8001816:	e01e      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e019      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
 800182c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x500>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa1c 	bl	8000d90 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa18 	bl	8000d90 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f97a 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08002cd8 	.word	0x08002cd8
 8001a30:	20000020 	.word	0x20000020
 8001a34:	20000024 	.word	0x20000024

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a40:	1d3c      	adds	r4, r7, #4
 8001a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a48:	f240 2301 	movw	r3, #513	; 0x201
 8001a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x40>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x46>
 8001a76:	e02b      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7a:	623b      	str	r3, [r7, #32]
      break;
 8001a7c:	e02b      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3328      	adds	r3, #40	; 0x28
 8001a88:	443b      	add	r3, r7
 8001a8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0c5b      	lsrs	r3, r3, #17
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	3328      	adds	r3, #40	; 0x28
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e004      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	623b      	str	r3, [r7, #32]
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad2:	623b      	str	r3, [r7, #32]
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc90      	pop	{r4, r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	08002cc8 	.word	0x08002cc8
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	007a1200 	.word	0x007a1200
 8001af0:	003d0900 	.word	0x003d0900

08001af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <RCC_Delay+0x34>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <RCC_Delay+0x38>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b10:	bf00      	nop
  }
  while (Delay --);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <RCC_Delay+0x1c>
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000020 	.word	0x20000020
 8001b2c:	10624dd3 	.word	0x10624dd3

08001b30 <__errno>:
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <__errno+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000002c 	.word	0x2000002c

08001b3c <__libc_init_array>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	2600      	movs	r6, #0
 8001b40:	4d0c      	ldr	r5, [pc, #48]	; (8001b74 <__libc_init_array+0x38>)
 8001b42:	4c0d      	ldr	r4, [pc, #52]	; (8001b78 <__libc_init_array+0x3c>)
 8001b44:	1b64      	subs	r4, r4, r5
 8001b46:	10a4      	asrs	r4, r4, #2
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d109      	bne.n	8001b60 <__libc_init_array+0x24>
 8001b4c:	f001 f88e 	bl	8002c6c <_init>
 8001b50:	2600      	movs	r6, #0
 8001b52:	4d0a      	ldr	r5, [pc, #40]	; (8001b7c <__libc_init_array+0x40>)
 8001b54:	4c0a      	ldr	r4, [pc, #40]	; (8001b80 <__libc_init_array+0x44>)
 8001b56:	1b64      	subs	r4, r4, r5
 8001b58:	10a4      	asrs	r4, r4, #2
 8001b5a:	42a6      	cmp	r6, r4
 8001b5c:	d105      	bne.n	8001b6a <__libc_init_array+0x2e>
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b64:	4798      	blx	r3
 8001b66:	3601      	adds	r6, #1
 8001b68:	e7ee      	b.n	8001b48 <__libc_init_array+0xc>
 8001b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6e:	4798      	blx	r3
 8001b70:	3601      	adds	r6, #1
 8001b72:	e7f2      	b.n	8001b5a <__libc_init_array+0x1e>
 8001b74:	08002e30 	.word	0x08002e30
 8001b78:	08002e30 	.word	0x08002e30
 8001b7c:	08002e30 	.word	0x08002e30
 8001b80:	08002e34 	.word	0x08002e34

08001b84 <memset>:
 8001b84:	4603      	mov	r3, r0
 8001b86:	4402      	add	r2, r0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <memset+0xa>
 8001b8c:	4770      	bx	lr
 8001b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b92:	e7f9      	b.n	8001b88 <memset+0x4>

08001b94 <srand>:
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <srand+0x44>)
 8001b98:	4604      	mov	r4, r0
 8001b9a:	681d      	ldr	r5, [r3, #0]
 8001b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b9e:	b9b3      	cbnz	r3, 8001bce <srand+0x3a>
 8001ba0:	2018      	movs	r0, #24
 8001ba2:	f000 f893 	bl	8001ccc <malloc>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	63a8      	str	r0, [r5, #56]	; 0x38
 8001baa:	b920      	cbnz	r0, 8001bb6 <srand+0x22>
 8001bac:	2142      	movs	r1, #66	; 0x42
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <srand+0x48>)
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <srand+0x4c>)
 8001bb2:	f000 f85b 	bl	8001c6c <__assert_func>
 8001bb6:	490b      	ldr	r1, [pc, #44]	; (8001be4 <srand+0x50>)
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <srand+0x54>)
 8001bba:	e9c0 1300 	strd	r1, r3, [r0]
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <srand+0x58>)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6083      	str	r3, [r0, #8]
 8001bc4:	230b      	movs	r3, #11
 8001bc6:	8183      	strh	r3, [r0, #12]
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001bd2:	611c      	str	r4, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	2000002c 	.word	0x2000002c
 8001bdc:	08002cec 	.word	0x08002cec
 8001be0:	08002d03 	.word	0x08002d03
 8001be4:	abcd330e 	.word	0xabcd330e
 8001be8:	e66d1234 	.word	0xe66d1234
 8001bec:	0005deec 	.word	0x0005deec

08001bf0 <rand>:
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <rand+0x5c>)
 8001bf2:	b510      	push	{r4, lr}
 8001bf4:	681c      	ldr	r4, [r3, #0]
 8001bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf8:	b9b3      	cbnz	r3, 8001c28 <rand+0x38>
 8001bfa:	2018      	movs	r0, #24
 8001bfc:	f000 f866 	bl	8001ccc <malloc>
 8001c00:	4602      	mov	r2, r0
 8001c02:	63a0      	str	r0, [r4, #56]	; 0x38
 8001c04:	b920      	cbnz	r0, 8001c10 <rand+0x20>
 8001c06:	214e      	movs	r1, #78	; 0x4e
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <rand+0x60>)
 8001c0a:	4812      	ldr	r0, [pc, #72]	; (8001c54 <rand+0x64>)
 8001c0c:	f000 f82e 	bl	8001c6c <__assert_func>
 8001c10:	4911      	ldr	r1, [pc, #68]	; (8001c58 <rand+0x68>)
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <rand+0x6c>)
 8001c14:	e9c0 1300 	strd	r1, r3, [r0]
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <rand+0x70>)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6083      	str	r3, [r0, #8]
 8001c1e:	230b      	movs	r3, #11
 8001c20:	8183      	strh	r3, [r0, #12]
 8001c22:	2001      	movs	r0, #1
 8001c24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001c28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <rand+0x74>)
 8001c2c:	6920      	ldr	r0, [r4, #16]
 8001c2e:	6963      	ldr	r3, [r4, #20]
 8001c30:	4342      	muls	r2, r0
 8001c32:	490d      	ldr	r1, [pc, #52]	; (8001c68 <rand+0x78>)
 8001c34:	fb01 2203 	mla	r2, r1, r3, r2
 8001c38:	fba0 0101 	umull	r0, r1, r0, r1
 8001c3c:	1c43      	adds	r3, r0, #1
 8001c3e:	eb42 0001 	adc.w	r0, r2, r1
 8001c42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001c46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	08002cec 	.word	0x08002cec
 8001c54:	08002d03 	.word	0x08002d03
 8001c58:	abcd330e 	.word	0xabcd330e
 8001c5c:	e66d1234 	.word	0xe66d1234
 8001c60:	0005deec 	.word	0x0005deec
 8001c64:	5851f42d 	.word	0x5851f42d
 8001c68:	4c957f2d 	.word	0x4c957f2d

08001c6c <__assert_func>:
 8001c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c6e:	4614      	mov	r4, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <__assert_func+0x2c>)
 8001c74:	4605      	mov	r5, r0
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d8      	ldr	r0, [r3, #12]
 8001c7a:	b14c      	cbz	r4, 8001c90 <__assert_func+0x24>
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <__assert_func+0x30>)
 8001c7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c82:	9100      	str	r1, [sp, #0]
 8001c84:	462b      	mov	r3, r5
 8001c86:	4906      	ldr	r1, [pc, #24]	; (8001ca0 <__assert_func+0x34>)
 8001c88:	f000 f80e 	bl	8001ca8 <fiprintf>
 8001c8c:	f000 fcc0 	bl	8002610 <abort>
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__assert_func+0x38>)
 8001c92:	461c      	mov	r4, r3
 8001c94:	e7f3      	b.n	8001c7e <__assert_func+0x12>
 8001c96:	bf00      	nop
 8001c98:	2000002c 	.word	0x2000002c
 8001c9c:	08002d5e 	.word	0x08002d5e
 8001ca0:	08002d6b 	.word	0x08002d6b
 8001ca4:	08002d99 	.word	0x08002d99

08001ca8 <fiprintf>:
 8001ca8:	b40e      	push	{r1, r2, r3}
 8001caa:	b503      	push	{r0, r1, lr}
 8001cac:	4601      	mov	r1, r0
 8001cae:	ab03      	add	r3, sp, #12
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <fiprintf+0x20>)
 8001cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cb6:	6800      	ldr	r0, [r0, #0]
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	f000 f913 	bl	8001ee4 <_vfiprintf_r>
 8001cbe:	b002      	add	sp, #8
 8001cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cc4:	b003      	add	sp, #12
 8001cc6:	4770      	bx	lr
 8001cc8:	2000002c 	.word	0x2000002c

08001ccc <malloc>:
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <malloc+0xc>)
 8001cce:	4601      	mov	r1, r0
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f000 b86b 	b.w	8001dac <_malloc_r>
 8001cd6:	bf00      	nop
 8001cd8:	2000002c 	.word	0x2000002c

08001cdc <_free_r>:
 8001cdc:	b538      	push	{r3, r4, r5, lr}
 8001cde:	4605      	mov	r5, r0
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d040      	beq.n	8001d66 <_free_r+0x8a>
 8001ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ce8:	1f0c      	subs	r4, r1, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bfb8      	it	lt
 8001cee:	18e4      	addlt	r4, r4, r3
 8001cf0:	f000 fec0 	bl	8002a74 <__malloc_lock>
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <_free_r+0x8c>)
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	b933      	cbnz	r3, 8001d08 <_free_r+0x2c>
 8001cfa:	6063      	str	r3, [r4, #4]
 8001cfc:	6014      	str	r4, [r2, #0]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d04:	f000 bebc 	b.w	8002a80 <__malloc_unlock>
 8001d08:	42a3      	cmp	r3, r4
 8001d0a:	d908      	bls.n	8001d1e <_free_r+0x42>
 8001d0c:	6820      	ldr	r0, [r4, #0]
 8001d0e:	1821      	adds	r1, r4, r0
 8001d10:	428b      	cmp	r3, r1
 8001d12:	bf01      	itttt	eq
 8001d14:	6819      	ldreq	r1, [r3, #0]
 8001d16:	685b      	ldreq	r3, [r3, #4]
 8001d18:	1809      	addeq	r1, r1, r0
 8001d1a:	6021      	streq	r1, [r4, #0]
 8001d1c:	e7ed      	b.n	8001cfa <_free_r+0x1e>
 8001d1e:	461a      	mov	r2, r3
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	b10b      	cbz	r3, 8001d28 <_free_r+0x4c>
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	d9fa      	bls.n	8001d1e <_free_r+0x42>
 8001d28:	6811      	ldr	r1, [r2, #0]
 8001d2a:	1850      	adds	r0, r2, r1
 8001d2c:	42a0      	cmp	r0, r4
 8001d2e:	d10b      	bne.n	8001d48 <_free_r+0x6c>
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	4401      	add	r1, r0
 8001d34:	1850      	adds	r0, r2, r1
 8001d36:	4283      	cmp	r3, r0
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	d1e0      	bne.n	8001cfe <_free_r+0x22>
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4401      	add	r1, r0
 8001d42:	6011      	str	r1, [r2, #0]
 8001d44:	6053      	str	r3, [r2, #4]
 8001d46:	e7da      	b.n	8001cfe <_free_r+0x22>
 8001d48:	d902      	bls.n	8001d50 <_free_r+0x74>
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	602b      	str	r3, [r5, #0]
 8001d4e:	e7d6      	b.n	8001cfe <_free_r+0x22>
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	1821      	adds	r1, r4, r0
 8001d54:	428b      	cmp	r3, r1
 8001d56:	bf01      	itttt	eq
 8001d58:	6819      	ldreq	r1, [r3, #0]
 8001d5a:	685b      	ldreq	r3, [r3, #4]
 8001d5c:	1809      	addeq	r1, r1, r0
 8001d5e:	6021      	streq	r1, [r4, #0]
 8001d60:	6063      	str	r3, [r4, #4]
 8001d62:	6054      	str	r4, [r2, #4]
 8001d64:	e7cb      	b.n	8001cfe <_free_r+0x22>
 8001d66:	bd38      	pop	{r3, r4, r5, pc}
 8001d68:	200000b8 	.word	0x200000b8

08001d6c <sbrk_aligned>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	4e0e      	ldr	r6, [pc, #56]	; (8001da8 <sbrk_aligned+0x3c>)
 8001d70:	460c      	mov	r4, r1
 8001d72:	6831      	ldr	r1, [r6, #0]
 8001d74:	4605      	mov	r5, r0
 8001d76:	b911      	cbnz	r1, 8001d7e <sbrk_aligned+0x12>
 8001d78:	f000 fb7a 	bl	8002470 <_sbrk_r>
 8001d7c:	6030      	str	r0, [r6, #0]
 8001d7e:	4621      	mov	r1, r4
 8001d80:	4628      	mov	r0, r5
 8001d82:	f000 fb75 	bl	8002470 <_sbrk_r>
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	d00a      	beq.n	8001da0 <sbrk_aligned+0x34>
 8001d8a:	1cc4      	adds	r4, r0, #3
 8001d8c:	f024 0403 	bic.w	r4, r4, #3
 8001d90:	42a0      	cmp	r0, r4
 8001d92:	d007      	beq.n	8001da4 <sbrk_aligned+0x38>
 8001d94:	1a21      	subs	r1, r4, r0
 8001d96:	4628      	mov	r0, r5
 8001d98:	f000 fb6a 	bl	8002470 <_sbrk_r>
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	d101      	bne.n	8001da4 <sbrk_aligned+0x38>
 8001da0:	f04f 34ff 	mov.w	r4, #4294967295
 8001da4:	4620      	mov	r0, r4
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
 8001da8:	200000bc 	.word	0x200000bc

08001dac <_malloc_r>:
 8001dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db0:	1ccd      	adds	r5, r1, #3
 8001db2:	f025 0503 	bic.w	r5, r5, #3
 8001db6:	3508      	adds	r5, #8
 8001db8:	2d0c      	cmp	r5, #12
 8001dba:	bf38      	it	cc
 8001dbc:	250c      	movcc	r5, #12
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	db01      	blt.n	8001dc8 <_malloc_r+0x1c>
 8001dc4:	42a9      	cmp	r1, r5
 8001dc6:	d905      	bls.n	8001dd4 <_malloc_r+0x28>
 8001dc8:	230c      	movs	r3, #12
 8001dca:	2600      	movs	r6, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4630      	mov	r0, r6
 8001dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd4:	4e2e      	ldr	r6, [pc, #184]	; (8001e90 <_malloc_r+0xe4>)
 8001dd6:	f000 fe4d 	bl	8002a74 <__malloc_lock>
 8001dda:	6833      	ldr	r3, [r6, #0]
 8001ddc:	461c      	mov	r4, r3
 8001dde:	bb34      	cbnz	r4, 8001e2e <_malloc_r+0x82>
 8001de0:	4629      	mov	r1, r5
 8001de2:	4638      	mov	r0, r7
 8001de4:	f7ff ffc2 	bl	8001d6c <sbrk_aligned>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	4604      	mov	r4, r0
 8001dec:	d14d      	bne.n	8001e8a <_malloc_r+0xde>
 8001dee:	6834      	ldr	r4, [r6, #0]
 8001df0:	4626      	mov	r6, r4
 8001df2:	2e00      	cmp	r6, #0
 8001df4:	d140      	bne.n	8001e78 <_malloc_r+0xcc>
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	4631      	mov	r1, r6
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	eb04 0803 	add.w	r8, r4, r3
 8001e00:	f000 fb36 	bl	8002470 <_sbrk_r>
 8001e04:	4580      	cmp	r8, r0
 8001e06:	d13a      	bne.n	8001e7e <_malloc_r+0xd2>
 8001e08:	6821      	ldr	r1, [r4, #0]
 8001e0a:	3503      	adds	r5, #3
 8001e0c:	1a6d      	subs	r5, r5, r1
 8001e0e:	f025 0503 	bic.w	r5, r5, #3
 8001e12:	3508      	adds	r5, #8
 8001e14:	2d0c      	cmp	r5, #12
 8001e16:	bf38      	it	cc
 8001e18:	250c      	movcc	r5, #12
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	f7ff ffa5 	bl	8001d6c <sbrk_aligned>
 8001e22:	3001      	adds	r0, #1
 8001e24:	d02b      	beq.n	8001e7e <_malloc_r+0xd2>
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	442b      	add	r3, r5
 8001e2a:	6023      	str	r3, [r4, #0]
 8001e2c:	e00e      	b.n	8001e4c <_malloc_r+0xa0>
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	1b52      	subs	r2, r2, r5
 8001e32:	d41e      	bmi.n	8001e72 <_malloc_r+0xc6>
 8001e34:	2a0b      	cmp	r2, #11
 8001e36:	d916      	bls.n	8001e66 <_malloc_r+0xba>
 8001e38:	1961      	adds	r1, r4, r5
 8001e3a:	42a3      	cmp	r3, r4
 8001e3c:	6025      	str	r5, [r4, #0]
 8001e3e:	bf18      	it	ne
 8001e40:	6059      	strne	r1, [r3, #4]
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	bf08      	it	eq
 8001e46:	6031      	streq	r1, [r6, #0]
 8001e48:	5162      	str	r2, [r4, r5]
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	f104 060b 	add.w	r6, r4, #11
 8001e52:	f000 fe15 	bl	8002a80 <__malloc_unlock>
 8001e56:	f026 0607 	bic.w	r6, r6, #7
 8001e5a:	1d23      	adds	r3, r4, #4
 8001e5c:	1af2      	subs	r2, r6, r3
 8001e5e:	d0b6      	beq.n	8001dce <_malloc_r+0x22>
 8001e60:	1b9b      	subs	r3, r3, r6
 8001e62:	50a3      	str	r3, [r4, r2]
 8001e64:	e7b3      	b.n	8001dce <_malloc_r+0x22>
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	bf0c      	ite	eq
 8001e6c:	6032      	streq	r2, [r6, #0]
 8001e6e:	605a      	strne	r2, [r3, #4]
 8001e70:	e7ec      	b.n	8001e4c <_malloc_r+0xa0>
 8001e72:	4623      	mov	r3, r4
 8001e74:	6864      	ldr	r4, [r4, #4]
 8001e76:	e7b2      	b.n	8001dde <_malloc_r+0x32>
 8001e78:	4634      	mov	r4, r6
 8001e7a:	6876      	ldr	r6, [r6, #4]
 8001e7c:	e7b9      	b.n	8001df2 <_malloc_r+0x46>
 8001e7e:	230c      	movs	r3, #12
 8001e80:	4638      	mov	r0, r7
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	f000 fdfc 	bl	8002a80 <__malloc_unlock>
 8001e88:	e7a1      	b.n	8001dce <_malloc_r+0x22>
 8001e8a:	6025      	str	r5, [r4, #0]
 8001e8c:	e7de      	b.n	8001e4c <_malloc_r+0xa0>
 8001e8e:	bf00      	nop
 8001e90:	200000b8 	.word	0x200000b8

08001e94 <__sfputc_r>:
 8001e94:	6893      	ldr	r3, [r2, #8]
 8001e96:	b410      	push	{r4}
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	6093      	str	r3, [r2, #8]
 8001e9e:	da07      	bge.n	8001eb0 <__sfputc_r+0x1c>
 8001ea0:	6994      	ldr	r4, [r2, #24]
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	db01      	blt.n	8001eaa <__sfputc_r+0x16>
 8001ea6:	290a      	cmp	r1, #10
 8001ea8:	d102      	bne.n	8001eb0 <__sfputc_r+0x1c>
 8001eaa:	bc10      	pop	{r4}
 8001eac:	f000 baf0 	b.w	8002490 <__swbuf_r>
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	1c58      	adds	r0, r3, #1
 8001eb4:	6010      	str	r0, [r2, #0]
 8001eb6:	7019      	strb	r1, [r3, #0]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	bc10      	pop	{r4}
 8001ebc:	4770      	bx	lr

08001ebe <__sfputs_r>:
 8001ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec0:	4606      	mov	r6, r0
 8001ec2:	460f      	mov	r7, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	18d5      	adds	r5, r2, r3
 8001ec8:	42ac      	cmp	r4, r5
 8001eca:	d101      	bne.n	8001ed0 <__sfputs_r+0x12>
 8001ecc:	2000      	movs	r0, #0
 8001ece:	e007      	b.n	8001ee0 <__sfputs_r+0x22>
 8001ed0:	463a      	mov	r2, r7
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ed8:	f7ff ffdc 	bl	8001e94 <__sfputc_r>
 8001edc:	1c43      	adds	r3, r0, #1
 8001ede:	d1f3      	bne.n	8001ec8 <__sfputs_r+0xa>
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ee4 <_vfiprintf_r>:
 8001ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee8:	460d      	mov	r5, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	4698      	mov	r8, r3
 8001eee:	4606      	mov	r6, r0
 8001ef0:	b09d      	sub	sp, #116	; 0x74
 8001ef2:	b118      	cbz	r0, 8001efc <_vfiprintf_r+0x18>
 8001ef4:	6983      	ldr	r3, [r0, #24]
 8001ef6:	b90b      	cbnz	r3, 8001efc <_vfiprintf_r+0x18>
 8001ef8:	f000 fca8 	bl	800284c <__sinit>
 8001efc:	4b89      	ldr	r3, [pc, #548]	; (8002124 <_vfiprintf_r+0x240>)
 8001efe:	429d      	cmp	r5, r3
 8001f00:	d11b      	bne.n	8001f3a <_vfiprintf_r+0x56>
 8001f02:	6875      	ldr	r5, [r6, #4]
 8001f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f06:	07d9      	lsls	r1, r3, #31
 8001f08:	d405      	bmi.n	8001f16 <_vfiprintf_r+0x32>
 8001f0a:	89ab      	ldrh	r3, [r5, #12]
 8001f0c:	059a      	lsls	r2, r3, #22
 8001f0e:	d402      	bmi.n	8001f16 <_vfiprintf_r+0x32>
 8001f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f12:	f000 fd39 	bl	8002988 <__retarget_lock_acquire_recursive>
 8001f16:	89ab      	ldrh	r3, [r5, #12]
 8001f18:	071b      	lsls	r3, r3, #28
 8001f1a:	d501      	bpl.n	8001f20 <_vfiprintf_r+0x3c>
 8001f1c:	692b      	ldr	r3, [r5, #16]
 8001f1e:	b9eb      	cbnz	r3, 8001f5c <_vfiprintf_r+0x78>
 8001f20:	4629      	mov	r1, r5
 8001f22:	4630      	mov	r0, r6
 8001f24:	f000 fb06 	bl	8002534 <__swsetup_r>
 8001f28:	b1c0      	cbz	r0, 8001f5c <_vfiprintf_r+0x78>
 8001f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f2c:	07dc      	lsls	r4, r3, #31
 8001f2e:	d50e      	bpl.n	8001f4e <_vfiprintf_r+0x6a>
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	b01d      	add	sp, #116	; 0x74
 8001f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f3a:	4b7b      	ldr	r3, [pc, #492]	; (8002128 <_vfiprintf_r+0x244>)
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	d101      	bne.n	8001f44 <_vfiprintf_r+0x60>
 8001f40:	68b5      	ldr	r5, [r6, #8]
 8001f42:	e7df      	b.n	8001f04 <_vfiprintf_r+0x20>
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <_vfiprintf_r+0x248>)
 8001f46:	429d      	cmp	r5, r3
 8001f48:	bf08      	it	eq
 8001f4a:	68f5      	ldreq	r5, [r6, #12]
 8001f4c:	e7da      	b.n	8001f04 <_vfiprintf_r+0x20>
 8001f4e:	89ab      	ldrh	r3, [r5, #12]
 8001f50:	0598      	lsls	r0, r3, #22
 8001f52:	d4ed      	bmi.n	8001f30 <_vfiprintf_r+0x4c>
 8001f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f56:	f000 fd18 	bl	800298a <__retarget_lock_release_recursive>
 8001f5a:	e7e9      	b.n	8001f30 <_vfiprintf_r+0x4c>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f60:	2320      	movs	r3, #32
 8001f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f66:	2330      	movs	r3, #48	; 0x30
 8001f68:	f04f 0901 	mov.w	r9, #1
 8001f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002130 <_vfiprintf_r+0x24c>
 8001f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f78:	4623      	mov	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f80:	b10a      	cbz	r2, 8001f86 <_vfiprintf_r+0xa2>
 8001f82:	2a25      	cmp	r2, #37	; 0x25
 8001f84:	d1f9      	bne.n	8001f7a <_vfiprintf_r+0x96>
 8001f86:	ebba 0b04 	subs.w	fp, sl, r4
 8001f8a:	d00b      	beq.n	8001fa4 <_vfiprintf_r+0xc0>
 8001f8c:	465b      	mov	r3, fp
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	4630      	mov	r0, r6
 8001f94:	f7ff ff93 	bl	8001ebe <__sfputs_r>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	f000 80aa 	beq.w	80020f2 <_vfiprintf_r+0x20e>
 8001f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fa0:	445a      	add	r2, fp
 8001fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8001fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a2 	beq.w	80020f2 <_vfiprintf_r+0x20e>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fb8:	f10a 0a01 	add.w	sl, sl, #1
 8001fbc:	9304      	str	r3, [sp, #16]
 8001fbe:	9307      	str	r3, [sp, #28]
 8001fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8001fc6:	4654      	mov	r4, sl
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fce:	4858      	ldr	r0, [pc, #352]	; (8002130 <_vfiprintf_r+0x24c>)
 8001fd0:	f000 fd42 	bl	8002a58 <memchr>
 8001fd4:	9a04      	ldr	r2, [sp, #16]
 8001fd6:	b9d8      	cbnz	r0, 8002010 <_vfiprintf_r+0x12c>
 8001fd8:	06d1      	lsls	r1, r2, #27
 8001fda:	bf44      	itt	mi
 8001fdc:	2320      	movmi	r3, #32
 8001fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fe2:	0713      	lsls	r3, r2, #28
 8001fe4:	bf44      	itt	mi
 8001fe6:	232b      	movmi	r3, #43	; 0x2b
 8001fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fec:	f89a 3000 	ldrb.w	r3, [sl]
 8001ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ff2:	d015      	beq.n	8002020 <_vfiprintf_r+0x13c>
 8001ff4:	4654      	mov	r4, sl
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f04f 0c0a 	mov.w	ip, #10
 8001ffc:	9a07      	ldr	r2, [sp, #28]
 8001ffe:	4621      	mov	r1, r4
 8002000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002004:	3b30      	subs	r3, #48	; 0x30
 8002006:	2b09      	cmp	r3, #9
 8002008:	d94e      	bls.n	80020a8 <_vfiprintf_r+0x1c4>
 800200a:	b1b0      	cbz	r0, 800203a <_vfiprintf_r+0x156>
 800200c:	9207      	str	r2, [sp, #28]
 800200e:	e014      	b.n	800203a <_vfiprintf_r+0x156>
 8002010:	eba0 0308 	sub.w	r3, r0, r8
 8002014:	fa09 f303 	lsl.w	r3, r9, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	46a2      	mov	sl, r4
 800201c:	9304      	str	r3, [sp, #16]
 800201e:	e7d2      	b.n	8001fc6 <_vfiprintf_r+0xe2>
 8002020:	9b03      	ldr	r3, [sp, #12]
 8002022:	1d19      	adds	r1, r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	9103      	str	r1, [sp, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	bfbb      	ittet	lt
 800202c:	425b      	neglt	r3, r3
 800202e:	f042 0202 	orrlt.w	r2, r2, #2
 8002032:	9307      	strge	r3, [sp, #28]
 8002034:	9307      	strlt	r3, [sp, #28]
 8002036:	bfb8      	it	lt
 8002038:	9204      	strlt	r2, [sp, #16]
 800203a:	7823      	ldrb	r3, [r4, #0]
 800203c:	2b2e      	cmp	r3, #46	; 0x2e
 800203e:	d10c      	bne.n	800205a <_vfiprintf_r+0x176>
 8002040:	7863      	ldrb	r3, [r4, #1]
 8002042:	2b2a      	cmp	r3, #42	; 0x2a
 8002044:	d135      	bne.n	80020b2 <_vfiprintf_r+0x1ce>
 8002046:	9b03      	ldr	r3, [sp, #12]
 8002048:	3402      	adds	r4, #2
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9203      	str	r2, [sp, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfb8      	it	lt
 8002054:	f04f 33ff 	movlt.w	r3, #4294967295
 8002058:	9305      	str	r3, [sp, #20]
 800205a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002134 <_vfiprintf_r+0x250>
 800205e:	2203      	movs	r2, #3
 8002060:	4650      	mov	r0, sl
 8002062:	7821      	ldrb	r1, [r4, #0]
 8002064:	f000 fcf8 	bl	8002a58 <memchr>
 8002068:	b140      	cbz	r0, 800207c <_vfiprintf_r+0x198>
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	eba0 000a 	sub.w	r0, r0, sl
 8002070:	fa03 f000 	lsl.w	r0, r3, r0
 8002074:	9b04      	ldr	r3, [sp, #16]
 8002076:	3401      	adds	r4, #1
 8002078:	4303      	orrs	r3, r0
 800207a:	9304      	str	r3, [sp, #16]
 800207c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002080:	2206      	movs	r2, #6
 8002082:	482d      	ldr	r0, [pc, #180]	; (8002138 <_vfiprintf_r+0x254>)
 8002084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002088:	f000 fce6 	bl	8002a58 <memchr>
 800208c:	2800      	cmp	r0, #0
 800208e:	d03f      	beq.n	8002110 <_vfiprintf_r+0x22c>
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <_vfiprintf_r+0x258>)
 8002092:	bb1b      	cbnz	r3, 80020dc <_vfiprintf_r+0x1f8>
 8002094:	9b03      	ldr	r3, [sp, #12]
 8002096:	3307      	adds	r3, #7
 8002098:	f023 0307 	bic.w	r3, r3, #7
 800209c:	3308      	adds	r3, #8
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a2:	443b      	add	r3, r7
 80020a4:	9309      	str	r3, [sp, #36]	; 0x24
 80020a6:	e767      	b.n	8001f78 <_vfiprintf_r+0x94>
 80020a8:	460c      	mov	r4, r1
 80020aa:	2001      	movs	r0, #1
 80020ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80020b0:	e7a5      	b.n	8001ffe <_vfiprintf_r+0x11a>
 80020b2:	2300      	movs	r3, #0
 80020b4:	f04f 0c0a 	mov.w	ip, #10
 80020b8:	4619      	mov	r1, r3
 80020ba:	3401      	adds	r4, #1
 80020bc:	9305      	str	r3, [sp, #20]
 80020be:	4620      	mov	r0, r4
 80020c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020c4:	3a30      	subs	r2, #48	; 0x30
 80020c6:	2a09      	cmp	r2, #9
 80020c8:	d903      	bls.n	80020d2 <_vfiprintf_r+0x1ee>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0c5      	beq.n	800205a <_vfiprintf_r+0x176>
 80020ce:	9105      	str	r1, [sp, #20]
 80020d0:	e7c3      	b.n	800205a <_vfiprintf_r+0x176>
 80020d2:	4604      	mov	r4, r0
 80020d4:	2301      	movs	r3, #1
 80020d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80020da:	e7f0      	b.n	80020be <_vfiprintf_r+0x1da>
 80020dc:	ab03      	add	r3, sp, #12
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	462a      	mov	r2, r5
 80020e2:	4630      	mov	r0, r6
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <_vfiprintf_r+0x25c>)
 80020e6:	a904      	add	r1, sp, #16
 80020e8:	f3af 8000 	nop.w
 80020ec:	4607      	mov	r7, r0
 80020ee:	1c78      	adds	r0, r7, #1
 80020f0:	d1d6      	bne.n	80020a0 <_vfiprintf_r+0x1bc>
 80020f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020f4:	07d9      	lsls	r1, r3, #31
 80020f6:	d405      	bmi.n	8002104 <_vfiprintf_r+0x220>
 80020f8:	89ab      	ldrh	r3, [r5, #12]
 80020fa:	059a      	lsls	r2, r3, #22
 80020fc:	d402      	bmi.n	8002104 <_vfiprintf_r+0x220>
 80020fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002100:	f000 fc43 	bl	800298a <__retarget_lock_release_recursive>
 8002104:	89ab      	ldrh	r3, [r5, #12]
 8002106:	065b      	lsls	r3, r3, #25
 8002108:	f53f af12 	bmi.w	8001f30 <_vfiprintf_r+0x4c>
 800210c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800210e:	e711      	b.n	8001f34 <_vfiprintf_r+0x50>
 8002110:	ab03      	add	r3, sp, #12
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	462a      	mov	r2, r5
 8002116:	4630      	mov	r0, r6
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <_vfiprintf_r+0x25c>)
 800211a:	a904      	add	r1, sp, #16
 800211c:	f000 f882 	bl	8002224 <_printf_i>
 8002120:	e7e4      	b.n	80020ec <_vfiprintf_r+0x208>
 8002122:	bf00      	nop
 8002124:	08002df0 	.word	0x08002df0
 8002128:	08002e10 	.word	0x08002e10
 800212c:	08002dd0 	.word	0x08002dd0
 8002130:	08002d9a 	.word	0x08002d9a
 8002134:	08002da0 	.word	0x08002da0
 8002138:	08002da4 	.word	0x08002da4
 800213c:	00000000 	.word	0x00000000
 8002140:	08001ebf 	.word	0x08001ebf

08002144 <_printf_common>:
 8002144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002148:	4616      	mov	r6, r2
 800214a:	4699      	mov	r9, r3
 800214c:	688a      	ldr	r2, [r1, #8]
 800214e:	690b      	ldr	r3, [r1, #16]
 8002150:	4607      	mov	r7, r0
 8002152:	4293      	cmp	r3, r2
 8002154:	bfb8      	it	lt
 8002156:	4613      	movlt	r3, r2
 8002158:	6033      	str	r3, [r6, #0]
 800215a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800215e:	460c      	mov	r4, r1
 8002160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002164:	b10a      	cbz	r2, 800216a <_printf_common+0x26>
 8002166:	3301      	adds	r3, #1
 8002168:	6033      	str	r3, [r6, #0]
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	0699      	lsls	r1, r3, #26
 800216e:	bf42      	ittt	mi
 8002170:	6833      	ldrmi	r3, [r6, #0]
 8002172:	3302      	addmi	r3, #2
 8002174:	6033      	strmi	r3, [r6, #0]
 8002176:	6825      	ldr	r5, [r4, #0]
 8002178:	f015 0506 	ands.w	r5, r5, #6
 800217c:	d106      	bne.n	800218c <_printf_common+0x48>
 800217e:	f104 0a19 	add.w	sl, r4, #25
 8002182:	68e3      	ldr	r3, [r4, #12]
 8002184:	6832      	ldr	r2, [r6, #0]
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	42ab      	cmp	r3, r5
 800218a:	dc28      	bgt.n	80021de <_printf_common+0x9a>
 800218c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002190:	1e13      	subs	r3, r2, #0
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	bf18      	it	ne
 8002196:	2301      	movne	r3, #1
 8002198:	0692      	lsls	r2, r2, #26
 800219a:	d42d      	bmi.n	80021f8 <_printf_common+0xb4>
 800219c:	4649      	mov	r1, r9
 800219e:	4638      	mov	r0, r7
 80021a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021a4:	47c0      	blx	r8
 80021a6:	3001      	adds	r0, #1
 80021a8:	d020      	beq.n	80021ec <_printf_common+0xa8>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	68e5      	ldr	r5, [r4, #12]
 80021ae:	f003 0306 	and.w	r3, r3, #6
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf18      	it	ne
 80021b6:	2500      	movne	r5, #0
 80021b8:	6832      	ldr	r2, [r6, #0]
 80021ba:	f04f 0600 	mov.w	r6, #0
 80021be:	68a3      	ldr	r3, [r4, #8]
 80021c0:	bf08      	it	eq
 80021c2:	1aad      	subeq	r5, r5, r2
 80021c4:	6922      	ldr	r2, [r4, #16]
 80021c6:	bf08      	it	eq
 80021c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bfc4      	itt	gt
 80021d0:	1a9b      	subgt	r3, r3, r2
 80021d2:	18ed      	addgt	r5, r5, r3
 80021d4:	341a      	adds	r4, #26
 80021d6:	42b5      	cmp	r5, r6
 80021d8:	d11a      	bne.n	8002210 <_printf_common+0xcc>
 80021da:	2000      	movs	r0, #0
 80021dc:	e008      	b.n	80021f0 <_printf_common+0xac>
 80021de:	2301      	movs	r3, #1
 80021e0:	4652      	mov	r2, sl
 80021e2:	4649      	mov	r1, r9
 80021e4:	4638      	mov	r0, r7
 80021e6:	47c0      	blx	r8
 80021e8:	3001      	adds	r0, #1
 80021ea:	d103      	bne.n	80021f4 <_printf_common+0xb0>
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f4:	3501      	adds	r5, #1
 80021f6:	e7c4      	b.n	8002182 <_printf_common+0x3e>
 80021f8:	2030      	movs	r0, #48	; 0x30
 80021fa:	18e1      	adds	r1, r4, r3
 80021fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002206:	4422      	add	r2, r4
 8002208:	3302      	adds	r3, #2
 800220a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800220e:	e7c5      	b.n	800219c <_printf_common+0x58>
 8002210:	2301      	movs	r3, #1
 8002212:	4622      	mov	r2, r4
 8002214:	4649      	mov	r1, r9
 8002216:	4638      	mov	r0, r7
 8002218:	47c0      	blx	r8
 800221a:	3001      	adds	r0, #1
 800221c:	d0e6      	beq.n	80021ec <_printf_common+0xa8>
 800221e:	3601      	adds	r6, #1
 8002220:	e7d9      	b.n	80021d6 <_printf_common+0x92>
	...

08002224 <_printf_i>:
 8002224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002228:	7e0f      	ldrb	r7, [r1, #24]
 800222a:	4691      	mov	r9, r2
 800222c:	2f78      	cmp	r7, #120	; 0x78
 800222e:	4680      	mov	r8, r0
 8002230:	460c      	mov	r4, r1
 8002232:	469a      	mov	sl, r3
 8002234:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800223a:	d807      	bhi.n	800224c <_printf_i+0x28>
 800223c:	2f62      	cmp	r7, #98	; 0x62
 800223e:	d80a      	bhi.n	8002256 <_printf_i+0x32>
 8002240:	2f00      	cmp	r7, #0
 8002242:	f000 80d9 	beq.w	80023f8 <_printf_i+0x1d4>
 8002246:	2f58      	cmp	r7, #88	; 0x58
 8002248:	f000 80a4 	beq.w	8002394 <_printf_i+0x170>
 800224c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002254:	e03a      	b.n	80022cc <_printf_i+0xa8>
 8002256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800225a:	2b15      	cmp	r3, #21
 800225c:	d8f6      	bhi.n	800224c <_printf_i+0x28>
 800225e:	a101      	add	r1, pc, #4	; (adr r1, 8002264 <_printf_i+0x40>)
 8002260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002264:	080022bd 	.word	0x080022bd
 8002268:	080022d1 	.word	0x080022d1
 800226c:	0800224d 	.word	0x0800224d
 8002270:	0800224d 	.word	0x0800224d
 8002274:	0800224d 	.word	0x0800224d
 8002278:	0800224d 	.word	0x0800224d
 800227c:	080022d1 	.word	0x080022d1
 8002280:	0800224d 	.word	0x0800224d
 8002284:	0800224d 	.word	0x0800224d
 8002288:	0800224d 	.word	0x0800224d
 800228c:	0800224d 	.word	0x0800224d
 8002290:	080023df 	.word	0x080023df
 8002294:	08002301 	.word	0x08002301
 8002298:	080023c1 	.word	0x080023c1
 800229c:	0800224d 	.word	0x0800224d
 80022a0:	0800224d 	.word	0x0800224d
 80022a4:	08002401 	.word	0x08002401
 80022a8:	0800224d 	.word	0x0800224d
 80022ac:	08002301 	.word	0x08002301
 80022b0:	0800224d 	.word	0x0800224d
 80022b4:	0800224d 	.word	0x0800224d
 80022b8:	080023c9 	.word	0x080023c9
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	602a      	str	r2, [r5, #0]
 80022c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0a4      	b.n	800241a <_printf_i+0x1f6>
 80022d0:	6820      	ldr	r0, [r4, #0]
 80022d2:	6829      	ldr	r1, [r5, #0]
 80022d4:	0606      	lsls	r6, r0, #24
 80022d6:	f101 0304 	add.w	r3, r1, #4
 80022da:	d50a      	bpl.n	80022f2 <_printf_i+0xce>
 80022dc:	680e      	ldr	r6, [r1, #0]
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	2e00      	cmp	r6, #0
 80022e2:	da03      	bge.n	80022ec <_printf_i+0xc8>
 80022e4:	232d      	movs	r3, #45	; 0x2d
 80022e6:	4276      	negs	r6, r6
 80022e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ec:	230a      	movs	r3, #10
 80022ee:	485e      	ldr	r0, [pc, #376]	; (8002468 <_printf_i+0x244>)
 80022f0:	e019      	b.n	8002326 <_printf_i+0x102>
 80022f2:	680e      	ldr	r6, [r1, #0]
 80022f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022f8:	602b      	str	r3, [r5, #0]
 80022fa:	bf18      	it	ne
 80022fc:	b236      	sxthne	r6, r6
 80022fe:	e7ef      	b.n	80022e0 <_printf_i+0xbc>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	1d19      	adds	r1, r3, #4
 8002306:	6029      	str	r1, [r5, #0]
 8002308:	0601      	lsls	r1, r0, #24
 800230a:	d501      	bpl.n	8002310 <_printf_i+0xec>
 800230c:	681e      	ldr	r6, [r3, #0]
 800230e:	e002      	b.n	8002316 <_printf_i+0xf2>
 8002310:	0646      	lsls	r6, r0, #25
 8002312:	d5fb      	bpl.n	800230c <_printf_i+0xe8>
 8002314:	881e      	ldrh	r6, [r3, #0]
 8002316:	2f6f      	cmp	r7, #111	; 0x6f
 8002318:	bf0c      	ite	eq
 800231a:	2308      	moveq	r3, #8
 800231c:	230a      	movne	r3, #10
 800231e:	4852      	ldr	r0, [pc, #328]	; (8002468 <_printf_i+0x244>)
 8002320:	2100      	movs	r1, #0
 8002322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002326:	6865      	ldr	r5, [r4, #4]
 8002328:	2d00      	cmp	r5, #0
 800232a:	bfa8      	it	ge
 800232c:	6821      	ldrge	r1, [r4, #0]
 800232e:	60a5      	str	r5, [r4, #8]
 8002330:	bfa4      	itt	ge
 8002332:	f021 0104 	bicge.w	r1, r1, #4
 8002336:	6021      	strge	r1, [r4, #0]
 8002338:	b90e      	cbnz	r6, 800233e <_printf_i+0x11a>
 800233a:	2d00      	cmp	r5, #0
 800233c:	d04d      	beq.n	80023da <_printf_i+0x1b6>
 800233e:	4615      	mov	r5, r2
 8002340:	fbb6 f1f3 	udiv	r1, r6, r3
 8002344:	fb03 6711 	mls	r7, r3, r1, r6
 8002348:	5dc7      	ldrb	r7, [r0, r7]
 800234a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800234e:	4637      	mov	r7, r6
 8002350:	42bb      	cmp	r3, r7
 8002352:	460e      	mov	r6, r1
 8002354:	d9f4      	bls.n	8002340 <_printf_i+0x11c>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d10b      	bne.n	8002372 <_printf_i+0x14e>
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	07de      	lsls	r6, r3, #31
 800235e:	d508      	bpl.n	8002372 <_printf_i+0x14e>
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	6861      	ldr	r1, [r4, #4]
 8002364:	4299      	cmp	r1, r3
 8002366:	bfde      	ittt	le
 8002368:	2330      	movle	r3, #48	; 0x30
 800236a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800236e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002372:	1b52      	subs	r2, r2, r5
 8002374:	6122      	str	r2, [r4, #16]
 8002376:	464b      	mov	r3, r9
 8002378:	4621      	mov	r1, r4
 800237a:	4640      	mov	r0, r8
 800237c:	f8cd a000 	str.w	sl, [sp]
 8002380:	aa03      	add	r2, sp, #12
 8002382:	f7ff fedf 	bl	8002144 <_printf_common>
 8002386:	3001      	adds	r0, #1
 8002388:	d14c      	bne.n	8002424 <_printf_i+0x200>
 800238a:	f04f 30ff 	mov.w	r0, #4294967295
 800238e:	b004      	add	sp, #16
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002394:	4834      	ldr	r0, [pc, #208]	; (8002468 <_printf_i+0x244>)
 8002396:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800239a:	6829      	ldr	r1, [r5, #0]
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f851 6b04 	ldr.w	r6, [r1], #4
 80023a2:	6029      	str	r1, [r5, #0]
 80023a4:	061d      	lsls	r5, r3, #24
 80023a6:	d514      	bpl.n	80023d2 <_printf_i+0x1ae>
 80023a8:	07df      	lsls	r7, r3, #31
 80023aa:	bf44      	itt	mi
 80023ac:	f043 0320 	orrmi.w	r3, r3, #32
 80023b0:	6023      	strmi	r3, [r4, #0]
 80023b2:	b91e      	cbnz	r6, 80023bc <_printf_i+0x198>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f023 0320 	bic.w	r3, r3, #32
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	2310      	movs	r3, #16
 80023be:	e7af      	b.n	8002320 <_printf_i+0xfc>
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f043 0320 	orr.w	r3, r3, #32
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	2378      	movs	r3, #120	; 0x78
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <_printf_i+0x248>)
 80023cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023d0:	e7e3      	b.n	800239a <_printf_i+0x176>
 80023d2:	0659      	lsls	r1, r3, #25
 80023d4:	bf48      	it	mi
 80023d6:	b2b6      	uxthmi	r6, r6
 80023d8:	e7e6      	b.n	80023a8 <_printf_i+0x184>
 80023da:	4615      	mov	r5, r2
 80023dc:	e7bb      	b.n	8002356 <_printf_i+0x132>
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	6826      	ldr	r6, [r4, #0]
 80023e2:	1d18      	adds	r0, r3, #4
 80023e4:	6961      	ldr	r1, [r4, #20]
 80023e6:	6028      	str	r0, [r5, #0]
 80023e8:	0635      	lsls	r5, r6, #24
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	d501      	bpl.n	80023f2 <_printf_i+0x1ce>
 80023ee:	6019      	str	r1, [r3, #0]
 80023f0:	e002      	b.n	80023f8 <_printf_i+0x1d4>
 80023f2:	0670      	lsls	r0, r6, #25
 80023f4:	d5fb      	bpl.n	80023ee <_printf_i+0x1ca>
 80023f6:	8019      	strh	r1, [r3, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	4615      	mov	r5, r2
 80023fc:	6123      	str	r3, [r4, #16]
 80023fe:	e7ba      	b.n	8002376 <_printf_i+0x152>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	1d1a      	adds	r2, r3, #4
 8002406:	602a      	str	r2, [r5, #0]
 8002408:	681d      	ldr	r5, [r3, #0]
 800240a:	6862      	ldr	r2, [r4, #4]
 800240c:	4628      	mov	r0, r5
 800240e:	f000 fb23 	bl	8002a58 <memchr>
 8002412:	b108      	cbz	r0, 8002418 <_printf_i+0x1f4>
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	6060      	str	r0, [r4, #4]
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	6123      	str	r3, [r4, #16]
 800241c:	2300      	movs	r3, #0
 800241e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002422:	e7a8      	b.n	8002376 <_printf_i+0x152>
 8002424:	462a      	mov	r2, r5
 8002426:	4649      	mov	r1, r9
 8002428:	4640      	mov	r0, r8
 800242a:	6923      	ldr	r3, [r4, #16]
 800242c:	47d0      	blx	sl
 800242e:	3001      	adds	r0, #1
 8002430:	d0ab      	beq.n	800238a <_printf_i+0x166>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	079b      	lsls	r3, r3, #30
 8002436:	d413      	bmi.n	8002460 <_printf_i+0x23c>
 8002438:	68e0      	ldr	r0, [r4, #12]
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	4298      	cmp	r0, r3
 800243e:	bfb8      	it	lt
 8002440:	4618      	movlt	r0, r3
 8002442:	e7a4      	b.n	800238e <_printf_i+0x16a>
 8002444:	2301      	movs	r3, #1
 8002446:	4632      	mov	r2, r6
 8002448:	4649      	mov	r1, r9
 800244a:	4640      	mov	r0, r8
 800244c:	47d0      	blx	sl
 800244e:	3001      	adds	r0, #1
 8002450:	d09b      	beq.n	800238a <_printf_i+0x166>
 8002452:	3501      	adds	r5, #1
 8002454:	68e3      	ldr	r3, [r4, #12]
 8002456:	9903      	ldr	r1, [sp, #12]
 8002458:	1a5b      	subs	r3, r3, r1
 800245a:	42ab      	cmp	r3, r5
 800245c:	dcf2      	bgt.n	8002444 <_printf_i+0x220>
 800245e:	e7eb      	b.n	8002438 <_printf_i+0x214>
 8002460:	2500      	movs	r5, #0
 8002462:	f104 0619 	add.w	r6, r4, #25
 8002466:	e7f5      	b.n	8002454 <_printf_i+0x230>
 8002468:	08002dab 	.word	0x08002dab
 800246c:	08002dbc 	.word	0x08002dbc

08002470 <_sbrk_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	2300      	movs	r3, #0
 8002474:	4d05      	ldr	r5, [pc, #20]	; (800248c <_sbrk_r+0x1c>)
 8002476:	4604      	mov	r4, r0
 8002478:	4608      	mov	r0, r1
 800247a:	602b      	str	r3, [r5, #0]
 800247c:	f7fe fbce 	bl	8000c1c <_sbrk>
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	d102      	bne.n	800248a <_sbrk_r+0x1a>
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	b103      	cbz	r3, 800248a <_sbrk_r+0x1a>
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	200000c4 	.word	0x200000c4

08002490 <__swbuf_r>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	460e      	mov	r6, r1
 8002494:	4614      	mov	r4, r2
 8002496:	4605      	mov	r5, r0
 8002498:	b118      	cbz	r0, 80024a2 <__swbuf_r+0x12>
 800249a:	6983      	ldr	r3, [r0, #24]
 800249c:	b90b      	cbnz	r3, 80024a2 <__swbuf_r+0x12>
 800249e:	f000 f9d5 	bl	800284c <__sinit>
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <__swbuf_r+0x98>)
 80024a4:	429c      	cmp	r4, r3
 80024a6:	d12b      	bne.n	8002500 <__swbuf_r+0x70>
 80024a8:	686c      	ldr	r4, [r5, #4]
 80024aa:	69a3      	ldr	r3, [r4, #24]
 80024ac:	60a3      	str	r3, [r4, #8]
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	071a      	lsls	r2, r3, #28
 80024b2:	d52f      	bpl.n	8002514 <__swbuf_r+0x84>
 80024b4:	6923      	ldr	r3, [r4, #16]
 80024b6:	b36b      	cbz	r3, 8002514 <__swbuf_r+0x84>
 80024b8:	6923      	ldr	r3, [r4, #16]
 80024ba:	6820      	ldr	r0, [r4, #0]
 80024bc:	b2f6      	uxtb	r6, r6
 80024be:	1ac0      	subs	r0, r0, r3
 80024c0:	6963      	ldr	r3, [r4, #20]
 80024c2:	4637      	mov	r7, r6
 80024c4:	4283      	cmp	r3, r0
 80024c6:	dc04      	bgt.n	80024d2 <__swbuf_r+0x42>
 80024c8:	4621      	mov	r1, r4
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 f92a 	bl	8002724 <_fflush_r>
 80024d0:	bb30      	cbnz	r0, 8002520 <__swbuf_r+0x90>
 80024d2:	68a3      	ldr	r3, [r4, #8]
 80024d4:	3001      	adds	r0, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60a3      	str	r3, [r4, #8]
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	6022      	str	r2, [r4, #0]
 80024e0:	701e      	strb	r6, [r3, #0]
 80024e2:	6963      	ldr	r3, [r4, #20]
 80024e4:	4283      	cmp	r3, r0
 80024e6:	d004      	beq.n	80024f2 <__swbuf_r+0x62>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	07db      	lsls	r3, r3, #31
 80024ec:	d506      	bpl.n	80024fc <__swbuf_r+0x6c>
 80024ee:	2e0a      	cmp	r6, #10
 80024f0:	d104      	bne.n	80024fc <__swbuf_r+0x6c>
 80024f2:	4621      	mov	r1, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f915 	bl	8002724 <_fflush_r>
 80024fa:	b988      	cbnz	r0, 8002520 <__swbuf_r+0x90>
 80024fc:	4638      	mov	r0, r7
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <__swbuf_r+0x9c>)
 8002502:	429c      	cmp	r4, r3
 8002504:	d101      	bne.n	800250a <__swbuf_r+0x7a>
 8002506:	68ac      	ldr	r4, [r5, #8]
 8002508:	e7cf      	b.n	80024aa <__swbuf_r+0x1a>
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <__swbuf_r+0xa0>)
 800250c:	429c      	cmp	r4, r3
 800250e:	bf08      	it	eq
 8002510:	68ec      	ldreq	r4, [r5, #12]
 8002512:	e7ca      	b.n	80024aa <__swbuf_r+0x1a>
 8002514:	4621      	mov	r1, r4
 8002516:	4628      	mov	r0, r5
 8002518:	f000 f80c 	bl	8002534 <__swsetup_r>
 800251c:	2800      	cmp	r0, #0
 800251e:	d0cb      	beq.n	80024b8 <__swbuf_r+0x28>
 8002520:	f04f 37ff 	mov.w	r7, #4294967295
 8002524:	e7ea      	b.n	80024fc <__swbuf_r+0x6c>
 8002526:	bf00      	nop
 8002528:	08002df0 	.word	0x08002df0
 800252c:	08002e10 	.word	0x08002e10
 8002530:	08002dd0 	.word	0x08002dd0

08002534 <__swsetup_r>:
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <__swsetup_r+0xcc>)
 8002536:	b570      	push	{r4, r5, r6, lr}
 8002538:	681d      	ldr	r5, [r3, #0]
 800253a:	4606      	mov	r6, r0
 800253c:	460c      	mov	r4, r1
 800253e:	b125      	cbz	r5, 800254a <__swsetup_r+0x16>
 8002540:	69ab      	ldr	r3, [r5, #24]
 8002542:	b913      	cbnz	r3, 800254a <__swsetup_r+0x16>
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f981 	bl	800284c <__sinit>
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <__swsetup_r+0xd0>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d10f      	bne.n	8002570 <__swsetup_r+0x3c>
 8002550:	686c      	ldr	r4, [r5, #4]
 8002552:	89a3      	ldrh	r3, [r4, #12]
 8002554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002558:	0719      	lsls	r1, r3, #28
 800255a:	d42c      	bmi.n	80025b6 <__swsetup_r+0x82>
 800255c:	06dd      	lsls	r5, r3, #27
 800255e:	d411      	bmi.n	8002584 <__swsetup_r+0x50>
 8002560:	2309      	movs	r3, #9
 8002562:	6033      	str	r3, [r6, #0]
 8002564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	81a3      	strh	r3, [r4, #12]
 800256e:	e03e      	b.n	80025ee <__swsetup_r+0xba>
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <__swsetup_r+0xd4>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d101      	bne.n	800257a <__swsetup_r+0x46>
 8002576:	68ac      	ldr	r4, [r5, #8]
 8002578:	e7eb      	b.n	8002552 <__swsetup_r+0x1e>
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <__swsetup_r+0xd8>)
 800257c:	429c      	cmp	r4, r3
 800257e:	bf08      	it	eq
 8002580:	68ec      	ldreq	r4, [r5, #12]
 8002582:	e7e6      	b.n	8002552 <__swsetup_r+0x1e>
 8002584:	0758      	lsls	r0, r3, #29
 8002586:	d512      	bpl.n	80025ae <__swsetup_r+0x7a>
 8002588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800258a:	b141      	cbz	r1, 800259e <__swsetup_r+0x6a>
 800258c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002590:	4299      	cmp	r1, r3
 8002592:	d002      	beq.n	800259a <__swsetup_r+0x66>
 8002594:	4630      	mov	r0, r6
 8002596:	f7ff fba1 	bl	8001cdc <_free_r>
 800259a:	2300      	movs	r3, #0
 800259c:	6363      	str	r3, [r4, #52]	; 0x34
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	6063      	str	r3, [r4, #4]
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	b94b      	cbnz	r3, 80025ce <__swsetup_r+0x9a>
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	d003      	beq.n	80025ce <__swsetup_r+0x9a>
 80025c6:	4621      	mov	r1, r4
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 fa05 	bl	80029d8 <__smakebuf_r>
 80025ce:	89a0      	ldrh	r0, [r4, #12]
 80025d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025d4:	f010 0301 	ands.w	r3, r0, #1
 80025d8:	d00a      	beq.n	80025f0 <__swsetup_r+0xbc>
 80025da:	2300      	movs	r3, #0
 80025dc:	60a3      	str	r3, [r4, #8]
 80025de:	6963      	ldr	r3, [r4, #20]
 80025e0:	425b      	negs	r3, r3
 80025e2:	61a3      	str	r3, [r4, #24]
 80025e4:	6923      	ldr	r3, [r4, #16]
 80025e6:	b943      	cbnz	r3, 80025fa <__swsetup_r+0xc6>
 80025e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025ec:	d1ba      	bne.n	8002564 <__swsetup_r+0x30>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	0781      	lsls	r1, r0, #30
 80025f2:	bf58      	it	pl
 80025f4:	6963      	ldrpl	r3, [r4, #20]
 80025f6:	60a3      	str	r3, [r4, #8]
 80025f8:	e7f4      	b.n	80025e4 <__swsetup_r+0xb0>
 80025fa:	2000      	movs	r0, #0
 80025fc:	e7f7      	b.n	80025ee <__swsetup_r+0xba>
 80025fe:	bf00      	nop
 8002600:	2000002c 	.word	0x2000002c
 8002604:	08002df0 	.word	0x08002df0
 8002608:	08002e10 	.word	0x08002e10
 800260c:	08002dd0 	.word	0x08002dd0

08002610 <abort>:
 8002610:	2006      	movs	r0, #6
 8002612:	b508      	push	{r3, lr}
 8002614:	f000 fa62 	bl	8002adc <raise>
 8002618:	2001      	movs	r0, #1
 800261a:	f7fe fa8b 	bl	8000b34 <_exit>
	...

08002620 <__sflush_r>:
 8002620:	898a      	ldrh	r2, [r1, #12]
 8002622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002624:	4605      	mov	r5, r0
 8002626:	0710      	lsls	r0, r2, #28
 8002628:	460c      	mov	r4, r1
 800262a:	d457      	bmi.n	80026dc <__sflush_r+0xbc>
 800262c:	684b      	ldr	r3, [r1, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	dc04      	bgt.n	800263c <__sflush_r+0x1c>
 8002632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	dc01      	bgt.n	800263c <__sflush_r+0x1c>
 8002638:	2000      	movs	r0, #0
 800263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800263c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800263e:	2e00      	cmp	r6, #0
 8002640:	d0fa      	beq.n	8002638 <__sflush_r+0x18>
 8002642:	2300      	movs	r3, #0
 8002644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002648:	682f      	ldr	r7, [r5, #0]
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	d032      	beq.n	80026b4 <__sflush_r+0x94>
 800264e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	075a      	lsls	r2, r3, #29
 8002654:	d505      	bpl.n	8002662 <__sflush_r+0x42>
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	1ac0      	subs	r0, r0, r3
 800265a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800265c:	b10b      	cbz	r3, 8002662 <__sflush_r+0x42>
 800265e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002660:	1ac0      	subs	r0, r0, r3
 8002662:	2300      	movs	r3, #0
 8002664:	4602      	mov	r2, r0
 8002666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002668:	4628      	mov	r0, r5
 800266a:	6a21      	ldr	r1, [r4, #32]
 800266c:	47b0      	blx	r6
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	d106      	bne.n	8002682 <__sflush_r+0x62>
 8002674:	6829      	ldr	r1, [r5, #0]
 8002676:	291d      	cmp	r1, #29
 8002678:	d82c      	bhi.n	80026d4 <__sflush_r+0xb4>
 800267a:	4a29      	ldr	r2, [pc, #164]	; (8002720 <__sflush_r+0x100>)
 800267c:	40ca      	lsrs	r2, r1
 800267e:	07d6      	lsls	r6, r2, #31
 8002680:	d528      	bpl.n	80026d4 <__sflush_r+0xb4>
 8002682:	2200      	movs	r2, #0
 8002684:	6062      	str	r2, [r4, #4]
 8002686:	6922      	ldr	r2, [r4, #16]
 8002688:	04d9      	lsls	r1, r3, #19
 800268a:	6022      	str	r2, [r4, #0]
 800268c:	d504      	bpl.n	8002698 <__sflush_r+0x78>
 800268e:	1c42      	adds	r2, r0, #1
 8002690:	d101      	bne.n	8002696 <__sflush_r+0x76>
 8002692:	682b      	ldr	r3, [r5, #0]
 8002694:	b903      	cbnz	r3, 8002698 <__sflush_r+0x78>
 8002696:	6560      	str	r0, [r4, #84]	; 0x54
 8002698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800269a:	602f      	str	r7, [r5, #0]
 800269c:	2900      	cmp	r1, #0
 800269e:	d0cb      	beq.n	8002638 <__sflush_r+0x18>
 80026a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d002      	beq.n	80026ae <__sflush_r+0x8e>
 80026a8:	4628      	mov	r0, r5
 80026aa:	f7ff fb17 	bl	8001cdc <_free_r>
 80026ae:	2000      	movs	r0, #0
 80026b0:	6360      	str	r0, [r4, #52]	; 0x34
 80026b2:	e7c2      	b.n	800263a <__sflush_r+0x1a>
 80026b4:	6a21      	ldr	r1, [r4, #32]
 80026b6:	2301      	movs	r3, #1
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b0      	blx	r6
 80026bc:	1c41      	adds	r1, r0, #1
 80026be:	d1c7      	bne.n	8002650 <__sflush_r+0x30>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0c4      	beq.n	8002650 <__sflush_r+0x30>
 80026c6:	2b1d      	cmp	r3, #29
 80026c8:	d001      	beq.n	80026ce <__sflush_r+0xae>
 80026ca:	2b16      	cmp	r3, #22
 80026cc:	d101      	bne.n	80026d2 <__sflush_r+0xb2>
 80026ce:	602f      	str	r7, [r5, #0]
 80026d0:	e7b2      	b.n	8002638 <__sflush_r+0x18>
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	e7ae      	b.n	800263a <__sflush_r+0x1a>
 80026dc:	690f      	ldr	r7, [r1, #16]
 80026de:	2f00      	cmp	r7, #0
 80026e0:	d0aa      	beq.n	8002638 <__sflush_r+0x18>
 80026e2:	0793      	lsls	r3, r2, #30
 80026e4:	bf18      	it	ne
 80026e6:	2300      	movne	r3, #0
 80026e8:	680e      	ldr	r6, [r1, #0]
 80026ea:	bf08      	it	eq
 80026ec:	694b      	ldreq	r3, [r1, #20]
 80026ee:	1bf6      	subs	r6, r6, r7
 80026f0:	600f      	str	r7, [r1, #0]
 80026f2:	608b      	str	r3, [r1, #8]
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	dd9f      	ble.n	8002638 <__sflush_r+0x18>
 80026f8:	4633      	mov	r3, r6
 80026fa:	463a      	mov	r2, r7
 80026fc:	4628      	mov	r0, r5
 80026fe:	6a21      	ldr	r1, [r4, #32]
 8002700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002704:	47e0      	blx	ip
 8002706:	2800      	cmp	r0, #0
 8002708:	dc06      	bgt.n	8002718 <__sflush_r+0xf8>
 800270a:	89a3      	ldrh	r3, [r4, #12]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002714:	81a3      	strh	r3, [r4, #12]
 8002716:	e790      	b.n	800263a <__sflush_r+0x1a>
 8002718:	4407      	add	r7, r0
 800271a:	1a36      	subs	r6, r6, r0
 800271c:	e7ea      	b.n	80026f4 <__sflush_r+0xd4>
 800271e:	bf00      	nop
 8002720:	20400001 	.word	0x20400001

08002724 <_fflush_r>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	690b      	ldr	r3, [r1, #16]
 8002728:	4605      	mov	r5, r0
 800272a:	460c      	mov	r4, r1
 800272c:	b913      	cbnz	r3, 8002734 <_fflush_r+0x10>
 800272e:	2500      	movs	r5, #0
 8002730:	4628      	mov	r0, r5
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	b118      	cbz	r0, 800273e <_fflush_r+0x1a>
 8002736:	6983      	ldr	r3, [r0, #24]
 8002738:	b90b      	cbnz	r3, 800273e <_fflush_r+0x1a>
 800273a:	f000 f887 	bl	800284c <__sinit>
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <_fflush_r+0x6c>)
 8002740:	429c      	cmp	r4, r3
 8002742:	d11b      	bne.n	800277c <_fflush_r+0x58>
 8002744:	686c      	ldr	r4, [r5, #4]
 8002746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ef      	beq.n	800272e <_fflush_r+0xa>
 800274e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002750:	07d0      	lsls	r0, r2, #31
 8002752:	d404      	bmi.n	800275e <_fflush_r+0x3a>
 8002754:	0599      	lsls	r1, r3, #22
 8002756:	d402      	bmi.n	800275e <_fflush_r+0x3a>
 8002758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800275a:	f000 f915 	bl	8002988 <__retarget_lock_acquire_recursive>
 800275e:	4628      	mov	r0, r5
 8002760:	4621      	mov	r1, r4
 8002762:	f7ff ff5d 	bl	8002620 <__sflush_r>
 8002766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002768:	4605      	mov	r5, r0
 800276a:	07da      	lsls	r2, r3, #31
 800276c:	d4e0      	bmi.n	8002730 <_fflush_r+0xc>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	059b      	lsls	r3, r3, #22
 8002772:	d4dd      	bmi.n	8002730 <_fflush_r+0xc>
 8002774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002776:	f000 f908 	bl	800298a <__retarget_lock_release_recursive>
 800277a:	e7d9      	b.n	8002730 <_fflush_r+0xc>
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <_fflush_r+0x70>)
 800277e:	429c      	cmp	r4, r3
 8002780:	d101      	bne.n	8002786 <_fflush_r+0x62>
 8002782:	68ac      	ldr	r4, [r5, #8]
 8002784:	e7df      	b.n	8002746 <_fflush_r+0x22>
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <_fflush_r+0x74>)
 8002788:	429c      	cmp	r4, r3
 800278a:	bf08      	it	eq
 800278c:	68ec      	ldreq	r4, [r5, #12]
 800278e:	e7da      	b.n	8002746 <_fflush_r+0x22>
 8002790:	08002df0 	.word	0x08002df0
 8002794:	08002e10 	.word	0x08002e10
 8002798:	08002dd0 	.word	0x08002dd0

0800279c <std>:
 800279c:	2300      	movs	r3, #0
 800279e:	b510      	push	{r4, lr}
 80027a0:	4604      	mov	r4, r0
 80027a2:	e9c0 3300 	strd	r3, r3, [r0]
 80027a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027aa:	6083      	str	r3, [r0, #8]
 80027ac:	8181      	strh	r1, [r0, #12]
 80027ae:	6643      	str	r3, [r0, #100]	; 0x64
 80027b0:	81c2      	strh	r2, [r0, #14]
 80027b2:	6183      	str	r3, [r0, #24]
 80027b4:	4619      	mov	r1, r3
 80027b6:	2208      	movs	r2, #8
 80027b8:	305c      	adds	r0, #92	; 0x5c
 80027ba:	f7ff f9e3 	bl	8001b84 <memset>
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <std+0x38>)
 80027c0:	6224      	str	r4, [r4, #32]
 80027c2:	6263      	str	r3, [r4, #36]	; 0x24
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <std+0x3c>)
 80027c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <std+0x40>)
 80027ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <std+0x44>)
 80027ce:	6323      	str	r3, [r4, #48]	; 0x30
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	bf00      	nop
 80027d4:	08002b15 	.word	0x08002b15
 80027d8:	08002b37 	.word	0x08002b37
 80027dc:	08002b6f 	.word	0x08002b6f
 80027e0:	08002b93 	.word	0x08002b93

080027e4 <_cleanup_r>:
 80027e4:	4901      	ldr	r1, [pc, #4]	; (80027ec <_cleanup_r+0x8>)
 80027e6:	f000 b8af 	b.w	8002948 <_fwalk_reent>
 80027ea:	bf00      	nop
 80027ec:	08002725 	.word	0x08002725

080027f0 <__sfmoreglue>:
 80027f0:	2268      	movs	r2, #104	; 0x68
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	1e4d      	subs	r5, r1, #1
 80027f6:	4355      	muls	r5, r2
 80027f8:	460e      	mov	r6, r1
 80027fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027fe:	f7ff fad5 	bl	8001dac <_malloc_r>
 8002802:	4604      	mov	r4, r0
 8002804:	b140      	cbz	r0, 8002818 <__sfmoreglue+0x28>
 8002806:	2100      	movs	r1, #0
 8002808:	e9c0 1600 	strd	r1, r6, [r0]
 800280c:	300c      	adds	r0, #12
 800280e:	60a0      	str	r0, [r4, #8]
 8002810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002814:	f7ff f9b6 	bl	8001b84 <memset>
 8002818:	4620      	mov	r0, r4
 800281a:	bd70      	pop	{r4, r5, r6, pc}

0800281c <__sfp_lock_acquire>:
 800281c:	4801      	ldr	r0, [pc, #4]	; (8002824 <__sfp_lock_acquire+0x8>)
 800281e:	f000 b8b3 	b.w	8002988 <__retarget_lock_acquire_recursive>
 8002822:	bf00      	nop
 8002824:	200000c1 	.word	0x200000c1

08002828 <__sfp_lock_release>:
 8002828:	4801      	ldr	r0, [pc, #4]	; (8002830 <__sfp_lock_release+0x8>)
 800282a:	f000 b8ae 	b.w	800298a <__retarget_lock_release_recursive>
 800282e:	bf00      	nop
 8002830:	200000c1 	.word	0x200000c1

08002834 <__sinit_lock_acquire>:
 8002834:	4801      	ldr	r0, [pc, #4]	; (800283c <__sinit_lock_acquire+0x8>)
 8002836:	f000 b8a7 	b.w	8002988 <__retarget_lock_acquire_recursive>
 800283a:	bf00      	nop
 800283c:	200000c2 	.word	0x200000c2

08002840 <__sinit_lock_release>:
 8002840:	4801      	ldr	r0, [pc, #4]	; (8002848 <__sinit_lock_release+0x8>)
 8002842:	f000 b8a2 	b.w	800298a <__retarget_lock_release_recursive>
 8002846:	bf00      	nop
 8002848:	200000c2 	.word	0x200000c2

0800284c <__sinit>:
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
 8002850:	f7ff fff0 	bl	8002834 <__sinit_lock_acquire>
 8002854:	69a3      	ldr	r3, [r4, #24]
 8002856:	b11b      	cbz	r3, 8002860 <__sinit+0x14>
 8002858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800285c:	f7ff bff0 	b.w	8002840 <__sinit_lock_release>
 8002860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002864:	6523      	str	r3, [r4, #80]	; 0x50
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <__sinit+0x68>)
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <__sinit+0x6c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	62a2      	str	r2, [r4, #40]	; 0x28
 800286e:	42a3      	cmp	r3, r4
 8002870:	bf08      	it	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	4620      	mov	r0, r4
 8002876:	bf08      	it	eq
 8002878:	61a3      	streq	r3, [r4, #24]
 800287a:	f000 f81f 	bl	80028bc <__sfp>
 800287e:	6060      	str	r0, [r4, #4]
 8002880:	4620      	mov	r0, r4
 8002882:	f000 f81b 	bl	80028bc <__sfp>
 8002886:	60a0      	str	r0, [r4, #8]
 8002888:	4620      	mov	r0, r4
 800288a:	f000 f817 	bl	80028bc <__sfp>
 800288e:	2200      	movs	r2, #0
 8002890:	2104      	movs	r1, #4
 8002892:	60e0      	str	r0, [r4, #12]
 8002894:	6860      	ldr	r0, [r4, #4]
 8002896:	f7ff ff81 	bl	800279c <std>
 800289a:	2201      	movs	r2, #1
 800289c:	2109      	movs	r1, #9
 800289e:	68a0      	ldr	r0, [r4, #8]
 80028a0:	f7ff ff7c 	bl	800279c <std>
 80028a4:	2202      	movs	r2, #2
 80028a6:	2112      	movs	r1, #18
 80028a8:	68e0      	ldr	r0, [r4, #12]
 80028aa:	f7ff ff77 	bl	800279c <std>
 80028ae:	2301      	movs	r3, #1
 80028b0:	61a3      	str	r3, [r4, #24]
 80028b2:	e7d1      	b.n	8002858 <__sinit+0xc>
 80028b4:	08002ce8 	.word	0x08002ce8
 80028b8:	080027e5 	.word	0x080027e5

080028bc <__sfp>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	4607      	mov	r7, r0
 80028c0:	f7ff ffac 	bl	800281c <__sfp_lock_acquire>
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <__sfp+0x84>)
 80028c6:	681e      	ldr	r6, [r3, #0]
 80028c8:	69b3      	ldr	r3, [r6, #24]
 80028ca:	b913      	cbnz	r3, 80028d2 <__sfp+0x16>
 80028cc:	4630      	mov	r0, r6
 80028ce:	f7ff ffbd 	bl	800284c <__sinit>
 80028d2:	3648      	adds	r6, #72	; 0x48
 80028d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028d8:	3b01      	subs	r3, #1
 80028da:	d503      	bpl.n	80028e4 <__sfp+0x28>
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	b30b      	cbz	r3, 8002924 <__sfp+0x68>
 80028e0:	6836      	ldr	r6, [r6, #0]
 80028e2:	e7f7      	b.n	80028d4 <__sfp+0x18>
 80028e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028e8:	b9d5      	cbnz	r5, 8002920 <__sfp+0x64>
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <__sfp+0x88>)
 80028ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028f0:	60e3      	str	r3, [r4, #12]
 80028f2:	6665      	str	r5, [r4, #100]	; 0x64
 80028f4:	f000 f847 	bl	8002986 <__retarget_lock_init_recursive>
 80028f8:	f7ff ff96 	bl	8002828 <__sfp_lock_release>
 80028fc:	2208      	movs	r2, #8
 80028fe:	4629      	mov	r1, r5
 8002900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002908:	6025      	str	r5, [r4, #0]
 800290a:	61a5      	str	r5, [r4, #24]
 800290c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002910:	f7ff f938 	bl	8001b84 <memset>
 8002914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800291c:	4620      	mov	r0, r4
 800291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002920:	3468      	adds	r4, #104	; 0x68
 8002922:	e7d9      	b.n	80028d8 <__sfp+0x1c>
 8002924:	2104      	movs	r1, #4
 8002926:	4638      	mov	r0, r7
 8002928:	f7ff ff62 	bl	80027f0 <__sfmoreglue>
 800292c:	4604      	mov	r4, r0
 800292e:	6030      	str	r0, [r6, #0]
 8002930:	2800      	cmp	r0, #0
 8002932:	d1d5      	bne.n	80028e0 <__sfp+0x24>
 8002934:	f7ff ff78 	bl	8002828 <__sfp_lock_release>
 8002938:	230c      	movs	r3, #12
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	e7ee      	b.n	800291c <__sfp+0x60>
 800293e:	bf00      	nop
 8002940:	08002ce8 	.word	0x08002ce8
 8002944:	ffff0001 	.word	0xffff0001

08002948 <_fwalk_reent>:
 8002948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800294c:	4606      	mov	r6, r0
 800294e:	4688      	mov	r8, r1
 8002950:	2700      	movs	r7, #0
 8002952:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800295a:	f1b9 0901 	subs.w	r9, r9, #1
 800295e:	d505      	bpl.n	800296c <_fwalk_reent+0x24>
 8002960:	6824      	ldr	r4, [r4, #0]
 8002962:	2c00      	cmp	r4, #0
 8002964:	d1f7      	bne.n	8002956 <_fwalk_reent+0xe>
 8002966:	4638      	mov	r0, r7
 8002968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800296c:	89ab      	ldrh	r3, [r5, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d907      	bls.n	8002982 <_fwalk_reent+0x3a>
 8002972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002976:	3301      	adds	r3, #1
 8002978:	d003      	beq.n	8002982 <_fwalk_reent+0x3a>
 800297a:	4629      	mov	r1, r5
 800297c:	4630      	mov	r0, r6
 800297e:	47c0      	blx	r8
 8002980:	4307      	orrs	r7, r0
 8002982:	3568      	adds	r5, #104	; 0x68
 8002984:	e7e9      	b.n	800295a <_fwalk_reent+0x12>

08002986 <__retarget_lock_init_recursive>:
 8002986:	4770      	bx	lr

08002988 <__retarget_lock_acquire_recursive>:
 8002988:	4770      	bx	lr

0800298a <__retarget_lock_release_recursive>:
 800298a:	4770      	bx	lr

0800298c <__swhatbuf_r>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	460e      	mov	r6, r1
 8002990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002994:	4614      	mov	r4, r2
 8002996:	2900      	cmp	r1, #0
 8002998:	461d      	mov	r5, r3
 800299a:	b096      	sub	sp, #88	; 0x58
 800299c:	da08      	bge.n	80029b0 <__swhatbuf_r+0x24>
 800299e:	2200      	movs	r2, #0
 80029a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80029a4:	602a      	str	r2, [r5, #0]
 80029a6:	061a      	lsls	r2, r3, #24
 80029a8:	d410      	bmi.n	80029cc <__swhatbuf_r+0x40>
 80029aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ae:	e00e      	b.n	80029ce <__swhatbuf_r+0x42>
 80029b0:	466a      	mov	r2, sp
 80029b2:	f000 f915 	bl	8002be0 <_fstat_r>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	dbf1      	blt.n	800299e <__swhatbuf_r+0x12>
 80029ba:	9a01      	ldr	r2, [sp, #4]
 80029bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029c4:	425a      	negs	r2, r3
 80029c6:	415a      	adcs	r2, r3
 80029c8:	602a      	str	r2, [r5, #0]
 80029ca:	e7ee      	b.n	80029aa <__swhatbuf_r+0x1e>
 80029cc:	2340      	movs	r3, #64	; 0x40
 80029ce:	2000      	movs	r0, #0
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	b016      	add	sp, #88	; 0x58
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029d8 <__smakebuf_r>:
 80029d8:	898b      	ldrh	r3, [r1, #12]
 80029da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029dc:	079d      	lsls	r5, r3, #30
 80029de:	4606      	mov	r6, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	d507      	bpl.n	80029f4 <__smakebuf_r+0x1c>
 80029e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	6123      	str	r3, [r4, #16]
 80029ec:	2301      	movs	r3, #1
 80029ee:	6163      	str	r3, [r4, #20]
 80029f0:	b002      	add	sp, #8
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	466a      	mov	r2, sp
 80029f6:	ab01      	add	r3, sp, #4
 80029f8:	f7ff ffc8 	bl	800298c <__swhatbuf_r>
 80029fc:	9900      	ldr	r1, [sp, #0]
 80029fe:	4605      	mov	r5, r0
 8002a00:	4630      	mov	r0, r6
 8002a02:	f7ff f9d3 	bl	8001dac <_malloc_r>
 8002a06:	b948      	cbnz	r0, 8002a1c <__smakebuf_r+0x44>
 8002a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a0c:	059a      	lsls	r2, r3, #22
 8002a0e:	d4ef      	bmi.n	80029f0 <__smakebuf_r+0x18>
 8002a10:	f023 0303 	bic.w	r3, r3, #3
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	81a3      	strh	r3, [r4, #12]
 8002a1a:	e7e3      	b.n	80029e4 <__smakebuf_r+0xc>
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <__smakebuf_r+0x7c>)
 8002a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a20:	89a3      	ldrh	r3, [r4, #12]
 8002a22:	6020      	str	r0, [r4, #0]
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	81a3      	strh	r3, [r4, #12]
 8002a2a:	9b00      	ldr	r3, [sp, #0]
 8002a2c:	6120      	str	r0, [r4, #16]
 8002a2e:	6163      	str	r3, [r4, #20]
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	b15b      	cbz	r3, 8002a4c <__smakebuf_r+0x74>
 8002a34:	4630      	mov	r0, r6
 8002a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a3a:	f000 f8e3 	bl	8002c04 <_isatty_r>
 8002a3e:	b128      	cbz	r0, 8002a4c <__smakebuf_r+0x74>
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	81a3      	strh	r3, [r4, #12]
 8002a4c:	89a0      	ldrh	r0, [r4, #12]
 8002a4e:	4305      	orrs	r5, r0
 8002a50:	81a5      	strh	r5, [r4, #12]
 8002a52:	e7cd      	b.n	80029f0 <__smakebuf_r+0x18>
 8002a54:	080027e5 	.word	0x080027e5

08002a58 <memchr>:
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	b2c9      	uxtb	r1, r1
 8002a5e:	4402      	add	r2, r0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	d101      	bne.n	8002a6a <memchr+0x12>
 8002a66:	2000      	movs	r0, #0
 8002a68:	e003      	b.n	8002a72 <memchr+0x1a>
 8002a6a:	7804      	ldrb	r4, [r0, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	428c      	cmp	r4, r1
 8002a70:	d1f6      	bne.n	8002a60 <memchr+0x8>
 8002a72:	bd10      	pop	{r4, pc}

08002a74 <__malloc_lock>:
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <__malloc_lock+0x8>)
 8002a76:	f7ff bf87 	b.w	8002988 <__retarget_lock_acquire_recursive>
 8002a7a:	bf00      	nop
 8002a7c:	200000c0 	.word	0x200000c0

08002a80 <__malloc_unlock>:
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <__malloc_unlock+0x8>)
 8002a82:	f7ff bf82 	b.w	800298a <__retarget_lock_release_recursive>
 8002a86:	bf00      	nop
 8002a88:	200000c0 	.word	0x200000c0

08002a8c <_raise_r>:
 8002a8c:	291f      	cmp	r1, #31
 8002a8e:	b538      	push	{r3, r4, r5, lr}
 8002a90:	4604      	mov	r4, r0
 8002a92:	460d      	mov	r5, r1
 8002a94:	d904      	bls.n	8002aa0 <_raise_r+0x14>
 8002a96:	2316      	movs	r3, #22
 8002a98:	6003      	str	r3, [r0, #0]
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002aa2:	b112      	cbz	r2, 8002aaa <_raise_r+0x1e>
 8002aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002aa8:	b94b      	cbnz	r3, 8002abe <_raise_r+0x32>
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f830 	bl	8002b10 <_getpid_r>
 8002ab0:	462a      	mov	r2, r5
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aba:	f000 b817 	b.w	8002aec <_kill_r>
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d00a      	beq.n	8002ad8 <_raise_r+0x4c>
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	d103      	bne.n	8002ace <_raise_r+0x42>
 8002ac6:	2316      	movs	r3, #22
 8002ac8:	6003      	str	r3, [r0, #0]
 8002aca:	2001      	movs	r0, #1
 8002acc:	e7e7      	b.n	8002a9e <_raise_r+0x12>
 8002ace:	2400      	movs	r4, #0
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002ad6:	4798      	blx	r3
 8002ad8:	2000      	movs	r0, #0
 8002ada:	e7e0      	b.n	8002a9e <_raise_r+0x12>

08002adc <raise>:
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <raise+0xc>)
 8002ade:	4601      	mov	r1, r0
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	f7ff bfd3 	b.w	8002a8c <_raise_r>
 8002ae6:	bf00      	nop
 8002ae8:	2000002c 	.word	0x2000002c

08002aec <_kill_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	2300      	movs	r3, #0
 8002af0:	4d06      	ldr	r5, [pc, #24]	; (8002b0c <_kill_r+0x20>)
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	602b      	str	r3, [r5, #0]
 8002afa:	f7fe f80b 	bl	8000b14 <_kill>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d102      	bne.n	8002b08 <_kill_r+0x1c>
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	b103      	cbz	r3, 8002b08 <_kill_r+0x1c>
 8002b06:	6023      	str	r3, [r4, #0]
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200000c4 	.word	0x200000c4

08002b10 <_getpid_r>:
 8002b10:	f7fd bff9 	b.w	8000b06 <_getpid>

08002b14 <__sread>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	460c      	mov	r4, r1
 8002b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1c:	f000 f894 	bl	8002c48 <_read_r>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	bfab      	itete	ge
 8002b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b26:	89a3      	ldrhlt	r3, [r4, #12]
 8002b28:	181b      	addge	r3, r3, r0
 8002b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b2e:	bfac      	ite	ge
 8002b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b32:	81a3      	strhlt	r3, [r4, #12]
 8002b34:	bd10      	pop	{r4, pc}

08002b36 <__swrite>:
 8002b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3a:	461f      	mov	r7, r3
 8002b3c:	898b      	ldrh	r3, [r1, #12]
 8002b3e:	4605      	mov	r5, r0
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	460c      	mov	r4, r1
 8002b44:	4616      	mov	r6, r2
 8002b46:	d505      	bpl.n	8002b54 <__swrite+0x1e>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b50:	f000 f868 	bl	8002c24 <_lseek_r>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	4632      	mov	r2, r6
 8002b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	4628      	mov	r0, r5
 8002b60:	463b      	mov	r3, r7
 8002b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6a:	f000 b817 	b.w	8002b9c <_write_r>

08002b6e <__sseek>:
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	460c      	mov	r4, r1
 8002b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b76:	f000 f855 	bl	8002c24 <_lseek_r>
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	bf15      	itete	ne
 8002b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b8a:	81a3      	strheq	r3, [r4, #12]
 8002b8c:	bf18      	it	ne
 8002b8e:	81a3      	strhne	r3, [r4, #12]
 8002b90:	bd10      	pop	{r4, pc}

08002b92 <__sclose>:
 8002b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b96:	f000 b813 	b.w	8002bc0 <_close_r>
	...

08002b9c <_write_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4d05      	ldr	r5, [pc, #20]	; (8002bbc <_write_r+0x20>)
 8002ba8:	602a      	str	r2, [r5, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7fd ffe9 	bl	8000b82 <_write>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d102      	bne.n	8002bba <_write_r+0x1e>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	b103      	cbz	r3, 8002bba <_write_r+0x1e>
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	200000c4 	.word	0x200000c4

08002bc0 <_close_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4d05      	ldr	r5, [pc, #20]	; (8002bdc <_close_r+0x1c>)
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	f7fd fff5 	bl	8000bba <_close>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_close_r+0x1a>
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_close_r+0x1a>
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	200000c4 	.word	0x200000c4

08002be0 <_fstat_r>:
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	2300      	movs	r3, #0
 8002be4:	4d06      	ldr	r5, [pc, #24]	; (8002c00 <_fstat_r+0x20>)
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	f7fd ffef 	bl	8000bd0 <_fstat>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	d102      	bne.n	8002bfc <_fstat_r+0x1c>
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	b103      	cbz	r3, 8002bfc <_fstat_r+0x1c>
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	bd38      	pop	{r3, r4, r5, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000c4 	.word	0x200000c4

08002c04 <_isatty_r>:
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	2300      	movs	r3, #0
 8002c08:	4d05      	ldr	r5, [pc, #20]	; (8002c20 <_isatty_r+0x1c>)
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	f7fd ffed 	bl	8000bee <_isatty>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	d102      	bne.n	8002c1e <_isatty_r+0x1a>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	b103      	cbz	r3, 8002c1e <_isatty_r+0x1a>
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	200000c4 	.word	0x200000c4

08002c24 <_lseek_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4d05      	ldr	r5, [pc, #20]	; (8002c44 <_lseek_r+0x20>)
 8002c30:	602a      	str	r2, [r5, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f7fd ffe5 	bl	8000c02 <_lseek>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d102      	bne.n	8002c42 <_lseek_r+0x1e>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	b103      	cbz	r3, 8002c42 <_lseek_r+0x1e>
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	200000c4 	.word	0x200000c4

08002c48 <_read_r>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	4d05      	ldr	r5, [pc, #20]	; (8002c68 <_read_r+0x20>)
 8002c54:	602a      	str	r2, [r5, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f7fd ff76 	bl	8000b48 <_read>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d102      	bne.n	8002c66 <_read_r+0x1e>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	b103      	cbz	r3, 8002c66 <_read_r+0x1e>
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	200000c4 	.word	0x200000c4

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
